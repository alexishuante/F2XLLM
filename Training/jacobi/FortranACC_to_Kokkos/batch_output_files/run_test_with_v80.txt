void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    for (int iter = 0; iter < niter; ++iter) {
        Kokkos::parallel_for("Jacobi Update", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA(const int i, const int j, const int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) +
                                        u(i, j-1, k) + u(i, j+1, k) +
                                        u(i, j, k-1) + u(i, j, k+1) +
                                        u(i, j, k));
        });

        // Use deep_copy to synchronize the views. One could use deep_copy or copy views directly.
        Kokkos::deep_copy(u, unew);
    }
}

void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    for (int iter = 0; iter < niter; ++iter) {
        Kokkos::parallel_for("Jacobi Update", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA(const int i, const int j, const int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) +
                                        u(i, j-1, k) + u(i, j+1, k) +
                                        u(i, j, k-1) + u(i, j, k+1) +
                                        u(i, j, k));
        });

        // Use deep_copy to synchronize the views. One could use deep_copy or copy views directly.
        Kokkos::deep_copy(u, unew);
    }
}

void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    for (int iter = 0; iter < niter; ++iter) {
        Kokkos::parallel_for("Jacobi Update", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA(const int i, const int j, const int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) +
                                        u(i, j-1, k) + u(i, j+1, k) +
                                        u(i, j, k-1) + u(i, j, k+1) +
                                        u(i, j, k));
        });

        // Use deep_copy to synchronize the views. One could use deep_copy or copy views directly.
        Kokkos::deep_copy(u, unew);
    }
}

void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    for (int iter = 0; iter < niter; ++iter) {
        Kokkos::parallel_for("Jacobi Update", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA(const int i, const int j, const int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) +
                                        u(i, j-1, k) + u(i, j+1, k) +
                                        u(i, j, k-1) + u(i, j, k+1) +
                                        u(i, j, k));
        });

        // Use deep_copy to synchronize the views. One could use deep_copy or copy views directly.
        Kokkos::deep_copy(u, unew);
    }
}

void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    for (int iter = 0; iter < niter; ++iter) {
        Kokkos::parallel_for("Jacobi Update", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA(const int i, const int j, const int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) +
                                        u(i, j-1, k) + u(i, j+1, k) +
                                        u(i, j, k-1) + u(i, j, k+1) +
                                        u(i, j, k));
        });

        // Use deep_copy to synchronize the views. One could use deep_copy or copy views directly.
        Kokkos::deep_copy(u, unew);
    }
}


void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    for (int iter = 0; iter < niter; ++iter) {
        Kokkos::parallel_for("Jacobi Update", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA(const int i, const int j, const int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) +
                                        u(i, j-1, k) + u(i, j+1, k) +
                                        u(i, j, k-1) + u(i, j, k+1) +
                                        u(i, j, k));
        });

        // Use deep_copy to synchronize the views. One could use deep_copy or copy views directly.
        Kokkos::deep_copy(u, unew);
    }
}

void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    for (int iter = 0; iter < niter; ++iter) {
        Kokkos::parallel_for("Jacobi Update", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA(const int i, const int j, const int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) +
                                        u(i, j-1, k) + u(i, j+1, k) +
                                        u(i, j, k-1) + u(i, j, k+1) +
                                        u(i, j, k));
        });

        // Use deep_copy to synchronize the views. One could use deep_copy or copy views directly.
        Kokkos::deep_copy(u, unew);
    }
}

void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    for (int iter = 0; iter < niter; ++iter) {
        Kokkos::parallel_for("Jacobi Update", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA(const int i, const int j, const int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) +
                                         u(i, j-1, k) + u(i, j+1, k) +
                                         u(i, j, k-1) + u(i, j, k+1) +
                                         u(i, j, k));
        });

        // Use deep_copy to synchronize the views. One could use deep_copy or copy views directly.
        Kokkos::deep_copy(u, unew);
    }
}

void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    for (int iter = 0; iter < niter; ++iter) {
        Kokkos::parallel_for("Jacobi Update", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA(const int i, const int j, const int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) +
                                        u(i, j-1, k) + u(i, j+1, k) +
                                        u(i, j, k-1) + u(i, j, k+1) +
                                        u(i, j, k));
        });

        // Use deep_copy to synchronize the views. One could use deep_copy or copy views directly.
        Kokkos::deep_copy(u, unew);
    }
}
void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    for (int iter = 0; iter < niter; ++iter) {
        Kokkos::parallel_for("Jacobi Update", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA(const int i, const int j, const int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) +
                                        u(i, j-1, k) + u(i, j+1, k) +
                                        u(i, j, k-1) + u(i, j, k+1) +
                                        u(i, j, k));
        });

        // Use deep_copy to synchronize the views. One could use deep_copy or copy views directly.
        Kokkos::deep_copy(u, unew);
    }
}