void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                            u[i][j - 1][k] + u[i][j + 1][k] +
                                            u[i][j][k - 1] + u[i][j][k + 1] +
                                            u[i][j][k]);
                }
            }
        }

        /* Swap the arrays: u <- unew */
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; ++iter) {
        for (k = 1; k < n - 1; ++k) {
            for (j = 1; j < n - 1; ++j) {
                for (i = 1; i < n - 1; ++i) {
                    unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                            u[i][j - 1][k] + u[i][j + 1][k] +
                                            u[i][j][k - 1] + u[i][j][k + 1] +
                                            u[i][j][k]);
                }
            }
        }

        /* Swap the arrays: u <- unew */
        for (k = 0; k < n; ++k) {
            for (j = 0; j < n; ++j) {
                for (i = 0; i < n; ++i) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma omp parallel num_threads(nthreads) shared(u, unew) private(i, j, k, iter)
    {   
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static) collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                                u[i][j - 1][k] + u[i][j + 1][k] + 
                                                u[i][j][k - 1] + u[i][j][k + 1] + 
                                                u[i][j][k]);
                    }
                }
            }

            #pragma omp barrier

            /* Swap the arrays: u <- unew */
            #pragma omp for schedule(static) collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }

            #pragma omp barrier
        }
    }
}
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                            u[i][j - 1][k] + u[i][j + 1][k] +
                                            u[i][j][k - 1] + u[i][j][k + 1] +
                                            u[i][j][k]);
                }
            }
        }

        /* Swap the arrays: u <- unew */
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                            u[i][j - 1][k] + u[i][j + 1][k] + 
                                            u[i][j][k - 1] + u[i][j][k + 1] + 
                                            u[i][j][k]);
                }
            }
        }

        /* Swap the arrays: u <- unew */
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; ++iter) {
        for (k = 1; k < n - 1; ++k) {
            for (j = 1; j < n - 1; ++j) {
                for (i = 1; i < n - 1; ++i) {
                    unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                            u[i][j - 1][k] + u[i][j + 1][k] + 
                                            u[i][j][k - 1] + u[i][j][k + 1] + 
                                            u[i][j][k]);
                }
            }
        }

        /* Swap the arrays: u <- unew */
        for (k = 0; k < n; ++k) {
            for (j = 0; j < n; ++j) {
                for (i = 0; i < n; ++i) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                            u[i][j - 1][k] + u[i][j + 1][k] +
                                            u[i][j][k - 1] + u[i][j][k + 1] +
                                            u[i][j][k]);
                }
            }
        }

        /* Swap the arrays: u <- unew */
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                            u[i][j - 1][k] + u[i][j + 1][k] +
                                            u[i][j][k - 1] + u[i][j][k + 1] +
                                            u[i][j][k]);
                }
            }
        }

        /* Swap the arrays: u <- unew */
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int hipDevice) {
    hipSetDevice(hipDevice);
    for (int iter = 0; iter < niter; iter++) {
        for (int k = 1; k < n - 1; k++) {
            for (int j = 1; j < n - 1; j++) {
                for (int i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                            u[i][j - 1][k] + u[i][j + 1][k] +
                                            u[i][j][k - 1] + u[i][j][k + 1]);
                }
            }
        }

        /* Swap the arrays: u <- unew */
        double ***temp = u;
        u = unew;
        unew = temp;
    }
}
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                             u[i][j - 1][k] + u[i][j + 1][k] +
                                             u[i][j][k - 1] + u[i][j][k + 1] +
                                             u[i][j][k]);
                }
            }
        }

        /* Swap the arrays: u <- unew */
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}
