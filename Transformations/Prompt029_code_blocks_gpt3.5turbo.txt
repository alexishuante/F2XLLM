Code Block 1:
void spmv_c(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    hipMalloc(&d_val, nnz * sizeof(float));
    hipMalloc(&d_row, (n+1) * sizeof(int));
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n+1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    dim3 block(256);
    dim3 grid((n + block.x - 1) / block.x);

    spmv_parallel<<<grid, block>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 2:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    hipMalloc(&d_val, nnz * sizeof(float));
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);

    hipMalloc(&d_row, (n + 1) * sizeof(int));
    hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);

    hipMalloc(&d_col, nnz * sizeof(int));
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);

    hipMalloc(&d_x, n * sizeof(float));
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    hipMalloc(&d_y, n * sizeof(float);

    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    float sum = 0.0f;

    if (i < n) {
        for (int j = row[i]; j < row[i + 1]; j++) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

Code Block 3:
void spmv_parallel_wrapper(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    hipLaunchKernelGGL(spmv_parallel, dim3(numBlocks), dim3(blockSize), 0, 0, n, nnz, val, row, col, x, y);
}

__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 4:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    hipMalloc(&d_val, nnz * sizeof(float));
    hipMalloc(&d_row, (n+1) * sizeof(int));
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n+1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    dim3 blockSize(256);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x);
    
    spmv_kernel<<<gridSize, blockSize>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 5:
void spmv_parallel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    hipMalloc(&d_val, nnz * sizeof(float));
    hipMalloc(&d_row, (n + 1) * sizeof(int));
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    dim3 blockSize(256);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x);

    spmv_kernel<<<gridSize, blockSize>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void spmv_kernel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 6:
void spmv_parallel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    int i, j;
    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        y[i] = 0.0f;
        for (j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 7:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    
    hipMalloc(&d_val, nnz * sizeof(float));
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    
    hipMalloc(&d_row, (n+1) * sizeof(int));
    hipMemcpy(d_row, row, (n+1) * sizeof(int), hipMemcpyHostToDevice);
    
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    
    hipMalloc(&d_x, n * sizeof(float));
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    
    hipMalloc(&d_y, n * sizeof(float));
    
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;
    
    spmv_kernel<<<gridSize, blockSize>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 8:
void spmv_parallel_wrapper(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    hipLaunchKernelGGL(spmv_parallel, dim3((n + 255) / 256), dim3(256), 0, 0, n, nnz, val, row, col, x, y);
}

__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 9:
void spmv(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    hipLaunchKernelGGL(spmv_parallel, dim3(numBlocks), dim3(blockSize), 0, 0, n, nnz, val, row, col, x, y);
}

__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 10:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i, j;
    #pragma omp parallel for shared(n, nnz, val, row, col, x, y) private(i, j)
    for (i = 0; i < n; i++) {
        y[i] = 0.0;
        for (j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

