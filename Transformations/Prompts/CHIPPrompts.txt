Give me a function implemented in C with HIP of the next subroutine implemented in Fortran with OpenMP that computes an AXPY operation:
subroutine saxpy_parallel(n, a, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: a
    real, intent(in) :: x(n)
    real, intent(inout) :: y(n)
    integer :: i
    !$OMP PARALLEL DO
    do i = 1, n
        y(i) = a * x(i) + y(i)
    end do
    !$OMP END PARALLEL DO
end subroutine saxpy_parallel

Give me a function implemented in C with HIP of the next subroutine implemented in Fortran with OpenACC that computes an AXPY operation:
subroutine saxpy(n, a, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: a
    real, intent(in) :: x(n)
    real, intent(inout) :: y(n)
    integer :: i
    !$acc kernels
    do i = 1, n
        y(i) = a * x(i) + y(i)
    end do
    !$acc end kernels
end subroutine saxpy

Give me a function implemented in C with HIP of the next subroutine implemented in Fortran with OpenMP that computes a Generalized matrix-vector multiplication (GEMV) operation:
subroutine gemv_parallel(n, A, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: A(n, n)
    real, intent(in) :: x(n)
    real, intent(out) :: y(n)
    integer :: i, j
    real :: sum
    !$OMP PARALLEL DO PRIVATE(j, sum)
do i = 1, n
    sum = 0.0
    do j = 1, n
        sum = sum + A(i, j) * x(j)
    end do
    y(i) = sum
end do
!$OMP END PARALLEL DO
end subroutine gemv_parallel

Give me a function implemented in C with HIP of the next subroutine implemented in Fortran with OpenACC that computes a Generalized matrix-vector multiplication (GEMV) operation:
subroutine gemv_parallel(n, A, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: A(n, n)
    real, intent(in) :: x(n)
    real, intent(out) :: y(n)
    integer :: i, j
    real :: sum
    !$ACC PARALLEL LOOP
    do i = 1, n
        sum = 0.0
        do j = 1, n
            sum = sum + A(i, j) * x(j)
        end do
        y(i) = sum
    end do
    !$ACC END PARALLEL LOOP
end subroutine gemv_parallel

Give me a function implemented in C with HIP of the next subroutine implemented in Fortran with OpenMP that computes a Generalized Matrix multiplication (GEMM) operation:
subroutine gemm_parallel(m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
    implicit none
    integer, intent(in) :: m, n, k, lda, ldb, ldc
    real(kind=8), intent(in) :: alpha, beta
    real(kind=8), intent(in) :: a(lda, k), b(ldb, n)
    real(kind=8), intent(inout) :: c(ldc, n)
    integer :: i, j, l
    real(kind=8) :: temp
    !$OMP PARALLEL DO PRIVATE(i, j, l, temp) SCHEDULE(STATIC)
    do j = 1, n
      do i = 1, m
        temp = 0.0
        do l = 1, k
          temp = temp + a(i, l) * b(l, j)
        end do
        c(i, j) = alpha * temp + beta * c(i, j)
      end do
    end do
    !$OMP END PARALLEL DO
  end subroutine gemm_parallel

Give me a function implemented in C with HIP of the next subroutine implemented in Fortran with OpenACC that computes a Generalized Matrix multiplication (GEMM) operation:
subroutine gemm_parallel(m, n, k, alpha, a, lda, b, ldb, beta, c, ldc)
    implicit none
    integer, intent(in) :: m, n, k, lda, ldb, ldc
    real(kind=8), intent(in) :: alpha, beta
    real(kind=8), intent(in) :: a(lda, k), b(ldb, n)
    real(kind=8), intent(inout) :: c(ldc, n)
    integer :: i, j, l
    real(kind=8) :: temp
    !$ACC PARALLEL LOOP COLLAPSE(2) PRIVATE(i, j, l, temp)
    do j = 1, n
      do i = 1, m
        temp = 0.0
        do l = 1, k
          temp = temp + a(i, l) * b(l, j)
        end do
        c(i, j) = alpha * temp + beta * c(i, j)
      end do
    end do
    !$ACC END PARALLEL LOOP
  end subroutine gemm_parallel

Give me a function implemented in C with HIP of the next subroutine implemented in Fortran with OpenMP that computes a Jacobi operation:
subroutine jacobi_parallel(u, unew, n, niter, nthreads)
  implicit none
  integer, intent(in) :: n, niter, nthreads
  real(kind=8), dimension(n, n, n), intent(inout) :: u, unew
  integer :: i, j, k, iter
  !$OMP PARALLEL NUM_THREADS(nthreads) PRIVATE(i, j, k, iter)
  do iter = 1, niter
    !$OMP DO SCHEDULE(STATIC)
    do k = 2, n - 1
      do j = 2, n - 1
        do i = 2, n - 1
          unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i,j-1, k) &
            + u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k))
        end do
      end do
    end do
    !$OMP END DO
    !$OMP BARRIER
    u(:, :, :) = unew(:, :, :)
  end do
  !$OMP END PARALLEL
end subroutine jacobi_parallel

Give me a function implemented in C with HIP of the next subroutine implemented in Fortran with OpenACC that computes a Jacobi operation:
subroutine jacobi_parallel(u, unew, n, niter)
    implicit none
    integer, intent(in) :: n, niter
    real(kind=8), dimension(n, n, n), intent(inout) :: u, unew
    integer :: i, j, k, iter
    do iter = 1, niter
      !$ACC PARALLEL LOOP COLLAPSE(3) PRIVATE(i, j, k)
      do k = 2, n - 1
        do j = 2, n - 1
          do i = 2, n - 1
            unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) &
              + u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k))
          end do
        end do
      end do
      !$ACC END PARALLEL LOOP
      u(:, :, :) = unew(:, :, :)
    end do
  end subroutine jacobi_parallel

Give me a function implemented in C with HIP of the next subroutine implemented in Fortran with OpenMP that computes a Sparse matrix–vector multiplication (SpMV) operation:
subroutine spmv_parallel(n, nnz, val, row, col, x, y)
    integer, intent(in) :: n, nnz
    real, intent(in) :: val(nnz), x(n)
    integer, intent(in) :: row(n+1), col(nnz)
    real, intent(out) :: y(n)
    integer i, j
    !$OMP PARALLEL DO DEFAULT(NONE) SHARED(n, nnz, val, row, col, x, y) PRIVATE(i, j)
    do i = 1, n
      y(i) = 0.0
      do j = row(i), row(i+1)-1
        y(i) = y(i) + val(j) * x(col(j))
      enddo
    enddo
    !$OMP END PARALLEL DO
  end subroutine spmv_parallel

Give me a function implemented in C with HIP of the next subroutine implemented in Fortran with OpenACC that computes a Sparse matrix–vector multiplication (SpMV) operation:
subroutine spmv_parallel(n, nnz, val, row, col, x, y)
    integer, intent(in) :: n, nnz
    real, intent(in) :: val(nnz), x(n)
    integer, intent(in) :: row(n+1), col(nnz)
    real, intent(out) :: y(n)
    integer i, j
    !$ACC PARALLEL LOOP DEFAULT(PRESENT) COPYIN(val, row, col, x) COPYOUT(y)
    do i = 1, n
      y(i) = 0.0
      do j = row(i), row(i+1)-1
        y(i) = y(i) + val(j) * x(col(j))
      enddo
    enddo
    !$ACC END PARALLEL LOOP
  end subroutine spmv_parallel

Give me a code implemented in C with HIP of the next code implemented in Fortran with OpenMP that computes a Hartree-Fock operation:
!$OMP PARALLEL DO PRIVATE(ib,jb,kb,lb,ijkl,ij,i,j,kl,k,l,n,aij,dij,xij,yij,zij,akl,dkl,aijkl,tt,f0t,eri)
    do  ijkl  =  1,  nnnn 
        ! decompose triangular ijkl index into ij>=kl
        ij = sqrt( dble( 2*ijkl ) )
        n = ( ij*ij + ij )/2
        do  while ( n .lt. ijkl )
            ij = ij + 1
            n = ( ij*ij + ij )/2
        end do
        kl  =  ijkl - ( ij*ij - ij )/2 
        if ( schwarz( ij )*schwarz( kl ) > dtol ) then      
            ! decompose triangular ij index into i>=j
            i = sqrt( dble( 2*ij ) )
            n = ( i*i + i )/2
            do  while ( n .lt. ij )
                i = i + 1
                n = ( i*i + i )/2
            end do
            j  =  ij - ( i*i - i )/2 
            ! decompose triangular kl index into k>=l
            k = sqrt( dble( 2*kl ) )
            n = ( k*k + k )/2
            do  while ( n .lt. kl )
                k = k + 1
                n = ( k*k + k )/2
            end do
            l  =  kl - ( k*k - k )/2 
            eri  =  0.0d0 
            do  ib  =  1,  ngauss  
                do  jb  =  1,  ngauss  
                    aij = 1.0d0/( xpnt( ib ) + xpnt( jb ) ) 
                    dij = coef( ib )*coef( jb )*exp( -xpnt( ib )*xpnt( jb )*aij*  &  
                        ( ( geom( 1, i ) - geom( 1, j ) )**2   &
                        + ( geom( 2, i ) - geom( 2, j ) )**2   &
                        + ( geom( 3, i ) - geom( 3, j ) )**2  )  )*( aij**1.5d0 )  
                    if ( abs( dij ) > dtol ) then      
                        xij = aij*( xpnt( ib )*geom( 1, i ) + xpnt( jb )*geom( 1, j ) )  
                        yij = aij*( xpnt( ib )*geom( 2, i ) + xpnt( jb )*geom( 2, j ) )  
                        zij = aij*( xpnt( ib )*geom( 3, i ) + xpnt( jb )*geom( 3, j ) )  
                        do  kb  =  1,  ngauss  
                            do  lb  =  1,  ngauss 
                                akl = 1.0d0/( xpnt( kb ) + xpnt( lb ) ) 
                                dkl = dij*coef( kb )*coef( lb )*exp( -xpnt( kb )*xpnt( lb )*akl*  &  
                                    ( ( geom( 1, k ) - geom( 1, l ) )**2   &
                                    + ( geom( 2, k ) - geom( 2, l ) )**2   &
                                    + ( geom( 3, k ) - geom( 3, l ) )**2  )  )*( akl**1.5d0 )  
                                if ( abs( dkl ) > dtol ) then      
                                    aijkl = ( xpnt( ib ) + xpnt( jb ) )*( xpnt( kb ) + xpnt( lb ) )  &  
                                        / ( xpnt( ib ) + xpnt( jb )  +  xpnt( kb ) + xpnt( lb ) )  
                                    tt = aijkl*( ( xij -akl*( xpnt( kb )*geom( 1, k ) + xpnt( lb )*geom( 1, l ) ) )**2  & 
                                                + ( yij -akl*( xpnt( kb )*geom( 2, k ) + xpnt( lb )*geom( 2, l ) ) )**2  & 
                                                + ( zij -akl*( xpnt( kb )*geom( 3, k ) + xpnt( lb )*geom( 3, l ) ) )**2  ) 
                                    f0t  =  sqrpi2 
                                if ( tt > rcut )  f0t  =  ( tt**( -0.5d0 ) )*erf( sqrt(tt) ) 
                                    eri  =  eri  +  dkl*f0t*sqrt(aijkl)  
                                end if 
                        end do  ;  end do  
                    end if  
            end do  ;  end do 
            if ( i == j ) eri = eri*0.5d0 
            if ( k == l ) eri = eri*0.5d0 
            if ( i == k .and. j == l ) eri = eri*0.5d0
            !$OMP ATOMIC
                fock( i, j )  =  fock( i, j )  +dens( k, l )*eri*4.0d0  
            !$OMP ATOMIC
                fock( k, l )  =  fock( k, l )  +dens( i, j )*eri*4.0d0  
            !$OMP ATOMIC
                fock( i, k )  =  fock( i, k )  -dens( j, l )*eri  
            !$OMP ATOMIC
                fock( i, l )  =  fock( i, l )  -dens( j, k )*eri  
            !$OMP ATOMIC
                fock( j, k )  =  fock( j, k )  -dens( i, l )*eri  
            !$OMP ATOMIC
                fock( j, l )  =  fock( j, l )  -dens( i, k )*eri  
        end if  
    end do  
!$OMP END PARALLEL DO

