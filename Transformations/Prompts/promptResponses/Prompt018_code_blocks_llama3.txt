Code Block 1:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;

  #pragma acc data copy(u(:,:,:), unew(:,:,:))
  for (iter = 1; iter <= niter; iter++) {
    #pragma acc parallel loop collapse(3) private(i, j, k)
    for (k = 2; k < n - 1; k++) {
      for (j = 2; j < n - 1; j++) {
        for (i = 2; i < n - 1; i++) {
          unew[k][j][i] = 0.125 * (u[k][j][i-1] + u[k][j][i+1] + u[k][j-1][i] +
            u[k][j+1][i] + u[k-1][j][i] + u[k+1][j][i] + u[k][j][i]);
        }
      }
    }
    #pragma acc copy(u(:,:,:), unew(:,:,:))
  }
}

Code Block 2:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;
  #pragma acc parallel loop collapse(3) private(i, j, k)
  for (iter = 1; iter <= niter; iter++) {
    for (k = 2; k < n - 1; k++) {
      for (j = 2; j < n - 1; j++) {
        for (i = 2; i < n - 1; i++) {
          unew[k][j][i] = 0.125 * (u[k][j][i-1] + u[k][j][i+1] + u[k][j-1][i] +
            u[k][j+1][i] + u[k-1][j][i] + u[k+1][j][i] + u[k][j][i]);
        }
      }
    }
  }
  #pragma acc end parallel loop
  #pragma acc parallel loop collapse(3) private(i, j, k)
  for (k = 0; k < n; k++) {
    for (j = 0; j < n; j++) {
      for (i = 0; i < n; i++) {
        u[k][j][i] = unew[k][j][i];
      }
    }
  }
}

Code Block 3:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 1; iter <= niter; iter++) {
    #pragma acc parallel loop collapse(3) private(i, j, k)
    for (k = 2; k < n - 1; k++) {
      for (j = 2; j < n - 1; j++) {
        for (i = 2; i < n - 1; i++) {
          unew[(i * n * n) + (j * n) + k] = 0.125f * (
            u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
            u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
            u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
            u[i * n * n + j * n + k]);
        }
      }
    }
    #pragma acc end parallel loop
    #pragma acc parallel loop collapse(3) private(i, j, k)
    for (k = 0; k < n; k++) {
      for (j = 0; j < n; j++) {
        for (i = 0; i < n; i++) {
          u[(i * n * n) + (j * n) + k] = unew[(i * n * n) + (j * n) + k];
        }
      }
    }
  }
}

Code Block 4:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;

  for (iter = 1; iter <= niter; iter++) {
    #pragma acc parallel loop collapse(3) private(i, j, k)
    for (k = 2; k < n - 1; k++) {
      for (j = 2; j < n - 1; j++) {
        for (i = 2; i < n - 1; i++) {
          unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] + u[i][j - 1][k] +
                                    u[i][j + 1][k] + u[i][j][k - 1] + u[i][j][k + 1] + u[i][j][k]);
        }
      }
    }
    #pragma acc end parallel loop
    for (k = 0; k < n; k++) {
      for (j = 0; j < n; j++) {
        for (i = 0; i < n; i++) {
          u[i][j][k] = unew[i][j][k];
        }
      }
    }
  }
}

Code Block 5:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;
  #pragma acc kernels loop independent collapse(3) private(i, j, k)
  for (iter = 1; iter <= niter; iter++) {
    for (k = 2; k < n - 1; k++) {
      for (j = 2; j < n - 1; j++) {
        for (i = 2; i < n - 1; i++) {
          unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                 u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
        }
      }
    }
  }
  #pragma acc update host(u[:n][:n][:n])
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      for (k = 0; k < n; k++) {
        u[i][j][k] = unew[i][j][k];
      }
    }
  }
}

Code Block 6:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;
  #pragma acc parallel loop collapse(3) private(i, j, k)
  for (iter = 1; iter <= niter; iter++) {
    for (k = 2; k < n - 1; k++) {
      for (j = 2; j < n - 1; j++) {
        for (i = 2; i < n - 1; i++) {
          unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
            u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
        }
      }
    }
  }
  #pragma acc end parallel loop
  #pragma acc parallel loop collapse(3) private(i, j, k)
  for (k = 0; k < n; k++) {
    for (j = 0; j < n; j++) {
      for (i = 0; i < n; i++) {
        u[i][j][k] = unew[i][j][k];
      }
    }
  }
}

Code Block 7:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;
  #pragma acc parallel loop collapse(3) private(i, j, k)
  for (iter = 1; iter <= niter; iter++) {
    for (k = 2; k < n - 1; k++) {
      for (j = 2; j < n - 1; j++) {
        for (i = 2; i < n - 1; i++) {
          unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                     u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
        }
      }
    }
  }
  #pragma acc end parallel loop
  for (k = 0; k < n; k++) {
    for (j = 0; j < n; j++) {
      for (i = 0; i < n; i++) {
        u[i][j][k] = unew[i][j][k];
      }
    }
  }
}

Code Block 8:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;
  #pragma acc parallel loop collapse(3) private(i, j, k)
  for (iter = 1; iter <= niter; iter++) {
    for (k = 2; k < n - 1; k++) {
      for (j = 2; j < n - 1; j++) {
        for (i = 2; i < n - 1; i++) {
          unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
            u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
        }
      }
    }
  }
  #pragma acc end parallel loop
  #pragma acc parallel loop collapse(3) private(i, j, k)
  for (k = 0; k < n; k++) {
    for (j = 0; j < n; j++) {
      for (i = 0; i < n; i++) {
        u[i][j][k] = unew[i][j][k];
      }
    }
  }
}

Code Block 9:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  for (int iter = 0; iter < niter; ++iter) {
    #pragma acc parallel loop collapse(3) present(u, unew)
    for (int k = 1; k < n - 1; ++k) {
      for (int j = 1; j < n - 1; ++j) {
        for (int i = 1; i < n - 1; ++i) {
          int idx = i + j * n + k * n * n;
          unew[idx] = 0.125f * (u[idx - 1] + u[idx + 1] + u[idx - n] +
                                 u[idx + n] + u[idx - n * n] + u[idx + n * n] + u[idx]);
        }
      }
    }
    #pragma acc host_data use_device(u, unew)
    {
      #pragma acc parallel loop collapse(3) present(u, unew)
      for (int k = 0; k < n * n * n; ++k) {
        u[k] = unew[k];
      }
    }
  }
}

Code Block 10:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  for (int iter = 0; iter < niter; ++iter) {
    #pragma acc parallel loop collapse(3) private(i, j, k)
    for (int k = 1; k < n - 1; ++k) {
      for (int j = 1; j < n - 1; ++j) {
        for (int i = 1; i < n - 1; ++i) {
          unew[(k * n * n) + (j * n) + i] = 0.125f * (
            u[(k * n * n) + (j * n) + (i - 1)] + 
            u[(k * n * n) + (j * n) + (i + 1)] + 
            u[(k * n * n) + ((j - 1) * n) + i] + 
            u[(k * n * n) + ((j + 1) * n) + i] + 
            u[((k - 1) * n * n) + (j * n) + i] + 
            u[((k + 1) * n * n) + (j * n) + i] + 
            u[(k * n * n) + (j * n) + i]);
        }
      }
    }
    #pragma acc parallel loop collapse(3) private(i, j, k)
    for (int k = 1; k < n - 1; ++k) {
      for (int j = 1; j < n - 1; ++j) {
        for (int i = 1; i < n - 1; ++i) {
          u[(k * n * n) + (j * n) + i] = unew[(k * n * n) + (j * n) + i];
        }
      }
    }
  }
}

