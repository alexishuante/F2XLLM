Code Block 1:
void check(hipError_t result, const char *const func, const char *const file, const int line) {
    if (result) {
        std::cerr << "HIP error at " << file << ":" << line << " code=" << static_cast<unsigned int>(result)
                  << " \"" << func << "\"" << std::endl;
        exit(EXIT_FAILURE);
    }
}

__global__ void gemv_kernel(int n, const float *A, const float *x, float *y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 2:
void gemv_parallel(int n, const float* h_A, const float* h_x, float* h_y) {
    float *d_A, *d_x, *d_y;

    // Allocate memory on the device
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data to the device
    hipMemcpy(d_A, h_A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, h_x, n * sizeof(float), hipMemcpyHostToDevice);

    // Launch the kernel with enough threads to cover `n` elements
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    hipLaunchKernelGGL(gemv_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    // Copy the result back to the host
    hipMemcpy(h_y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, const float* A, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 3:
void gemv_parallel(int n, const std::vector<float>& A, const std::vector<float>& x, std::vector<float>& y) {
    float *d_A, *d_x, *d_y;
    size_t size_A = n * n * sizeof(float);
    size_t size_x = n * sizeof(float);
    size_t size_y = n * sizeof(float);

    // Allocate device memory
    hipMalloc(&d_A, size_A);
    hipMalloc(&d_x, size_x);
    hipMalloc(&d_y, size_y);

    // Copy data to device
    hipMemcpy(d_A, A.data(), size_A, hipMemcpyHostToDevice);
    hipMemcpy(d_x, x.data(), size_x, hipMemcpyHostToDevice);

    // Determine grid and block dimensions
    dim3 threadsPerBlock(256);
    dim3 blocksPerGrid((n + threadsPerBlock.x - 1) / threadsPerBlock.x);

    // Launch the kernel
    hipLaunchKernelGGL(gemv_kernel, blocksPerGrid, threadsPerBlock, 0, 0, n, d_A, d_x, d_y);

    // Check for any errors with kernel launch
    hipError_t err = hipGetLastError();
    if (err != hipSuccess) {
        std::cerr << "Kernel launch error: " << hipGetErrorString(err) << std::endl;
    }

    // Copy result back to host
    hipMemcpy(y.data(), d_y, size_y, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, const float* A, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 4:
void gemv_parallel(int n, const float* A, const float* x, float* y) {
    float *d_A, *d_x, *d_y;

    // Allocate device memory
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data from host to device
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    // Calculate grid configuration
    int blockSize = THREADS_PER_BLOCK;
    int numBlocks = (n + blockSize - 1) / blockSize;

    // Launch kernel
    hipLaunchKernelGGL(gemv_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    // Copy the result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, const float* A, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 5:
void gemv_parallel(int n, const std::vector<float>& A, const std::vector<float>& x, std::vector<float>& y) {
    // Device pointers
    float *d_A, *d_x, *d_y;

    // Allocate device memory
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data to device
    hipMemcpy(d_A, A.data(), n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x.data(), n * sizeof(float), hipMemcpyHostToDevice);

    // Launch kernel
    int blockSize = 256; // Number of threads per block
    int gridSize = (n + blockSize - 1) / blockSize; // Number of blocks per grid
    hipLaunchKernelGGL(gemv_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y.data(), d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__
void gemv_kernel(int n, const float* A, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 6:
void gemv(int n, const float *A, const float *x, float *y) {
    float *d_A, *d_x, *d_y;

    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    hipLaunchKernelGGL(gemv_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, const float *A, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 7:
void gemv_parallel(int n, const float* A, const float* x, float* y) {
    float *d_A, *d_x, *d_y;

    // Allocate device memory
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data to device
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    // Define block size and grid size
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch the kernel
    hipLaunchKernelGGL(gemv_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, const float* A, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 8:
void gemv_parallel(int n, const float* A, const float* x, float* y) {
    float *d_A, *d_x, *d_y;

    // Allocate memory on the device
    hipMalloc((void**)&d_A, n * n * sizeof(float));
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));

    // Copy data from host to device
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    // Configure grid and block sizes
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch the kernel
    hipLaunchKernelGGL(gemv_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, const float* A, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 9:
void gemv_parallel_host(int n, const float *A, const float *x, float *y) {
    float *d_A, *d_x, *d_y;
    
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    hipLaunchKernelGGL(gemv_parallel, dim3(numBlocks), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_parallel(int n, const float *A, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 10:
void gemv_parallel(int n, const float* A, const float* x, float* y) {
    const int sizeMatrix = n * n * sizeof(float);
    const int sizeVector = n * sizeof(float);

    // Allocate device memory
    float *d_A, *d_x, *d_y;
    hipMalloc(&d_A, sizeMatrix);
    hipMalloc(&d_x, sizeVector);
    hipMalloc(&d_y, sizeVector);

    // Transfer data to device
    hipMemcpy(d_A, A, sizeMatrix, hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, sizeVector, hipMemcpyHostToDevice);

    // Define grid and block size
    int blockSize = 256; // you can tune this
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch kernel
    hipLaunchKernelGGL(gemv_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    // Transfer result back to host
    hipMemcpy(y, d_y, sizeVector, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, const float* A, const float* x, float* y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

