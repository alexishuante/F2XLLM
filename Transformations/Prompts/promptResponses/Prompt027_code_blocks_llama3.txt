Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i + j * n + k * n * n] = 0.125 * (u[(i - 1) + j * n + k * n * n] + 
                                                     u[(i + 1) + j * n + k * n * n] + 
                                                     u[i + (j - 1) * n + k * n * n] + 
                                                     u[i + (j + 1) * n + k * n * n] + 
                                                     u[i + j * n + (k - 1) * n * n] + 
                                                     u[i + j * n + (k + 1) * n * n] + 
                                                     u[i + j * n + k * n * n]);
          }
        }
      }
      #pragma omp barrier
      hipMemcpy(u, unew, n * n * n * sizeof(double), hipMemcpyDeviceToDevice);
    }
  }
}

Code Block 2:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125f * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
        u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
        u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
      __syncthreads();
      u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
    }
  }
}

Code Block 3:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  int stride = gridDim.x * blockDim.x;
  for (int iter = 0; iter < niter; iter++) {
    for (int k = 2; k < n - 1; k += stride) {
      for (int j = 2; j < n - 1; j++) {
        for (int i = 2; i < n - 1; i++) {
          if (idx == 0) {
            unew[i * n * n + j * n + k] = 0.125f * (
              u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
              u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
              u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
              u[i * n * n + j * n + k]);
          }
        }
      }
    }
    __syncthreads();
    if (idx == 0) {
      memcpy(u, unew, n * n * n * sizeof(float));
    }
  }
}

Code Block 4:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125f * (u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
        u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] + u[i + j * n + (k - 1) * n * n] +
        u[i + j * n + (k + 1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 5:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125f * (u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
        u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] + u[i + j * n + (k - 1) * n * n] +
        u[i + j * n + (k + 1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
    }
    u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
  }
}

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
        u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
        u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
      __syncthreads();
      u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
    }
  }
}

Code Block 7:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
#pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
#pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i + j * n + k * n * n] = 0.125f * (
              u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
              u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] +
              u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] +
              u[i + j * n + k * n * n]
            );
          }
        }
      }
#pragma omp barrier
      __syncthreads(); // for HIP
      hipMemcpy(u, unew, n * n * n * sizeof(float), hipMemcpyDeviceToDevice);
    }
  }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    #pragma omp for schedule(static)
    for (iter = 1; iter <= niter; iter++) {
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i + j * n + k * n * n] = 0.125 * (u[(i - 1) + j * n + k * n * n] + 
                                                     u[(i + 1) + j * n + k * n * n] + 
                                                     u[i + (j - 1) * n + k * n * n] + 
                                                     u[i + (j + 1) * n + k * n * n] + 
                                                     u[i + j * n + (k - 1) * n * n] + 
                                                     u[i + j * n + (k + 1) * n * n] + 
                                                     u[i + j * n + k * n * n]);
          }
        }
      }
      #pragma omp barrier
      hipMemcpy(u, unew, n * n * n * sizeof(double), hipMemcpyDeviceToDevice);
    }
  }
}

Code Block 9:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  int stride = blockDim.x * gridDim.x;

  for (int iter = 0; iter < niter; iter++) {
    for (int k = 2 + idx; k < n - 1; k += stride) {
      for (int j = 2; j < n - 1; j++) {
        for (int i = 2; i < n - 1; i++) {
          unew[i + j * n + k * n * n] = 0.125f * (
              u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
              u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] +
              u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] +
              u[i + j * n + k * n * n]);
        }
      }
    }
    __syncthreads();
    float *tmp = u;
    u = unew;
    unew = tmp;
  }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    #pragma omp for schedule(static)
    for (iter = 1; iter <= niter; iter++) {
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i + j * n + k * n * n] = 0.125 * (
              u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
              u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] +
              u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] +
              u[i + j * n + k * n * n]);
          }
        }
      }
      #pragma omp barrier
      #pragma omp for schedule(static)
      for (int index = 0; index < n * n * n; index++) {
        u[index] = unew[index];
      }
    }
  }
}

