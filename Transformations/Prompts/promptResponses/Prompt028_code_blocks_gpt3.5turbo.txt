Code Block 1:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;

    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 blockDim(8, 8, 8);
    dim3 gridDim((n - 2 + blockDim.x - 1) / blockDim.x, (n - 2 + blockDim.y - 1) / blockDim.y, (n - 2 + blockDim.z - 1) / blockDim.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridDim, blockDim>>>(d_u, d_unew, n);

        hipMemcpy(unew, d_unew, size, hipMemcpyDeviceToHost);

        hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    }

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        unew[i + j * n + k * n * n] = 0.125 * (u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
                                                u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] +
                                                u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] +
                                                u[i + j * n + k * n * n]);
    }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);
    
    hipMalloc((void **)&d_u, size);
    hipMalloc((void **)&d_unew, size);
    
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    
    dim3 blockSize(16, 16, 16);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x,
                  (n + blockSize.y - 1) / blockSize.y,
                  (n + blockSize.z - 1) / blockSize.z);
    
    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        
        hipMemcpy(unew, d_unew, size, hipMemcpyDeviceToHost);
        
        hipMemcpy(d_u, d_unew, size, hipMemcpyDeviceToDevice);
    }
    
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    
    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                         u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                         u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + 
                                         u[i + j*n + k*n*n]);
    }
}

Code Block 3:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double* d_u;
    double* d_unew;

    hipMalloc(&d_u, n * n * n * sizeof(double));
    hipMalloc(&d_unew, n * n * n * sizeof(double));
    
    hipMemcpy(d_u, u, n * n * n * sizeof(double), hipMemcpyHostToDevice);

    dim3 block(16, 16, 16);
    dim3 grid((n + block.x - 1) / block.x, (n + block.y - 1) / block.y, (n + block.z - 1) / block.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<grid, block>>>(d_u, d_unew, n);

        // Copy data back to host
        hipMemcpy(unew, d_unew, n * n * n * sizeof(double), hipMemcpyDeviceToHost);

        // Swap pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                          u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] + 
                                          u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n+blockSize.x-1)/blockSize.x, (n+blockSize.y-1)/blockSize.y, (n+blockSize.z-1)/blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        hipDeviceSynchronize();

        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        int idx = k * n * n + j * n + i;
        unew[idx] = 0.125 * (u[idx-n] + u[idx+n] + u[idx-n*n] + u[idx+n*n] + u[idx-n*n*n] + u[idx+n*n*n] + u[idx]);
    }
}

Code Block 5:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        hipDeviceSynchronize();
        hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);
    }

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] + u[i + (j-1) * n + k * n * n] +
                                                u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] + u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
    }
}

Code Block 6:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);
    
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);
    
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 blocks((n + 15) / 16, (n + 15) / 16, (n + 15) / 16);
    dim3 threads(16, 16, 16);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<blocks, threads>>>(d_u, d_unew, n);
        hipDeviceSynchronize();
        hipMemcpy(unew, d_unew, size, hipMemcpyDeviceToHost);
        hipMemcpy(u, d_u, size, hipMemcpyDeviceToDevice);
    }

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    int j = threadIdx.y + blockIdx.y * blockDim.y;
    int k = threadIdx.z + blockIdx.z * blockDim.z;

    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        unew[i + j * n + k * n * n] = 0.125 * (u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
            u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] + u[i + j * n + (k - 1) * n] +
            u[i + j * n + (k + 1) * n] + u[i + j * n + k * n * n]);
    }
}

Code Block 7:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    for (int iter = 0; iter < niter; iter++) {
        dim3 block(8, 8, 8);
        dim3 grid((n + block.x - 1) / block.x, (n + block.y - 1) / block.y, (n + block.z - 1) / block.z);

        jacobi_kernel<<<grid, block>>>(u, unew, n);
        hipDeviceSynchronize();

        double* temp = u;
        u = unew;
        unew = temp;
    }
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + 
                                         u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] + 
                                         u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + 
                                         u[i + j*n + k*n*n]);
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter)
{
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 block(16, 16, 16);
    dim3 grid((n + block.x - 1) / block.x, (n + block.y - 1) / block.y, (n + block.z - 1) / block.z);

    for(int iter = 0; iter < niter; iter++)
    {
        jacobi_kernel<<<grid, block>>>(d_u, d_unew, n);

        hipMemcpy(u, d_unew, size, hipMemcpyDeviceToHost);
    }

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if(i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1)
    {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                    u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
    }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL([=] HIP_KERNEL(i, j, k) {
            int index = (k * n * n) + (j * n) + i;
            if (i > 1 && i < n - 1 && j > 1 && j < n - 1 && k > 1 && k < n - 1) {
                unew[index] = 0.125 * (u[index - n - n * n] + u[index + n + n * n] + u[index - n] +
                                       u[index + n] + u[index - 1] + u[index + 1] + u[index]);
            }
        }, dim3(n, n, n), dim3(1, 1, 1), 0, nullptr, u, unew, n);
        hipDeviceSynchronize();

        std::swap(u, unew);
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n-1)/blockSize.x + 1, (n-1)/blockSize.y + 1, (n-1)/blockSize.z + 1);

    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL(jacobi_kernel, gridSize, blockSize, 0, 0, d_u, d_unew, n);
        
        hipMemcpy(unew, d_unew, size, hipMemcpyDeviceToHost);

        hipMemcpy(d_u, d_unew, size, hipMemcpyDeviceToDevice);
    }

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                          u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                          u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
    }
}

