Code Block 1:
void jacobi_parallel(double* u, double* unew, int n, int niter, int threadsPerBlock) {
    size_t size = n * n * n * sizeof(double);
    
    // Allocate device memory
    double *d_u, *d_unew;
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    // Copy initial data from host to device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    // Define the block size and the number of blocks
    dim3 blocksPerGrid((n + threadsPerBlock - 1) / threadsPerBlock,
                       (n + threadsPerBlock - 1) / threadsPerBlock,
                       (n + threadsPerBlock - 1) / threadsPerBlock);
    dim3 threadsPerBlockDim(threadsPerBlock, threadsPerBlock, threadsPerBlock);

    for (int iter = 0; iter < niter; iter++) {
        // Launch the kernel
        hipLaunchKernelGGL(jacobi_step, blocksPerGrid, threadsPerBlockDim, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize(); // Make sure all threads have completed

        // Swap the pointers
        std::swap(d_u, d_unew);
    }

    // Copy the result back to the host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_step(const double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        unew[IDX3D(i, j, k, n)] = 0.125 * (u[IDX3D(i-1, j, k, n)] +
                                            u[IDX3D(i+1, j, k, n)] +
                                            u[IDX3D(i, j-1, k, n)] +
                                            u[IDX3D(i, j+1, k, n)] +
                                            u[IDX3D(i, j, k-1, n)] +
                                            u[IDX3D(i, j, k+1, n)] +
                                            u[IDX3D(i, j, k, n)]);
    }
}

Code Block 2:
void jacobi_parallel(double* u, double* unew, int n, int niter, int nthreads) {
    double* d_u;
    double* d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y, 
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; ++iter) {
        hipLaunchKernelGGL(jacobiKernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();
        // Swap u and unew pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobiKernel(double* u, double* unew, int n) {
    int i = blockIdx.x*blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y*blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z*blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[IDX3(i, j, k, n)] = 0.125 * (
            u[IDX3(i-1, j, k, n)] + u[IDX3(i+1, j, k, n)] +
            u[IDX3(i, j-1, k, n)] + u[IDX3(i, j+1, k, n)] +
            u[IDX3(i, j, k-1, n)] + u[IDX3(i, j, k+1, n)] +
            u[IDX3(i, j, k, n)]
        );
    }
}

Code Block 3:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    // Allocate device memory
    double *d_u, *d_unew;
    hipMalloc(&d_u, n*n*n*sizeof(double));
    hipMalloc(&d_unew, n*n*n*sizeof(double));

    // Initialize device data
    hipMemcpy(d_u, u, n*n*n*sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, n*n*n*sizeof(double), hipMemcpyHostToDevice);

    // Define block and grid sizes
    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x,
                  (n + blockSize.y - 1) / blockSize.y,
                  (n + blockSize.z - 1) / blockSize.z);

    // Iterate niter times
    for (int iter = 0; iter < niter; ++iter) {
        jacobi_update<<<gridSize, blockSize>>>(d_u, d_unew, n);
        // Synchronize to ensure completion of computation
        hipDeviceSynchronize();
        
        // Swap pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy back the result to the host
    hipMemcpy(u, d_u, n*n*n*sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_update(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i*n*n + j*n + k] = 0.125 * (u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] +
                                         u[i*n*n + (j-1)*n + k] + u[i*n*n + (j+1)*n + k] +
                                         u[i*n*n + j*n + (k-1)] + u[i*n*n + j*n + (k+1)] +
                                         u[i*n*n + j*n + k]);
    }
}

Code Block 4:
void jacobi_parallel(double* u, double* unew, int n, int niter, int nthreads) {
    // Determine grid and block dimensions
    int blockSize = 8;  // Use 8x8x8 blocks
    dim3 threads(blockSize, blockSize, blockSize);
    dim3 grid((n + blockSize - 2) / blockSize, 
              (n + blockSize - 2) / blockSize, 
              (n + blockSize - 2) / blockSize);
    
    double *d_u, *d_unew;

    // Allocate memory on the device
    hipMalloc(&d_u,    n*n*n * sizeof(double));
    hipMalloc(&d_unew, n*n*n * sizeof(double));

    // Copy data from host to device
    hipMemcpy(d_u, u, n*n*n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, n*n*n * sizeof(double), hipMemcpyHostToDevice);

    for (int iter = 0; iter < niter; iter++) {
        // Execute the kernel
        hipLaunchKernelGGL(jacobi_kernel, grid, threads, 0, 0, d_u, d_unew, n);

        // Synchronize threads
        hipDeviceSynchronize();

        // Swap pointers
        std::swap(d_u, d_unew);
    }

    // Copy result from device to host
    hipMemcpy(u, d_u, n*n*n*sizeof(double), hipMemcpyDeviceToHost);

    // Free allocated memory on the device
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i + n * (j + n * k)] = 0.125 * (
            u[(i-1) + n * (j + n * k)] + u[(i+1) + n * (j + n * k)] +
            u[i + n * ((j-1) + n * k)] + u[i + n * ((j+1) + n * k)] +
            u[i + n * (j + n * (k-1))] + u[i + n * (j + n * (k+1))] + 
            u[i + n * (j + n * k)]
        );
    }
}

Code Block 5:
void jacobi_parallel(double* u, double* unew, int n, int niter, int threadsPerBlock) {
    double *d_u, *d_unew;

    int size = n * n * n * sizeof(double);
    hipMalloc((void**)&d_u, size);
    hipMalloc((void**)&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 threads(threadsPerBlock, threadsPerBlock, threadsPerBlock);
    dim3 blocks((n + threads.x - 1) / threads.x, (n + threads.y - 1) / threads.y, (n + threads.z - 1) / threads.z);

    for(int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL(jacobi_kernel, blocks, threads, 0, 0, d_u, d_unew, n);
        hipMemcpy(d_u, d_unew, size, hipMemcpyDeviceToDevice);
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__
void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n-1 && j >= 1 && j < n-1 && k >= 1 && k < n-1) {
        unew[i*n*n + j*n + k] = 0.125 * (
            u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] +
            u[i*n*n + (j-1)*n + k] + u[i*n*n + (j+1)*n + k] +
            u[i*n*n + j*n + (k-1)] + u[i*n*n + j*n + (k+1)] +
            u[i*n*n + j*n + k]
        );
    }
}

Code Block 6:
points
    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] + u[idx - n] +
                             u[idx + n] + u[idx - n * n] + u[idx + n * n] + u[idx]);
    }

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    // Calculate the indices of current thread
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    // Process only interior points
    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] + u[idx - n] +
                             u[idx + n] + u[idx - n * n] + u[idx + n * n] + u[idx]);
    }
}

Code Block 7:
void jacobi_parallel(double* u, double* unew, int n, int niter, dim3 threadsPerBlock, dim3 numBlocks) {
    double *d_u, *d_unew;

    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    for (int iter = 0; iter < niter; ++iter) {
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();
        
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[IDX(i, j, k, n)] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] +
                                         u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] +
                                         u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] +
                                         u[IDX(i, j, k, n)]);
    }
}

Code Block 8:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;

    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);  // Adjust based on hardware capabilities
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, 
                  (n + blockSize.y - 1) / blockSize.y, 
                  (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; ++iter) {
        hipLaunchKernelGGL(jacobi_kernel, gridSize, blockSize, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();

        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i + n * (j + n * k)] = 0.125 * (
            u[(i-1) + n * (j + n * k)] + u[(i+1) + n * (j + n * k)] +
            u[i + n * ((j-1) + n * k)] + u[i + n * ((j+1) + n * k)] +
            u[i + n * (j + n * (k-1))] + u[i + n * (j + n * (k+1))] +
            u[i + n * (j + n * k)]
        );
    }
}

Code Block 9:
void jacobi_parallel(double* u, double* unew, int n, int niter, int nthreads) {
    // Allocate device memory
    double *d_u, *d_unew;
    hipMalloc((void**)&d_u, n*n*n*sizeof(double));
    hipMalloc((void**)&d_unew, n*n*n*sizeof(double));

    // Copy host arrays to device
    hipMemcpy(d_u, u, n*n*n*sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, n*n*n*sizeof(double), hipMemcpyHostToDevice);
    
    dim3 threadsPerBlock(8, 8, 8); // define threads per block
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y, 
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();
        
        // Swap d_u and d_unew pointers (no need to copy back and forth each iteration)
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy result back to host
    hipMemcpy(u, d_u, n*n*n*sizeof(double), hipMemcpyDeviceToHost);
    
    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__
void jacobi_kernel(double* u, double* unew, int n) {
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    
    if (i < n - 1 && j < n - 1 && k < n - 1) {
        unew[IDX(i, j, k, n)] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] + 
                                         u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] + 
                                         u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] + 
                                         u[IDX(i, j, k, n)]);
    }
}

Code Block 10:
extern "C" void jacobi_parallel_hip(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; ++iter) {
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        hipLaunchKernelGGL(copy_kernel, (n * n * n + 255) / 256, 256, 0, 0, d_u, d_unew, n);
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        unew[i * n * n + j * n + k] = 0.125 * (
            u[(i - 1) * n * n + j * n + k] +
            u[(i + 1) * n * n + j * n + k] +
            u[i * n * n + (j - 1) * n + k] +
            u[i * n * n + (j + 1) * n + k] +
            u[i * n * n + j * n + (k - 1)] +
            u[i * n * n + j * n + (k + 1)] +
            u[i * n * n + j * n + k]
        );
    }
}

