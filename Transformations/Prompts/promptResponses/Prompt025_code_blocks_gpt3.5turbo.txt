Code Block 1:
extern "C" void gemm_parallel(int m, int n, int k, float alpha, float *a, int lda, float *b, int ldb, float beta, float *c, int ldc) {
    int blockSize = 32;
    dim3 threadsPerBlock(blockSize, blockSize);
    dim3 numBlocks((n + blockSize - 1) / blockSize, (m + blockSize - 1) / blockSize);

    // Allocate memory on device
    float *d_a, *d_b, *d_c;
    hipMalloc(&d_a, sizeof(float) * lda * k);
    hipMalloc(&d_b, sizeof(float) * ldb * n);
    hipMalloc(&d_c, sizeof(float) * ldc * n);

    // Copy data to device
    hipMemcpy(d_a, a, sizeof(float) * lda * k, hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, sizeof(float) * ldb * n, hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, sizeof(float) * ldc * n, hipMemcpyHostToDevice);

    // Launch kernel
    gemm_kernel<<<numBlocks, threadsPerBlock>>>(m, n, k, alpha, beta, d_a, lda, d_b, ldb, d_c, ldc);

    // Copy result back to host
    hipMemcpy(c, d_c, sizeof(float) * ldc * n, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, float alpha, float beta, float *a, int lda, float *b, int ldb, float *c, int ldc) {
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    float temp = 0.0;

    if (i < m && j < n) {
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 2:
extern "C" void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    dim3 grid((m + 15) / 16, (n + 15) / 16);
    dim3 block(16, 16);

    hipLaunchKernelGGL(gemm_kernel, grid, block, 0, 0, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;

        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }

        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 3:
void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    double* d_a, d_b, d_c;
    hipMalloc(&d_a, sizeof(double) * lda * k);
    hipMalloc(&d_b, sizeof(double) * ldb * n);
    hipMalloc(&d_c, sizeof(double) * ldc * n);

    hipMemcpy(d_a, a, sizeof(double) * lda * k, hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, sizeof(double) * ldb * n, hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, sizeof(double) * ldc * n, hipMemcpyHostToDevice);

    dim3 block_size(16, 16);
    dim3 grid_size((m + block_size.x - 1) / block_size.x, (n + block_size.y - 1) / block_size.y);

    gemm_kernel<<<grid_size, block_size>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    hipMemcpy(c, d_c, sizeof(double) * ldc * n, hipMemcpyDeviceToHost);

    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 4:
void gemm_parallel_hip(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    dim3 blockSize(16, 16);
    dim3 gridSize((m + 15) / 16, (n + 15) / 16);

    hipLaunchKernelGGL(gemm_parallel, gridSize, blockSize, 0, 0, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);
}

__global__ void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 5:
__global__ void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc){
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    
    if(i < m && j < n){
        double temp = 0.0;
        for(int l = 0; l < k; l++){
            temp += a[i*lda + l] * b[l*ldb + j];
        }
        c[i*ldc + j] = alpha * temp + beta * c[i*ldc + j];
    }
}

Code Block 6:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    dim3 block_size(16, 16);
    dim3 grid_size((m + block_size.x - 1) / block_size.x, (n + block_size.y - 1) / block_size.y);
    
    double *d_a, *d_b, *d_c;
    hipMalloc(&d_a, m * k * sizeof(double));
    hipMalloc(&d_b, k * n * sizeof(double));
    hipMalloc(&d_c, m * n * sizeof(double));
    
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);
    
    gemm_kernel<<<grid_size, block_size>>>(m, n, k, alpha, beta, d_a, lda, d_b, ldb, d_c, ldc);
    
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);
    
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double beta, double *a, int lda, double *b, int ldb, double *c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    
    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 7:
extern "C" void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    dim3 block_size(16, 16);
    dim3 grid_size((m + block_size.x - 1) / block_size.x, (n + block_size.y - 1) / block_size.y);

    hipLaunchKernelGGL(gemm_kernel, grid_size, block_size, 0, 0, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 8:
extern "C" void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    dim3 blockSize(16, 16);
    dim3 gridSize((m + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y);

    hipLaunchKernelGGL(gemm_parallel, gridSize, blockSize, 0, 0, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);

    hipDeviceSynchronize();
}

__global__ void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 9:
void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    dim3 blockSize(16, 16);
    dim3 gridSize((m + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y);
    
    hipLaunchKernelGGL(gemm_kernel, gridSize, blockSize, 0, 0, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    
    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 10:
void gemm_parallel(int m, int n, int k, float alpha, float *a, int lda, float *b, int ldb, float beta, float *c, int ldc) {
    float *d_a, *d_b, *d_c;
    
    hipMalloc(&d_a, m * k * sizeof(float));
    hipMalloc(&d_b, k * n * sizeof(float));
    hipMalloc(&d_c, m * n * sizeof(float));
    
    hipMemcpy(d_a, a, m * k * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(float), hipMemcpyHostToDevice);
    
    dim3 block(16, 16);
    dim3 grid((m + block.x - 1) / block.x, (n + block.y - 1) / block.y);
    
    gemm_kernel<<<grid, block>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);
    
    hipMemcpy(c, d_c, m * n * sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, float alpha, float *a, int lda, float *b, int ldb, float beta, float *c, int ldc) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    int j = blockDim.y * blockIdx.y + threadIdx.y;
    
    if (i < m && j < n) {
        float temp = 0.0f;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

