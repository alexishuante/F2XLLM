Code Block 1:
void gemv_parallel(int n, float *A, float *x, float *y) {
  hipLaunchKernel(gemv_kernel, dim3(1), dim3(n), 0, 0, n, A, x, y);
}

Code Block 2:
void gemv_parallel(int n, float *A, float *x, float *y) {
  hipLaunchKernel(gemv_kernel, dim3(1), dim3(n), 0, 0, n, A, x, y);
}

Code Block 3:
void gemv_parallel(int n, float *A, float *x, float *y) {
  hipLaunchKernel(GEMVKernel, dim3(1), dim3(n), 0, 0, n, A, x, y);
}

Code Block 4:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;
  hipLaunchKernel(gemv_kernel, dim3(n), dim3(1), 0, 0, n, A, x, y);
}

Code Block 5:
void gemv_parallel(int n, float *A, float *x, float *y) {
  hipLaunchKernel(GEMVKernel, dim3(1), dim3(n), 0, 0, n, A, x, y);
}

Code Block 6:
void gemv_parallel(int n, float *A, float *x, float *y) {
  hipLaunchKernel(GEMVKernel, dim3(1), dim3(n), 0, 0, n, A, x, y);
}

Code Block 7:
void gemv_parallel(int n, float *A, float *x, float *y) {
  hipLaunchKernel(GEMVKernel, dim3(1), dim3(n), 0, 0, n, A, x, y);
}

Code Block 8:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;
  hipLaunchKernel(GEMVKernel, dim3(1), dim3(n), 0, 0, n, A, x, y);
}

Code Block 9:
void gemv_parallel(int n, float *A, float *x, float *y) {
  hipLaunchKernel(gemv_kernel, dim3(1), dim3(n), 0, 0, n, A, x, y);
}

Code Block 10:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;
  hipLaunchKernel(gemv_kernel, dim3(n), dim3(1), 0, 0, n, A, x, y);
}

