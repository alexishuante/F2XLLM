Code Block 1:
void saxpy_parallel(int n, float a, float *x, float *y) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;
  
  saxpy_kernel<<<numBlocks, blockSize>>>(n, a, x, y);
  
  cudaDeviceSynchronize();
}

Code Block 2:
void saxpy_parallel(int n, float a, float *x, float *y) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;
  
  saxpy_kernel<<<numBlocks, blockSize>>>(n, a, x, y);
}

Code Block 3:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
        y[idx] = a * x[idx] + y[idx];
    }

Code Block 4:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    saxpy_kernel<<<numBlocks, blockSize>>>(n, a, x, y);
    
    cudaError_t error = cudaGetLastError();
    if (error != cudaSuccess) {
        printf("Error: %s\n", cudaGetErrorString(error));
        exit(EXIT_FAILURE);
    }

Code Block 5:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    saxpy_kernel<<<numBlocks, blockSize>>>(n, a, x, y);
}

Code Block 6:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
        y[idx] = a * x[idx] + y[idx];
    }

Code Block 7:
void saxpy_parallel(int n, float a, float *x, float *y) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;
  
  // kernel function
  __global__ void saxpy_kernel(int n, float a, float *x, float *y) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
      y[idx] = a * x[idx] + y[idx];
    }

Code Block 8:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    // Declare and allocate device variables
    float *d_x, *d_y;
    cudaMalloc((void **)&d_x, n * sizeof(float));
    cudaMalloc((void **)&d_y, n * sizeof(float));
    
    // Copy host variables to device
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_y, y, n * sizeof(float), cudaMemcpyHostToDevice);
    
    // Launch kernel
    saxpy_kernel<<<numBlocks, blockSize>>>(n, a, d_x, d_y);
    
    // Copy result back to host
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);
    
    // Free device memory
    cudaFree(d_x);
    cudaFree(d_y);
}

Code Block 9:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    saxpy_kernel<<<numBlocks, blockSize>>>(n, a, x, y);
}

Code Block 10:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    saxpy_kernel<<<numBlocks, blockSize>>>(n, a, x, y);
    
    cudaError_t err = cudaGetLastError();
    if (err != cudaSuccess) {
        printf("Error: %s\n", cudaGetErrorString(err));
    }

