Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 1; iter <= niter; iter++) {
    #pragma hip parallel for collapse(3) private(i, j, k)
    for (k = 2; k < n - 1; k++) {
      for (j = 2; j < n - 1; j++) {
        for (i = 2; i < n - 1; i++) {
          unew[i + j * n + k * n * n] = 0.125 * (
            u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
            u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] +
            u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] +
            u[i + j * n + k * n * n]);
        }

Code Block 2:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  int i, j, k, iter;

  for (iter = 0; iter < niter; iter++) {
    #pragma hip parallel for collapse(3) private(i, j, k)
    #pragma acc parallel loop collapse(3) private(i, j, k)
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
              u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
              u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
              u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
        }

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  for (int iter = 1; iter <= niter; iter++) {
    hipLaunchKernelGGL(HIP_KERNEL_NAME(jacobi_kernel), dim3(n-2), dim3(1), 0, 0, u, unew, n);
    hipDeviceSynchronize();
    std::swap(u, unew);
  }

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 1; iter <= niter; iter++) {
    hipLaunchKernelGGL(jacobi_kernel, dim3(n-2, n-2, n-2), dim3(1, 1, 1), 0, 0,
                       u, unew, n);
    hipDeviceSynchronize();
    double *tmp = u;
    u = unew;
    unew = tmp;
  }

Code Block 5:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 1; iter <= niter; iter++) {
    hipLaunchKernelGGL(jacobi_kernel, dim3(n - 2, n - 2, n - 2), dim3(1, 1, 1), 0, 0, u, unew, n);
    hipDeviceSynchronize();
    float *tmp = u;
    u = unew;
    unew = tmp;
  }

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  for (int iter = 1; iter <= niter; iter++) {
    hipLaunchKernelGGL(HIP_KERNEL_NAME(jacobi_kernel), dim3(n - 2, n - 2, n - 2), dim3(1, 1, 1), 0, 0,
      u, unew, n);
    hipDeviceSynchronize();
    double *tmp = u;
    u = unew;
    unew = tmp;
  }

Code Block 7:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  int iter, i, j, k;
  for (iter = 1; iter <= niter; iter++) {
    hipLaunchKernelGGL(HIP_KERNEL_NAME(jacobi_kernel), dim3(n-2, n-2, n-2), dim3(1, 1, 1), 0, 0,
      u, unew, n);
    float *tmp = u;
    u = unew;
    unew = tmp;
  }

Code Block 8:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 1; iter <= niter; iter++) {
    hipLaunchKernelGGL(jacobi_kernel, dim3(n-2, n-2, n-2), dim3(1, 1, 1), 0, 0,
                       u, unew, n);
    float *tmp = u;
    u = unew;
    unew = tmp;
  }

Code Block 9:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  for (int iter = 1; iter <= niter; iter++) {
    hipLaunchKernelGGL(HIP_KERNEL_NAME(jacobi_kernel), dim3(n - 2, n - 2, n - 2), dim3(1, 1, 1), 0, 0,
      u, unew, n);
    hipDeviceSynchronize();
    float *tmp = u;
    u = unew;
    unew = tmp;
  }

Code Block 10:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  int iter, i, j, k;
  for (iter = 1; iter <= niter; iter++) {
    hipLaunchKernelGGL((jacobi_kernel), dim3(n - 2, n - 2, n - 2), dim3(1, 1, 1), 0, 0,
      u, unew, n);
    float *tmp = u;
    u = unew;
    unew = tmp;
  }

