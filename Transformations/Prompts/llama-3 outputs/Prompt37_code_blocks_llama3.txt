Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int blockSize = 256;
  int numBlocks = (n * n * n + blockSize - 1) / blockSize;
  
  dim3 threadsPerBlock(blockSize);
  dim3 numBlocks_(numBlocks);
  
  jacobi_kernel<<<numBlocks_, threadsPerBlock>>>(u, unew, n, niter);
  
  cudaDeviceSynchronize();
}

Code Block 2:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int blockSize = 256;
  int numBlocks = (n * n * n + blockSize - 1) / blockSize;
  
  dim3 threadsPerBlock(blockSize, 1, 1);
  dim3 numBlocks_(numBlocks, 1, 1);
  
  jacobi_kernel<<<numBlocks_, threadsPerBlock>>>(u, unew, n, niter);
  
  cudaDeviceSynchronize();
}

Code Block 3:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  int numBlocks = (n + blockSize - 1) / blockSize;
  dim3 blockSize(16, 16, 16); // adjust this to your needs

  jacobi_kernel<<<numBlocks, blockSize>>>(u, unew, n, niter);

  cudaDeviceSynchronize();
}

Code Block 4:
void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * BLOCK_SIZE + threadIdx.x + 1;
  int j = blockIdx.y * BLOCK_SIZE + threadIdx.y + 1;
  int k = blockIdx.z * BLOCK_SIZE + threadIdx.z + 1;

  if (i < n - 1 && j < n - 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
                                            u[(i + 1) * n * n + j * n + k] +
                                            u[i * n * n + (j - 1) * n + k] +
                                            u[i * n * n + (j + 1) * n + k] +
                                            u[i * n * n + j * n + (k - 1)] +
                                            u[i * n * n + j * n + (k + 1)] +
                                            u[i * n * n + j * n + k]);
  }

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int blockSize = 256;
  int numBlocks = (n * n * n + blockSize - 1) / blockSize;
  
  dim3 threads(blockSize);
  dim3 blocks(numBlocks);
  
  cudaStream_t stream[nthreads];
  for (int i = 0; i < nthreads; i++) {
    cudaStreamCreate(&stream[i]);
  }

Code Block 6:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int numBlocks = (n + BLOCK_SIZE - 1) / BLOCK_SIZE;
  dim3 blockSize(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
  dim3 gridSize(numBlocks, numBlocks, numBlocks);

  // Kernel for Jacobi iteration
  __global__ void jacobi_kernel(float *u, float *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
      unew[i * n * n + j * n + k] = 0.125f * (
        u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
        u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
        u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
        u[i * n * n + j * n + k]
      );
    }

Code Block 7:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int numBlocks = (n + BLOCK_SIZE - 1) / BLOCK_SIZE;
  dim3 blockSize(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
  dim3 gridSize(numBlocks, numBlocks, numBlocks);

  float *d_u, *d_unew;
  cudaMalloc((void **)&d_u, n * n * n * sizeof(float));
  cudaMalloc((void **)&d_unew, n * n * n * sizeof(float));

  cudaMemcpy(d_u, u, n * n * n * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_unew, unew, n * n * n * sizeof(float), cudaMemcpyHostToDevice);

  jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n, niter);

  cudaMemcpy(u, d_u, n * n * n * sizeof(float), cudaMemcpyDeviceToHost);
  cudaMemcpy(unew, d_unew, n * n * n * sizeof(float), cudaMemcpyDeviceToHost);

  cudaFree(d_u);
  cudaFree(d_unew);
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int blockSize = 256;
  int numBlocks = (n * n * n + blockSize - 1) / blockSize;

  jacobi_kernel<<<numBlocks, blockSize>>>(u, unew, n, niter);

  cudaDeviceSynchronize();
}

Code Block 9:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;
  
  jacobi_kernel<<<numBlocks, blockSize>>>(u, unew, n, niter);
  
  cudaDeviceSynchronize();
}

Code Block 10:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int numBlocks = (n + BLOCK_SIZE - 1) / BLOCK_SIZE;
  dim3 blockSize(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
  dim3 gridSize(numBlocks, numBlocks, numBlocks);

  jacobi_kernel<<<gridSize, blockSize>>>(u, unew, n, niter);

  cudaDeviceSynchronize();
}

