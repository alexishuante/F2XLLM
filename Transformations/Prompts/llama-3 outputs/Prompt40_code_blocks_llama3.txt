Code Block 1:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();
}

Code Block 2:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  // Kernel function
  __global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
      float sum = 0.0;
      for (int j = row[idx]; j < row[idx+1]; j++) {
        sum += val[j] * x[col[j]];
      }

Code Block 3:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();
}

Code Block 4:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;
  
  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);
  
  cudaError_t err = cudaGetLastError();
  if (err != cudaSuccess) {
    printf("Error: %s\n", cudaGetErrorString(err));
  }

Code Block 5:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  float temp;

  cudaMallocManaged(&y, n * sizeof(float));

  cudaLaunchKernel((void *)spmv_kernel, dim3(n), dim3(1), 0, 0, 
                   n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();

  cudaFree(y);
}

Code Block 6:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;
  
  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);
  
  cudaError_t err = cudaGetLastError();
  if (err != cudaSuccess) {
    printf("Error: %s\n", cudaGetErrorString(err));
  }

Code Block 7:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();
}

Code Block 8:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;
  
  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);
}

Code Block 9:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();
}

Code Block 10:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();
}

