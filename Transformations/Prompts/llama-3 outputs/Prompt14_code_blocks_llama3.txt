Code Block 1:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;
    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        sum = 0.0;
        #pragma acc loop reduction(+:sum)
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }

Code Block 2:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;
    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        sum = 0.0f;
        #pragma acc loop seq
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }

Code Block 3:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;

  #pragma acc parallel loop
  for (i = 0; i < n; i++) {
    sum = 0.0;
    #pragma acc loop
    for (j = 0; j < n; j++) {
      sum += A[i * n + j] * x[j];
    }

Code Block 4:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;
    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        sum = 0.0f;
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }

Code Block 5:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;

    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        sum = 0.0f;
        #pragma acc loop reduction(+:sum)
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }

Code Block 6:
void gemv_parallel(int n, float *A, float *x, float *y) {
  #pragma acc parallel loop
  for (int i = 0; i < n; i++) {
    float sum = 0.0;
    #pragma acc loop reduction(+:sum)
    for (int j = 0; j < n; j++) {
      sum += A[i * n + j] * x[j];
    }

Code Block 7:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;
    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        sum = 0.0f;
        #pragma acc loop
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }

Code Block 8:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;
    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        sum = 0.0;
        #pragma acc loop
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }

Code Block 9:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;

    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        sum = 0.0;
        #pragma acc loop
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }

Code Block 10:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;
    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        sum = 0.0;
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }

