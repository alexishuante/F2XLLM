Code Block 1:
void saxpy(int n, float a, float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  if (idx < n) {
    y[idx] = a * x[idx] + y[idx];
  }

Code Block 2:
void saxpy(int n, float a, float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  if (idx < n) {
    y[idx] = a * x[idx] + y[idx];
  }

Code Block 3:
void saxpy(int n, float a, float *x, float *y) {
  int i;
  float *x_d, *y_d;

  // Allocate memory on the device
  cudaMalloc((void **)&x_d, n * sizeof(float));
  cudaMalloc((void **)&y_d, n * sizeof(float));

  // Copy data from host to device
  cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(y_d, y, n * sizeof(float), cudaMemcpyHostToDevice);

  // Launch the kernel
  saxpy_kernel<<<(n + 255) / 256, 256>>>(n, a, x_d, y_d);

  // Copy result back to host
  cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);

  // Free device memory
  cudaFree(x_d);
  cudaFree(y_d);
}

Code Block 4:
void saxpy(int n, float a, float *x, float *y) {
  int i;
  float *dx, *dy;

  // Allocate memory on the GPU
  cudaMalloc((void **)&dx, n * sizeof(float));
  cudaMalloc((void **)&dy, n * sizeof(float));

  // Copy data from host to device
  cudaMemcpy(dx, x, n * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(dy, y, n * sizeof(float), cudaMemcpyHostToDevice);

  // Launch kernel
  saxpy_kernel<<<(n + 255) / 256, 256>>>(n, a, dx, dy);

  // Copy result back to host
  cudaMemcpy(y, dy, n * sizeof(float), cudaMemcpyDeviceToHost);

  // Free memory on the GPU
  cudaFree(dx);
  cudaFree(dy);
}

Code Block 5:
void saxpy(int n, float a, float *x, float *y) {
  int i;
  float *x_d, *y_d;

  // Allocate memory on the GPU
  cudaMalloc((void **)&x_d, n * sizeof(float));
  cudaMalloc((void **)&y_d, n * sizeof(float));

  // Copy data from host to device
  cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(y_d, y, n * sizeof(float), cudaMemcpyHostToDevice);

  // Launch the kernel
  saxpy_kernel<<<(n + 255) / 256, 256>>>(n, a, x_d, y_d);

  // Copy result back to host
  cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);

  // Free memory on the GPU
  cudaFree(x_d);
  cudaFree(y_d);
}

Code Block 6:
void saxpy_kernel(int n, float a, float* x, float* y) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
        y[idx] = a * x[idx] + y[idx];
    }

Code Block 7:
void saxpy(int n, float a, float *x, float *y) {
  int i;
  float *x_d, *y_d;

  // Allocate memory on the device
  cudaMalloc((void **)&x_d, n * sizeof(float));
  cudaMalloc((void **)&y_d, n * sizeof(float));

  // Copy data from host to device
  cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(y_d, y, n * sizeof(float), cudaMemcpyHostToDevice);

  // Launch kernel
  saxpy_kernel<<<(n + 255) / 256, 256>>>(n, a, x_d, y_d);

  // Copy result back to host
  cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);

  // Free device memory
  cudaFree(x_d);
  cudaFree(y_d);
}

Code Block 8:
void saxpy_kernel(int n, float a, float* x, float* y) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
        y[idx] = a * x[idx] + y[idx];
    }

Code Block 9:
void saxpy(int n, float a, float *x, float *y) {
  int i;
  float *x_d, *y_d;

  // Allocate device memory
  cudaMalloc((void **)&x_d, n * sizeof(float));
  cudaMalloc((void **)&y_d, n * sizeof(float));

  // Copy host memory to device
  cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(y_d, y, n * sizeof(float), cudaMemcpyHostToDevice);

  // Launch kernel
  saxpy_kernel<<<(n + 255) / 256, 256>>>(n, a, x_d, y_d);

  // Copy device memory back to host
  cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);

  // Free device memory
  cudaFree(x_d);
  cudaFree(y_d);
}

Code Block 10:
void saxpy(int n, float a, float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  if (idx < n) {
    y[idx] = a * x[idx] + y[idx];
  }

