Code Block 1:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    #pragma omp for schedule(static)
    for (iter = 1; iter <= niter; iter++) {
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            int idx = i + j * n + k * n * n;
            unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] + u[idx - n] +
                                  u[idx + n] + u[idx - n * n] + u[idx + n * n] + u[idx]);
          }

Code Block 3:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i + j * n + k * n * n] = 0.125f * (
              u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
              u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] +
              u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] +
              u[i + j * n + k * n * n]);
          }

Code Block 4:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernel(GLOBAL_KERNEL, dim3(nthreads), dim3(1), 0, 0, 
    jacobi_kernel, u, unew, n, niter);
}

Code Block 5:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

Code Block 6:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

Code Block 7:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

Code Block 8:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0,
    u, unew, n, niter);
}

Code Block 9:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0,
    u, unew, n, niter);
}

Code Block 10:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    #pragma omp for schedule(static)
    for (iter = 1; iter <= niter; iter++) {
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i + j * n + k * n * n] = 0.125f * (
              u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
              u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] +
              u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] +
              u[i + j * n + k * n * n]
            );
          }

