Code Block 1:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    for (int iter = 0; iter < niter; ++iter) {
        #pragma omp parallel for collapse(3) private(i, j, k)
        for (int k = 1; k < n - 1; ++k) {
            for (int j = 1; j < n - 1; ++j) {
                for (int i = 1; i < n - 1; ++i) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                             u[i][j-1][k] + u[i][j+1][k] +
                                             u[i][j][k-1] + u[i][j][k+1] +
                                             u[i][j][k]);
                }
            }
        }

        // Copy unew to u
        #pragma omp parallel for collapse(3)
        for (int k = 0; k < n; ++k) {
            for (int j = 0; j < n; ++j) {
                for (int i = 0; i < n; ++i) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 2:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;
    
    // Define array boundaries
    #define IND(i, j, k) ((i) + (n) * ((j) + (n) * (k)))

    for (iter = 0; iter < niter; iter++) {
        #pragma omp parallel for collapse(3) private(i, j, k)
        for (k = 1; k < n-1; k++) {
            for (j = 1; j < n-1; j++) {
                for (i = 1; i < n-1; i++) {
                    unew[IND(i, j, k)] = 0.125 * (u[IND(i-1, j, k)] + u[IND(i+1, j, k)] 
                        + u[IND(i, j-1, k)] + u[IND(i, j+1, k)] 
                        + u[IND(i, j, k-1)] + u[IND(i, j, k+1)] 
                        + u[IND(i, j, k)]);
                }
            }
        }

        #pragma omp parallel for collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[IND(i, j, k)] = unew[IND(i, j, k)];
                }
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    for (int iter = 0; iter < niter; iter++) {
        #pragma omp parallel for collapse(3) private(i, j, k)
        for (int k = 1; k < n-1; k++) {
            for (int j = 1; j < n-1; j++) {
                for (int i = 1; i < n-1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                             u[i][j-1][k] + u[i][j+1][k] + 
                                             u[i][j][k-1] + u[i][j][k+1] + 
                                             u[i][j][k]);
                }
            }
        }

        #pragma omp parallel for collapse(3)
        for (int k = 0; k < n; k++) {
            for (int j = 0; j < n; j++) {
                for (int i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 4:
void jacobi_parallel(double*** u, double*** unew, int n, int niter) {
    for (int iter = 0; iter < niter; iter++) {
        #pragma omp parallel for collapse(3) private(i, j, k)
        for (int k = 1; k < n - 1; k++) {
            for (int j = 1; j < n - 1; j++) {
                for (int i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                             u[i][j-1][k] + u[i][j+1][k] + 
                                             u[i][j][k-1] + u[i][j][k+1] + 
                                             u[i][j][k]);
                }
            }
        }
        // Copy unew to u using nested loops to ensure deep copy
        #pragma omp parallel for collapse(3) private(i, j, k)
        for (int k = 0; k < n; k++) {
            for (int j = 0; j < n; j++) {
                for (int i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    // Assuming the double matrices u and unew are dynamically allocated
    // and n represents the edge size of the 3D matrix

    for (iter = 1; iter <= niter; iter++) {
        // Use OpenMP parallel for with collapse(3) to parallelize the nested loops
        #pragma omp parallel for collapse(3) private(i, j, k) shared(unew, u) 
        for (k = 1; k < n - 1; k++) {   // Fortran is 1-indexed, C/C++ is 0-indexed.
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] 
                                            + u[i][j-1][k] + u[i][j+1][k] 
                                            + u[i][j][k-1] + u[i][j][k+1] 
                                            + u[i][j][k]);
                }
            }
        }
        
        // Copy unew to u
        #pragma omp parallel for collapse(3) private(i, j, k) shared(unew, u)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 0; iter < niter; ++iter) {
        #pragma omp parallel for collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; ++k) {
            for (j = 1; j < n - 1; ++j) {
                for (i = 1; i < n - 1; ++i) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                             u[i][j-1][k] + u[i][j+1][k] + 
                                             u[i][j][k-1] + u[i][j][k+1] + 
                                             u[i][j][k]);
                }
            }
        }

        // Copy unew to u
        #pragma omp parallel for collapse(3) private(i, j, k)
        for (k = 0; k < n; ++k) {
            for (j = 0; j < n; ++j) {
                for (i = 0; i < n; ++i) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(double*** u, double*** unew, int n, int niter) {
    int iter, i, j, k;

    #pragma omp parallel private(iter, i, j, k) shared(u, unew)
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                                 u[i][j - 1][k] + u[i][j + 1][k] +
                                                 u[i][j][k - 1] + u[i][j][k + 1] +
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier

            #pragma omp for collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
            #pragma omp barrier
        }
    }
}

Code Block 8:
void jacobi_parallel(double*** u, double*** unew, int n, int niter) {
    #pragma omp parallel
    {
        int i, j, k, iter;
        for (iter = 1; iter <= niter; ++iter) {
            #pragma omp for collapse(3) private(i, j, k) schedule(static)
            for (k = 1; k < n-1; ++k) {
                for (j = 1; j < n-1; ++j) {
                    for (i = 1; i < n-1; ++i) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                                 u[i][j-1][k] + u[i][j+1][k] + 
                                                 u[i][j][k-1] + u[i][j][k+1] + 
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma omp single
            {
                // Copy unew to u
                for (i = 1; i < n-1; ++i) {
                    for (j = 1; j < n-1; ++j) {
                        for (k = 1; k < n-1; ++k) {
                            u[i][j][k] = unew[i][j][k];
                        }
                    }
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double*** u, double*** unew, int n, int niter) {
    int i, j, k, iter;
    
    // Loop over the number of iterations
    for (iter = 0; iter < niter; iter++) {
        // Parallelize using OpenMP with a collapse of 3 loops and private variables i, j, k
        #pragma omp parallel for collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                             u[i][j-1][k] + u[i][j+1][k] + 
                                             u[i][j][k-1] + u[i][j][k+1] + 
                                             u[i][j][k]);
                }
            }
        }

        // Update u array with new values from unew
        #pragma omp parallel for collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    // Iterate for the given number of iterations
    for (int iter = 0; iter < niter; ++iter) {
        // Parallel region with OpenMP
        #pragma omp parallel for collapse(3) private(i, j, k)
        for (int k = 1; k < n - 1; ++k) {
            for (int j = 1; j < n - 1; ++j) {
                for (int i = 1; i < n - 1; ++i) {
                    // Compute the new value at (i, j, k)
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k]
                                          + u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }

        // Copy the updated values back to the original array
        #pragma omp parallel for collapse(3)
        for (int k = 0; k < n; ++k) {
            for (int j = 0; j < n; ++j) {
                for (int i = 0; i < n; ++i) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

