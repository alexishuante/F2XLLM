Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 dimBlock(8, 8, 8);
    dim3 dimGrid((n-2)/dimBlock.x + 1, (n-2)/dimBlock.y + 1, (n-2)/dimBlock.z + 1);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<dimGrid, dimBlock>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__
void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int index = i + j*n + k*n*n;
        unew[index] = 0.125 * (u[index-n] + u[index+n] + u[index-n*n] + u[index+n*n] + u[index-n*n*n] + u[index+n*n*n] + u[index]);
    }
}

Code Block 2:
void jacobi_cuda(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    
    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks(ceil(n / 8), ceil(n / 8), ceil(n / 8));

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - 1] + u[idx + 1] + u[idx - n * n] + u[idx + n * n] + u[idx]);
    }
}

Code Block 3:
int clamp(int x, int a, int b) {
    return max(a, min(x, b));
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if(i < n - 1 && j < n - 1 && k < n - 1) {
        unew[i + j * n + k * n * n] = 0.125 * (u[(i - 1) + j * n + k * n * n] +
                                                u[(i + 1) + j * n + k * n * n] +
                                                u[i + (j - 1) * n + k * n * n] +
                                                u[i + (j + 1) * n + k * n * n] +
                                                u[i + j * n + (k - 1) * n * n] +
                                                u[i + j * n + (k + 1) * n * n] +
                                                u[i + j * n + k * n * n]);
    }
}

Code Block 4:
void jacobi_operation(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);
    
    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks(n/threadsPerBlock.x, n/threadsPerBlock.y, n/threadsPerBlock.z);

    for(int iter=0; iter<niter; iter++) {
        jacobi_parallel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if(i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        int idx = i + j * n + k * n * n;

        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - n * n] +
                            u[idx + n * n] + u[idx - 1] + u[idx + 1] + u[idx]);
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    // Allocate memory on device
    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_unew, size);

    // Copy data from host to device
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockDim(16, 16, 2); 
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x, (n + blockDim.y - 1) / blockDim.y, (n + blockDim.z - 1) / blockDim.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridDim, blockDim>>>(d_u, d_unew, n);

        // Copy data back from device to host
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    }

    // Free memory on device
    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i < n && j < n && k < n && i > 0 && j > 0 && k > 0 && i < n-1 && j < n-1 && k < n-1) {
        int index = i + j*n + k*n*n;
        unew[index] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                              u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[index]);
    }
}

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(16, 16,16);
    dim3 gridSize((n-2 + blockSize.x - 1) / blockSize.x, (n-2 + blockSize.y - 1) / blockSize.y, (n-2 + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; ++iter) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);

        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToDevice);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__
void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = i + j*n + k*n*n;
        unew[idx] = 0.125 * (u[idx-1] + u[idx+1] + u[idx-n] + u[idx+n] +
                             u[idx-n*n] + u[idx+n*n] + u[idx]);
    }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew) {
    double *d_u, *d_unew;

    cudaMalloc(&d_u, N*N*N*sizeof(double));
    cudaMalloc(&d_unew, N*N*N*sizeof(double));

    cudaMemcpy(d_u, u, N*N*N*sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, N*N*N*sizeof(double), cudaMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((N + blockSize.x - 1) / blockSize.x,
                  (N + blockSize.y - 1) / blockSize.y,
                  (N + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < NITER; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew);
        cudaDeviceSynchronize();
        cudaMemcpy(unew, d_unew, N*N*N*sizeof(double), cudaMemcpyDeviceToHost);
        std::swap(u, unew);
        cudaMemcpy(d_u, u, N*N*N*sizeof(double), cudaMemcpyHostToDevice);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < N - 1 && j > 0 && j < N - 1 && k > 0 && k < N - 1) {
        unew[k*(N*N) + j*N + i] = 0.125 * (u[k*(N*N) + j*N + (i-1)] + u[k*(N*N) + j*N + (i+1)] +
                                           u[k*(N*N) + (j-1)*N + i] + u[k*(N*N) + (j+1)*N + i] +
                                           u[(k-1)*(N*N) + j*N + i] + u[(k+1)*(N*N) + j*N + i] +
                                           u[k*(N*N) + j*N + i]);
    }
}

Code Block 8:
void jacobi_cuda(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 dimGrid((n + BLOCK_SIZE - 1) / BLOCK_SIZE, (n + BLOCK_SIZE - 1) / BLOCK_SIZE, n);
    dim3 dimBlock(BLOCK_SIZE, BLOCK_SIZE);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel<<<dimGrid, dimBlock>>>(d_u, d_unew, n);
        cudaDeviceSynchronize();

        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z;

    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        int id = i + j * n + k * n * n;
        unew[id] = 0.125 * (u[id - n] + u[id + n] + u[id - 1] + u[id + 1] + u[id - n * n] + u[id + n * n] + u[id]);
    }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n - 2 + blockSize.x - 1) / blockSize.x,
                  (n - 2 + blockSize.y - 1) / blockSize.y,
                  (n - 2 + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);

        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    cudaMemcpy(unew, d_u, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int idx = (k * n * n) + (j * n) + i;
        unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] + u[idx - n] +
                             u[idx + n] + u[idx - n * n] + u[idx + n * n] +
                             u[idx]);
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter)
{
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);
    
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++)
    {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;
    
    if (i < n - 1 && j < n - 1 && k < n - 1)
    {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - 1] +
                             u[idx + 1] + u[idx - n * n] + u[idx + n * n] + u[idx]);
    }
}

