Code Block 1:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;

  hipLaunchKernel(gemv_kernel, dim3(n), dim3(1), 0, 0, n, A, x, y);

}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0;
    for (int j = 0; j < n; j++) {
      sum += A[i * n + j] * x[j];
    }
    y[i] = sum;
  }
}

Code Block 2:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;

  hipLaunchKernel(GEMVKernel, dim3(1), dim3(n), 0, 0, n, A, x, y);

  // GEMVKernel is a __global__ function (executed on the GPU)
  // that performs the actual matrix-vector multiplication
}

__global__ void GEMVKernel(int n, float *A, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0;
    for (int j = 0; j < n; j++) {
      sum += A[i * n + j] * x[j];
    }
    y[i] = sum;
  }
}

Code Block 3:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;

  hipLaunchKernel(GEMVKernel, dim3(1), dim3(n), 0, 0, n, A, x, y);

}

__global__ void GEMVKernel(int n, float *A, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0;
    for (int j = 0; j < n; j++) {
      sum += A[i * n + j] * x[j];
    }
    y[i] = sum;
  }
}

Code Block 4:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;
  hipLaunchKernel(GEMVKernel, dim3(n), dim3(1), 0, 0, n, A, x, y);
}

__global__ void GEMVKernel(int n, float *A, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0;
    for (int j = 0; j < n; j++) {
      sum += A[i * n + j] * x[j];
    }
    y[i] = sum;
  }
}

Code Block 5:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;

  hipLaunchKernel(GEMVKernel, dim3(n), dim3(256), 0, 0, n, A, x, y);

}

__global__ void GEMVKernel(int n, float *A, float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  if (idx < n) {
    float sum = 0.0;
    for (int j = 0; j < n; j++) {
      sum += A[idx * n + j] * x[j];
    }
    y[idx] = sum;
  }
}

Code Block 6:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;

  hipLaunchKernel(GEMVKernel, dim3(n), dim3(1), 0, 0, n, A, x, y);

  // GEMVKernel is a __global__ function (kernel) that is executed on the GPU
  // it is launched with 'n' blocks, each containing 1 thread
}

__global__ void GEMVKernel(int n, float *A, float *x, float *y) {
  int i = blockIdx.x; // each block is responsible for one row of the matrix
  float sum = 0.0;

  for (int j = 0; j < n; j++) {
    sum += A[i * n + j] * x[j];
  }

  y[i] = sum;
}

Code Block 7:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;

  hipLaunchKernel(gemv_kernel, dim3(1, 1, 1), dim3(n, 1, 1), 0, 0, n, A, x, y);

}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0;
    for (int j = 0; j < n; j++) {
      sum += A[i * n + j] * x[j];
    }
    y[i] = sum;
  }
}

Code Block 8:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;

  hipLaunchKernel(GEMVKernel, dim3(n), dim3(256), 0, 0, n, A, x, y);

}

__global__ void GEMVKernel(int n, float *A, float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  if (idx < n) {
    float sum = 0.0;
    for (int j = 0; j < n; j++) {
      sum += A[idx * n + j] * x[j];
    }
    y[idx] = sum;
  }
}

Code Block 9:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;

  hipLaunchKernel(GEMVKernel, dim3(1), dim3(n), 0, 0, n, A, x, y);

}

__global__ void GEMVKernel(int n, float *A, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0;
    for (int j = 0; j < n; j++) {
      sum += A[i * n + j] * x[j];
    }
    y[i] = sum;
  }
}

Code Block 10:
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;

  hipLaunchKernel(GEMVKernel, dim3(1), dim3(n), 0, 0, n, A, x, y);

}

__global__ void GEMVKernel(int n, float *A, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0f;
    for (int j = 0; j < n; j++) {
      sum += A[i * n + j] * x[j];
    }
    y[i] = sum;
  }
}

