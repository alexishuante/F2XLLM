Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i,j,k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j * n + k * n * n] = 0.125 * (
                        u[(i-1) + j * n + k * n * n] + 
                        u[(i+1) + j * n + k * n * n] + 
                        u[i + (j-1) * n + k * n * n] + 
                        u[i + (j+1) * n + k * n * n] + 
                        u[i + j * n + (k-1) * n * n] + 
                        u[i + j * n + (k+1) * n * n] + 
                        u[i + j * n + k * n * n]
                    );
                }
            }
        }
        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
                }
            }
        }
    }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    for (iter = 1; iter <= niter; ++iter) {
        // Parallelize the loop with OpenACC
        #pragma acc parallel loop collapse(3) private(i, j, k) present(u[0:n*n*n], unew[0:n*n*n])
        for (k = 1; k < n - 1; ++k) {
            for (j = 1; j < n - 1; ++j) {
                for (i = 1; i < n - 1; ++i) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] +
                                                     u[(i+1) + j*n + k*n*n] +
                                                     u[i + (j-1)*n + k*n*n] +
                                                     u[i + (j+1)*n + k*n*n] +
                                                     u[i + j*n + (k-1)*n*n] +
                                                     u[i + j*n + (k+1)*n*n] +
                                                     u[i + j*n + k*n*n]);
                }
            }
        }

        // Update the matrix u with values from unew
        #pragma acc parallel loop collapse(3) present(u[0:n*n*n], unew[0:n*n*n])
        for (k = 0; k < n; ++k) {
            for (j = 0; j < n; ++j) {
                for (i = 0; i < n; ++i) {
                    u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                }
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 0; iter < niter; iter++) {
        // Applying OpenACC pragma directives for parallelization
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                              u[i][j-1][k] + u[i][j+1][k] + 
                                              u[i][j][k-1] + u[i][j][k+1] + 
                                              u[i][j][k]);
                }
            }
        }

        // Copying unew back to u
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 4:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n-1; k++) {
            for (j = 1; j < n-1; j++) {
                for (i = 1; i < n-1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }

        // Copy unew to u
        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int iter, i, j, k;
    
    for (iter = 0; iter < niter; ++iter) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; ++k) {
            for (j = 1; j < n - 1; ++j) {
                for (i = 1; i < n - 1; ++i) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                             u[i][j-1][k] + u[i][j+1][k] +
                                             u[i][j][k-1] + u[i][j][k+1] +
                                             u[i][j][k]);
                }
            }
        }
        #pragma acc update device(u)

        // Swap pointers for the next iteration
        double ***temp = u;
        u = unew;
        unew = temp;
    }
}

Code Block 6:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;
    
    // Iterate over the specified number of iterations
    for (iter = 1; iter <= niter; iter++) {
        // Parallelize the loops with OpenACC, collapsing the three loops into one for parallel execution
        #pragma acc parallel loop collapse(3) private(i,j,k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    // Perform Jacobi update
                    unew[i + n * (j + n * k)] = 0.125 * (
                        u[(i-1) + n * (j + n * k)] +
                        u[(i+1) + n * (j + n * k)] +
                        u[i + n * ((j-1) + n * k)] +
                        u[i + n * ((j+1) + n * k)] +
                        u[i + n * (j + n * (k-1))] +
                        u[i + n * (j + n * (k+1))] +
                        u[i + n * (j + n * k)]
                    );
                }
            }
        }

        // Copy unew to u
        #pragma acc parallel loop collapse(3) private(i,j,k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i + n * (j + n * k)] = unew[i + n * (j + n * k)];
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    const int size = n * n * n;
    
    for (int iter = 0; iter < niter; ++iter) {
        // Using OpenACC to parallelize the loop
        #pragma acc parallel loop collapse(3) private(i, j, k) 
        for (int k = 1; k < n - 1; ++k) {
            for (int j = 1; j < n - 1; ++j) {
                for (int i = 1; i < n - 1; ++i) {
                    int idx = k * n * n + j * n + i;
                    int idx_im1 = k * n * n + j * n + (i - 1);
                    int idx_ip1 = k * n * n + j * n + (i + 1);
                    int idx_jm1 = k * n * n + (j - 1) * n + i;
                    int idx_jp1 = k * n * n + (j + 1) * n + i;
                    int idx_km1 = (k - 1) * n * n + j * n + i;
                    int idx_kp1 = (k + 1) * n * n + j * n + i;

                    unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] + u[idx_jm1] +
                                         u[idx_jp1] + u[idx_km1] + u[idx_kp1] + u[idx]);
                }
            }
        }
        #pragma acc end parallel loop
        
        // Copy unew to u
        #pragma acc parallel loop
        for (int idx = 0; idx < size; ++idx) {
            u[idx] = unew[idx];
        }
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + n * (j + n * k)] = 0.125 * (
                        u[(i-1) + n * (j + n * k)] + u[(i+1) + n * (j + n * k)] +
                        u[i + n * ((j-1) + n * k)] + u[i + n * ((j+1) + n * k)] +
                        u[i + n * (j + n * (k-1))] + u[i + n * (j + n * (k+1))] +
                        u[i + n * (j + n * k)]
                    );
                }
            }
        }
        #pragma acc parallel loop collapse(3)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    u[i + n * (j + n * k)] = unew[i + n * (j + n * k)];
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, size_t n, int niter) {
    size_t i, j, k, iter;
    #pragma acc data copyin(u[0:n*n*n]) copyout(unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i*n*n + j*n + k] = 0.125 * (
                            u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] +
                            u[i*n*n + (j-1)*n + k] + u[i*n*n + (j+1)*n + k] +
                            u[i*n*n + j*n + (k-1)] + u[i*n*n + j*n + (k+1)] +
                            u[i*n*n + j*n + k]
                        );
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i*n*n + j*n + k] = unew[i*n*n + j*n + k];
                    }
                }
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; ++iter) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; ++k) {
            for (j = 1; j < n - 1; ++j) {
                for (i = 1; i < n - 1; ++i) {
                    unew[i][j][k] = 0.125 * (
                        u[i-1][j][k] + u[i+1][j][k] +
                        u[i][j-1][k] + u[i][j+1][k] +
                        u[i][j][k-1] + u[i][j][k+1] +
                        u[i][j][k]);
                }
            }
        }

        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; ++k) {
            for (j = 0; j < n; ++j) {
                for (i = 0; i < n; ++i) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

