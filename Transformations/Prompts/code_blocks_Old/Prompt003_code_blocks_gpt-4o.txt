Code Block 1:
void gemv_parallel(int n, const float *A, const float *x, float *y) {
    int i, j;
    #pragma omp parallel for private(j)
    for (i = 0; i < n; ++i) {
        float sum = 0.0f;
        for (j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 2:
void gemv_parallel(int n, const std::vector<std::vector<float>>& A, const std::vector<float>& x, std::vector<float>& y) {
    // Ensure the output vector y has the correct size.
    y.resize(n);

    // Parallelize the outer loop using OpenMP.
    #pragma omp parallel for private(j)
    for (int i = 0; i < n; ++i) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 3:
void gemv_parallel(int n, const float* A, const float* x, float* y) {
    // Parallel region with private variable sum for each thread
    #pragma omp parallel for private(j, sum)
    for (int i = 0; i < n; ++i) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 4:
void gemv_parallel(int n, const std::vector<std::vector<float>>& A, const std::vector<float>& x, std::vector<float>& y) {
    #pragma omp parallel for private(j)
    for (int i = 0; i < n; ++i) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 5:
void gemv_parallel(int n, float **A, float *x, float *y) {
    int i, j;
    float sum;

    // OpenMP parallel for directive
    #pragma omp parallel for private(i, j, sum)
    for (i = 0; i < n; i++) {
        sum = 0.0;
        for (j = 0; j < n; j++) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 6:
void gemv_parallel(int n, const float* A, const float* x, float* y) {
    // Parallel for loop with OpenMP
    #pragma omp parallel for shared(A, x, y) private(i, j, sum)
    for (int i = 0; i < n; ++i) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 7:
void gemv_parallel(int n, const float *A, const float *x, float *y)
{
    // OpenMP parallel region with the outer loop
    #pragma omp parallel for private(j) shared(A, x, y)
    for (int i = 0; i < n; ++i)
    {
        float sum = 0.0;
        for (int j = 0; j < n; ++j)
        {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 8:
void gemv_parallel(int n, const float* A, const float* x, float* y) {
    int i, j;
    float sum;

    #pragma omp parallel for private(j, sum)
    for (i = 0; i < n; ++i) {
        sum = 0.0;
        for (j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 9:
void gemv_parallel(int n, float** A, float* x, float* y) {
    int i, j;
    float sum;

    #pragma omp parallel for private(j, sum)
    for (i = 0; i < n; i++) {
        sum = 0.0f;
        for (j = 0; j < n; j++) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 10:
void gemv_parallel(int n, float **A, float *x, float *y) {
    int i, j;
    float sum;
    
    #pragma omp parallel for private(i, j, sum)
    for (i = 0; i < n; ++i) {
        sum = 0.0;
        for (j = 0; j < n; ++j) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

