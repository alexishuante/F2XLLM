Code Block 1:
void gemv_parallel(int n, float* A, float* x, float* y) {
    float *d_A, *d_x, *d_y;
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));
    
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    gemv_kernel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);
    
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum = sum + A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 2:
void gemv_parallel(int n, float* A, float* x, float* y) {
    float* d_A, *d_x, *d_y;
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMalloc(&d_x, n * sizeof(float));
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMalloc(&d_y, n * sizeof(float);

    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    gemv_parallel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_parallel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 3:
void gemv(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMalloc(&d_x, n * sizeof(float));
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMalloc(&d_y, n * sizeof(float);

    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;
    hipLaunchKernelGGL(gemv_parallel, dim3(gridSize), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 4:
void gemv_parallel_host(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    
    hipMalloc(&d_A, n*n*sizeof(float));
    hipMalloc(&d_x, n*sizeof(float));
    hipMalloc(&d_y, n*sizeof(float));
    
    hipMemcpy(d_A, A, n*n*sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n*sizeof(float), hipMemcpyHostToDevice);
    
    hipLaunchKernelGGL(gemv_parallel, dim3((n+255)/256), dim3(256), 0, 0, n, d_A, d_x, d_y);
    
    hipMemcpy(y, d_y, n*sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        float sum = 0.0;
        
        for (int j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        
        y[i] = sum;
    }
}

Code Block 5:
extern "C" void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;

    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    gemv_kernel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 6:
void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;

    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    hipLaunchKernelGGL(gemv_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__
void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 7:
void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));
    
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    hipLaunchKernelGGL(gemv_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 8:
void gemv_parallel_hip(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));
    
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    gemv_parallel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);
    
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        float sum = 0.0f;
        
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        
        y[i] = sum;
    }
}

Code Block 9:
extern "C" void gemv_parallel(int n, float* A, float* x, float* y) {
    hipDeviceProp_t prop;
    hipGetDeviceProperties(&prop, 0);
    int blockSize = prop.maxThreadsPerBlock;
    int gridSize = (n + blockSize - 1) / blockSize;

    #pragma omp target enter data map(to: A[0:n*n], x[0:n]) map(from: y[0:n])
    hipLaunchKernelGGL(gemv_kernel, gridSize, blockSize, 0, 0, n, A, x, y);
    #pragma omp target exit data map(from: y[0:n])
}

__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 10:
void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;

    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    dim3 blockDim(256);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x);

    gemv_kernel<<<gridDim, blockDim>>>(n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    float sum = 0.0f;
    if (i < n) {
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

