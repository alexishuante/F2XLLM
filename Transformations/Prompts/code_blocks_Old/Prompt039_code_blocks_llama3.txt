Code Block 1:
__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  }
}

Code Block 2:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();
}

__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  if (idx < n) {
    float sum = 0.0;
    for (int j = row[idx]; j < row[idx+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[idx] = sum;
  }
}

Code Block 3:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();
}

__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  if (idx < n) {
    float sum = 0.0;
    for (int j = row[idx]; j < row[idx+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[idx] = sum;
  }
}

Code Block 4:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  float temp;

  cudaError_t err = cudaMalloc((void **)&y, n * sizeof(float));
  if (err != cudaSuccess) {
    printf("Error in cudaMalloc\n");
    return;
  }

  cudaKernel<<<1, n>>>(n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();
  err = cudaGetLastError();
  if (err != cudaSuccess) {
    printf("Error in cudaKernel\n");
    return;
  }

  cudaFree(y);
}

__global__ void cudaKernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float temp = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      temp += val[j] * x[col[j]];
    }
    y[i] = temp;
  }
}

Code Block 5:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();
}

__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  if (idx < n) {
    float sum = 0.0;
    for (int j = row[idx]; j < row[idx+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[idx] = sum;
  }
}

Code Block 6:
__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  }
}

Code Block 7:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();
}

__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;

  if (idx < n) {
    float sum = 0.0;
    for (int j = row[idx]; j < row[idx+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[idx] = sum;
  }
}

Code Block 8:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);

  cudaDeviceSynchronize();
}

__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;

  if (idx < n) {
    float sum = 0.0;
    for (int j = row[idx]; j < row[idx+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[idx] = sum;
  }
}

Code Block 9:
void spmv_parallel_cpu(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  for (int i = 0; i < n; i++) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

Code Block 10:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    spmv_parallel_kernel<<<numBlocks, blockSize>>>(n, nnz, val, row, col, x, y);
    cudaDeviceSynchronize();
}

__global__ void spmv_parallel_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

