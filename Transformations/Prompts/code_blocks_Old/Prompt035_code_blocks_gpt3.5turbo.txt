Code Block 1:
__global__ void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 2:
void gemm_parallel(int m, int n, int k, double alpha, double *h_a, int lda, double *h_b, int ldb, double beta, double *h_c, int ldc) {
    double *d_a, *d_b, *d_c;

    cudaMalloc((void**)&d_a, m * k * sizeof(double));
    cudaMalloc((void**)&d_b, k * n * sizeof(double));
    cudaMalloc((void**)&d_c, m * n * sizeof(double));

    cudaMemcpy(d_a, h_a, m * k * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, h_b, k * n * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, h_c, m * n * sizeof(double), cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((m + threadsPerBlock.x - 1) / threadsPerBlock.x, (n + threadsPerBlock.y - 1) / threadsPerBlock.y);

    gemm_kernel<<<numBlocks, threadsPerBlock>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    cudaMemcpy(h_c, d_c, m * n * sizeof(double), cudaMemcpyDeviceToHost);

    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double *d_a, int lda, double *d_b, int ldb, double beta, double *d_c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;

        for (int l = 0; l < k; l++) {
            temp += d_a[i * lda + l] * d_b[l * ldb + j];
        }

        d_c[i * ldc + j] = alpha * temp + beta * d_c[i * ldc + j];
    }
}

Code Block 3:
b
    for (int i = 0; i < m * k; i++) {
        a[i] = 1.0;
    }

__global__ void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    int j = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 4:
__global__ void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for(int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 5:
void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    double *d_a, *d_b, *d_c;
    cudaMalloc(&d_a, m * k * sizeof(double));
    cudaMalloc(&d_b, k * n * sizeof(double));
    cudaMalloc(&d_c, m * n * sizeof(double));
    
    cudaMemcpy(d_a, a, m * k * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, k * n * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, m * n * sizeof(double), cudaMemcpyHostToDevice);
    
    dim3 blockSize(16, 16);
    dim3 gridSize((m + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y);
    
    gemm_kernel<<<gridSize, blockSize>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);
    
    cudaMemcpy(c, d_c, m * n * sizeof(double), cudaMemcpyDeviceToHost);
    
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    
    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 6:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int size_A = m * k * sizeof(double);
    int size_B = k * n * sizeof(double);
    int size_C = m * n * sizeof(double);

    double *d_a, *d_b, *d_c;
    cudaMalloc(&d_a, size_A);
    cudaMalloc(&d_b, size_B);
    cudaMalloc(&d_c, size_C);

    cudaMemcpy(d_a, a, size_A, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, size_B, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, size_C, cudaMemcpyHostToDevice);

    dim3 threads(BLOCK_SIZE, BLOCK_SIZE);
    dim3 blocks((n + BLOCK_SIZE - 1) / BLOCK_SIZE, (m + BLOCK_SIZE - 1) / BLOCK_SIZE);

    gemm_kernel<<<blocks, threads>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    cudaMemcpy(c, d_c, size_C, cudaMemcpyDeviceToHost);

    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if(row < m && col < n) {
        double temp = 0.0;
        for(int i = 0; i < k; i++) {
            temp += a[row * lda + i] * b[i * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 7:
__global__ void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int blockRow = blockIdx.y;
    int blockCol = blockIdx.x;
    int row = threadIdx.y;
    int col = threadIdx.x;

    double temp = 0.0;

    for (int l = 0; l < k; l++) {
        temp += a[blockRow * lda + l] * b[l * ldb + blockCol];
    }

    c[blockRow * ldc + blockCol] = alpha * temp + beta * c[blockRow * ldc + blockCol];
}

Code Block 8:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc)
{
    double *d_a, *d_b, *d_c;
    cudaMalloc(&d_a, m * k * sizeof(double));
    cudaMalloc(&d_b, k * n * sizeof(double));
    cudaMalloc(&d_c, m * n * sizeof(double));

    cudaMemcpy(d_a, a, m * k * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, k * n * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, m * n * sizeof(double), cudaMemcpyHostToDevice);

    dim3 block_size(16, 16);
    dim3 grid_size((m + block_size.x - 1) / block_size.x, (n + block_size.y - 1) / block_size.y);

    gemm_kernel<<<grid_size, block_size>>>(m, n, k, alpha, beta, d_a, lda, d_b, ldb, d_c, ldc);

    cudaMemcpy(c, d_c, m * n * sizeof(double), cudaMemcpyDeviceToHost);

    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double beta, double *a, int lda, double *b, int ldb, double *c, int ldc)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n)
    {
        double temp = 0.0;
        for (int l = 0; l < k; l++)
        {
            temp += a[i * lda + l] * b[l * ldb + j];
        }

        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 9:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    double *dev_a, *dev_b, *dev_c;
    cudaMalloc((void **)&dev_a, sizeof(double) * m * k);
    cudaMalloc((void **)&dev_b, sizeof(double) * k * n);
    cudaMalloc((void **)&dev_c, sizeof(double) * m * n);

    cudaMemcpy(dev_a, a, sizeof(double) * m * k, cudaMemcpyHostToDevice);
    cudaMemcpy(dev_b, b, sizeof(double) * k * n, cudaMemcpyHostToDevice);
    cudaMemcpy(dev_c, c, sizeof(double) * m * n, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((m + threadsPerBlock.x - 1) / threadsPerBlock.x, (n + threadsPerBlock.y - 1) / threadsPerBlock.y);

    gemm_kernel<<<numBlocks, threadsPerBlock>>>(m, n, k, alpha, dev_a, lda, dev_b, ldb, beta, dev_c, ldc);

    cudaMemcpy(c, dev_c, sizeof(double) * m * n, cudaMemcpyDeviceToHost);

    cudaFree(dev_a);
    cudaFree(dev_b);
    cudaFree(dev_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double *dev_a, int lda, double *dev_b, int ldb, double beta, double *dev_c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += dev_a[i * lda + l] * dev_b[l * ldb + j];
        }
        dev_c[i * ldc + j] = alpha * temp + beta * dev_c[i * ldc + j];
    }
}

Code Block 10:
b
    for (int i = 0; i < m * k; i++) {
        a[i] = 1.0; // Change values as needed
    }

__global__ void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    
    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

