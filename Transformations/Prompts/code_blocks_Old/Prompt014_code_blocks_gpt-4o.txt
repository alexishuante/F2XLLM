Code Block 1:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;

    // Use OpenACC to parallelize the outer loop
    #pragma acc parallel loop private(i, j, sum) copyin(A[0:n*n], x[0:n]) copyout(y[0:n])
    for (i = 0; i < n; i++) {
        sum = 0.0f;
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 2:
void gemv_parallel(int n, float* A, float* x, float* y) {
    int i, j;
    float sum;

    #pragma acc parallel loop
    for (i = 0; i < n; ++i) {
        sum = 0.0;
        for (j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 3:
void gemv_parallel(int n, const float* A, const float* x, float* y) {
    // Declare variables
    int i, j;
    float sum;

    // Parallel loop with OpenACC
    #pragma acc parallel loop private(i, j, sum)
    for (i = 0; i < n; ++i) {
        sum = 0.0f;
        for (j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 4:
void gemv_parallel(int n, float** A, float* x, float* y) {
    int i, j;
    float sum;

    #pragma acc parallel loop present(A[0:n][0:n],x[0:n],y[0:n])
    for (i = 0; i < n; i++) {
        sum = 0.0;
        #pragma acc loop reduction(+:sum)
        for (j = 0; j < n; j++) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 5:
void gemv_parallel(int n, float *A, float *x, float *y) {
    #pragma acc parallel loop
    for (int i = 0; i < n; i++) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 6:
void gemv_parallel(int n, float *A, float *x, float *y) {
    #pragma acc parallel loop
    for (int i = 0; i < n; i++) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 7:
void gemv_parallel(int n, float *A, float *x, float *y)
{
    int i, j;
    float sum;

    #pragma acc parallel loop
    for (i = 0; i < n; ++i) {
        sum = 0.0f;
        for (j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 8:
void gemv_parallel(int n, float A[n][n], float x[n], float y[n]) {
    #pragma acc parallel loop
    for (int i = 0; i < n; ++i) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 9:
void gemv_parallel(int n, float A[n][n], float x[n], float y[n])
{
    int i, j;
    float sum;

    #pragma acc parallel loop private(i, j, sum)
    for (i = 0; i < n; i++) {
        sum = 0.0;
        #pragma acc loop reduction(+:sum)
        for (j = 0; j < n; j++) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 10:
void gemv_parallel(int n, float* A, float* x, float* y) {
    int i, j;
    float sum;

    #pragma acc parallel loop private(i, j, sum)
    for (i = 0; i < n; ++i) {
        sum = 0.0;
        for (j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

