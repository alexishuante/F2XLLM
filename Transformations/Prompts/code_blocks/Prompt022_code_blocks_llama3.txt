Code Block 1:
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc kernels
    #pragma hip launch_kernel
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 2:
void saxpy(int n, float a, const float *x, float *y) {
  hipLaunchKernel(GLOBAL_KERNEL, dim3(n), dim3(1), 0, 0, 
                  saxpy_kernel, n, a, x, y);
}

__global__ void saxpy_kernel(int n, float a, const float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 3:
void saxpy(int n, float a, float* x, float* y) {
  hipLaunchKernel(GLOBAL_KERNEL, dim3(n), dim3(1), 0, 0, 
                   saxpy_kernel, n, a, x, y);
}

__global__ void saxpy_kernel(int n, float a, float* x, float* y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 4:
void saxpy(int n, float a, const float *x, float *y) {
  hipLaunchKernel(GLOBAL_KERNEL, dim3(n), dim3(1), 0, 0, 
                  n, a, x, y);
}

__global__ void GLOBAL_KERNEL(int n, float a, const float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 5:
void saxpy(int n, float a, float *x, float *y) {
  int i;
  #pragma acc kernels
  #pragma acc loop independent
  for (i = 0; i < n; i++) {
    y[i] = a * x[i] + y[i];
  }
  #pragma acc end kernels
}

Code Block 6:
void saxpy(int n, float a, float* x, float* y) {
  hipLaunchKernel(GLOBAL_KERNEL, dim3(n), dim3(1), 0, 0, 
                   saxpy_kernel, n, a, x, y);
}

__global__ void saxpy_kernel(int n, float a, float* x, float* y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 7:
void saxpy(int n, float a, const float *x, float *y) {
  hipLaunchKernelGGL((void *)axpy_kernel, dim3(n), dim3(1), 0, 0, n, a, x, y);
}

__global__ void axpy_kernel(int n, float a, const float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 8:
void saxpy(int n, float a, float *x, float *y) {
  hipLaunchKernelGGL(HIP_KERNEL_NAME(saxpy_kernel), dim3(n), dim3(1), 0, 0, n, a, x, y);
}

__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 9:
void saxpy(int n, float a, const float *x, float *y) {
  hipLaunchKernel(saxpy_kernel, dim3(1), dim3(256), 0, 0, n, a, x, y);
}

__global__ void saxpy_kernel(int n, float a, const float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  if (idx < n) {
    y[idx] = a * x[idx] + y[idx];
  }
}

Code Block 10:
void saxpy(int n, float a, float* x, float* y) {
  hipLaunchKernel(GLOBAL_KERNEL, dim3(n), dim3(1), 0, 0, 
                  kernel_saxpy, n, a, x, y);
}

__global__ void kernel_saxpy(int n, float a, float* x, float* y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

