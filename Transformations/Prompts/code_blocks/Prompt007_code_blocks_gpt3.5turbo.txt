Code Block 1:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                                  u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }
            
            #pragma omp barrier
            
            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 2:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        int i, j, k, iter;
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k]
                                                + u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                                  u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 4:
void jacobi_parallel(double u[n][n][n], double unew[n][n][n], int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                                 u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }
            
            #pragma omp barrier
            
            #pragma omp for collapse(3)
            for (i = 0; i < n; i++) {
                for (j = 0; j < n; j++) {
                    for (k = 0; k < n; k++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        int i, j, k, iter;
        
        for(iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static)
            for(k = 1; k < n - 1; k++) {
                for(j = 1; j < n - 1; j++) {
                    for(i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                                 u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }
            
            #pragma omp barrier
            
            #pragma omp for
            for(k = 1; k < n - 1; k++) {
                for(j = 1; j < n - 1; j++) {
                    for(i = 1; i < n - 1; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(double u[n][n][n], double unew[n][n][n], int n, int niter, int nthreads) {
    #pragma omp parallel num_threads(nthreads)
    {
        int i, j, k, iter;
        for(iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static)
            for(k = 1; k < n-1; k++) {
                for(j = 1; j < n-1; j++) {
                    for(i = 1; i < n-1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] + u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for collapse(3)
            for(i = 0; i < n; i++) {
                for(j = 0; j < n; j++) {
                    for(k = 0; k < n; k++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        int i, j, k, iter;
        
        for(iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for(k = 1; k < n-1; k++) {
                for(j = 1; j < n-1; j++) {
                    for(i = 1; i < n-1; i++) {
                       unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] 
                            + u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }

            #pragma omp barrier

            #pragma omp for
            for(k = 1; k < n; k++) {
                for(j = 1; j < n; j++) {
                    for(i = 1; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double u[][n][n], double unew[][n][n], int n, int niter, int nthreads) {
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (int iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (int k = 2; k < n - 1; k++) {
                for (int j = 2; j < n - 1; j++) {
                    for (int i = 2; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                                  u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for
            for (int k = 2; k < n - 1; k++) {
                for (int j = 2; j < n - 1; j++) {
                    for (int i = 2; i < n - 1; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    #pragma omp parallel for num_threads(nthreads) private(i, j, k, iter)
    for(int iter = 0; iter < niter; iter++) {
        #pragma omp for schedule(static)
        for(int k = 1; k < n - 1; k++) {
            for(int j = 1; j < n - 1; j++) {
                for(int i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                      u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        #pragma omp barrier
        #pragma omp single
        {
            for(int i = 0; i < n*n*n; i++) {
                u[i] = unew[i];
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double u[n][n][n], double unew[n][n][n], int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                                 u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }
            
            #pragma omp barrier
            
            #pragma omp for
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

