Code Block 1:
void jacobi_parallel(double*** u, double*** unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    // Start of parallel region with specified number of threads
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                  u[i][j-1][k] + u[i][j+1][k] +
                                                  u[i][j][k-1] + u[i][j][k+1] +
                                                  u[i][j][k]);
                    }
                }
            }

            #pragma omp barrier
            
            // Update u with the new values stored in unew
            #pragma omp for collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }

            #pragma omp barrier // Optional barrier to sync all threads before next iteration
        }
    }
}

Code Block 2:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; ++iter) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; ++k) {
                for (j = 1; j < n - 1; ++j) {
                    for (i = 1; i < n - 1; ++i) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                  u[i][j-1][k] + u[i][j+1][k] +
                                                  u[i][j][k-1] + u[i][j][k+1] +
                                                  u[i][j][k]);
                    }
                }
            }

            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 0; k < n; ++k) {
                for (j = 0; j < n; ++j) {
                    for (i = 0; i < n; ++i) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(double*** u, double*** unew, int n, int niter, int nthreads) {
    // Parallel region with specified number of threads
    #pragma omp parallel num_threads(nthreads)
    {
        for (int iter = 0; iter < niter; ++iter) {
            // Distribute the work across threads using static scheduling
            #pragma omp for schedule(static) collapse(3)
            for (int k = 1; k < n - 1; ++k) {
                for (int j = 1; j < n - 1; ++j) {
                    for (int i = 1; i < n - 1; ++i) {
                        unew[i][j][k] = 0.125 * (
                            u[i-1][j][k] + u[i+1][j][k] + 
                            u[i][j-1][k] + u[i][j+1][k] + 
                            u[i][j][k-1] + u[i][j][k+1] + 
                            u[i][j][k]
                        );
                    }
                }
            }

            // Synchronize threads before copying unew to u
            #pragma omp barrier
            #pragma omp for collapse(3)
            for (int k = 0; k < n; ++k) {
                for (int j = 0; j < n; ++j) {
                    for (int i = 0; i < n; ++i) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 4:
void jacobi_parallel(std::vector<std::vector<std::vector<double>>>& u, 
                     std::vector<std::vector<std::vector<double>>>& unew, 
                     int n, int niter, int nthreads) {

    // Ensure u and unew have the correct dimensions
    u.resize(n, std::vector<std::vector<double>>(n, std::vector<double>(n)));
    unew.resize(n, std::vector<std::vector<double>>(n, std::vector<double>(n)));

    #pragma omp parallel num_threads(nthreads)
    {
        for (int iter = 1; iter <= niter; ++iter) {
            #pragma omp for schedule(static)
            for (int k = 1; k < n-1; ++k) {
                for (int j = 1; j < n-1; ++j) {
                    for (int i = 1; i < n-1; ++i) {
                        unew[i][j][k] = 0.125 * (
                            u[i-1][j][k] + u[i+1][j][k] + 
                            u[i][j-1][k] + u[i][j+1][k] + 
                            u[i][j][k-1] + u[i][j][k+1] + 
                            u[i][j][k]
                        );
                    }
                }
            }
            #pragma omp barrier
            // Copy unew to u
            #pragma omp for schedule(static)
            for (int k = 0; k < n; ++k) {
                for (int j = 0; j < n; ++j) {
                    for (int i = 0; i < n; ++i) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    // Set the number of threads for OpenMP
    omp_set_num_threads(nthreads);

    #pragma omp parallel private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; ++iter) {
            #pragma omp for schedule(static)
            for (k = 1; k < n-1; ++k) {
                for (j = 1; j < n-1; ++j) {
                    for (i = 1; i < n-1; ++i) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] + 
                                                 u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + 
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier

            // Copy unew to u
            #pragma omp for collapse(3)
            for (k = 0; k < n; ++k) {
                for (j = 0; j < n; ++j) {
                    for (i = 0; i < n; ++i) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(double*** u, double*** unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier

            // Copy unew to u
            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(std::vector<std::vector<std::vector<double>>> &u, 
                     std::vector<std::vector<std::vector<double>>> &unew, 
                     int n, int niter, int nthreads) {
    int i, j, k, iter;

    // Set number of threads
    omp_set_num_threads(nthreads);

    #pragma omp parallel private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 2; k < n - 1; ++k) {
                for (j = 2; j < n - 1; ++j) {
                    for (i = 2; i < n - 1; ++i) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                                 u[i][j-1][k] + u[i][j+1][k] + 
                                                 u[i][j][k-1] + u[i][j][k+1] + 
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            // Copy unew to u
            #pragma omp for schedule(static)
            for (k = 0; k < n; ++k) {
                for (j = 0; j < n; ++j) {
                    for (i = 0; i < n; ++i) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
            #pragma omp barrier
        }
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    int n2 = n * n;
    
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        int idx = i + n * (j + n * k);
                        unew[idx] = 0.125 * (
                            u[idx - 1] + u[idx + 1] + 
                            u[idx - n] + u[idx + n] + 
                            u[idx - n2] + u[idx + n2] + 
                            u[idx]
                        );
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        int idx = i + n * (j + n * k);
                        u[idx] = unew[idx];
                    }
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double*** u, double*** unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    // Set the number of threads
    omp_set_num_threads(nthreads);

    #pragma omp parallel private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {

            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }
            
            #pragma omp barrier
            #pragma omp for
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double* u, double* unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; ++iter) {
            #pragma omp for schedule(static)
            for (k = 1; k < n-1; ++k) {
                for (j = 1; j < n-1; ++j) {
                    for (i = 1; i < n-1; ++i) {
                        unew[i*n*n + j*n + k] = 0.125 * (u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] + 
                                              u[i*n*n + (j-1)*n + k] + u[i*n*n + (j+1)*n + k] + 
                                              u[i*n*n + j*n + (k-1)] + u[i*n*n + j*n + (k+1)] + 
                                              u[i*n*n + j*n + k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 0; k < n; ++k) {
                for (j = 0; j < n; ++j) {
                    for (i = 0; i < n; ++i) {
                        u[i*n*n + j*n + k] = unew[i*n*n + j*n + k];
                    }
                }
            }
        }
    }
}

