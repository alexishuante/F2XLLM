Code Block 1:
void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    int i, j, l;
    double temp;

    hipLaunchKernelGGL([&](int i, int j, int l, double* a, double* b, double* c, double alpha, double beta) {
        temp = 0.0;
        for (l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }, dim3(m, n), dim3(k), 0, 0, i, j, l, a, b, c, alpha, beta);
}

Code Block 2:
__global__ void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    
    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 3:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i, j, l;
    double temp;

    hipLaunchKernelGGL([&](int i, int j) {
        temp = 0.0;
        for (l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }, dim3(m, n), dim3(1, 1), 0, 0);

    hipDeviceSynchronize();
}

Code Block 4:
void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    hipLaunchKernelGGL([&](int i, int j) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }, dim3(m, n), 1, 0);
}

Code Block 5:
result
    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            printf("%.2f\t", c[i * n + j]);
        }
        printf("\n");
    }

__global__ void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    int j = blockDim.y * blockIdx.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 6:
__global__ void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    
    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 7:
void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    double *d_a, *d_b, *d_c;
    hipMalloc(&d_a, m * k * sizeof(double));
    hipMalloc(&d_b, k * n * sizeof(double));
    hipMalloc(&d_c, m * n * sizeof(double));

    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    dim3 blockSize(16, 16);
    dim3 gridSize((m + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y);

    hipLaunchKernelGGL(gemm_kernel, gridSize, blockSize, 0, 0, m, n, k, alpha, beta, d_a, lda, d_b, ldb, d_c, ldc);

    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double beta, double* a, int lda, double* b, int ldb, double* c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l + j * ldb];
        }
        c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
    }
}

Code Block 8:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i, j, l;
    double temp;
    
    hipLaunchKernelGGL([=] HIP_KERNEL() {
        for (j = blockIdx.x * blockDim.x + threadIdx.x; j < n; j += gridDim.x * blockDim.x) {
            for (i = 0; i < m; i++) {
                temp = 0.0;
                for (l = 0; l < k; l++) {
                    temp += a[i + l * lda] * b[l + j * ldb];
                }
                c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
            }
        }
    }, dim3(256), dim3(256), 0, 0, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);
}

Code Block 9:
void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    hipLaunchKernelGGL([=] __global__ (int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
        int i = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;
        int j = hipBlockIdx_y * hipBlockDim_y + hipThreadIdx_y;
        if (i < m && j < n) {
            double temp = 0.0;
            for (int l = 0; l < k; l++) {
                temp += a[i * lda + l] * b[l * ldb + j];
            }
            c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
        }
    }, dim3((m + 15) / 16, (n + 15) / 16), dim3(16, 16), 0, 0, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);
}

Code Block 10:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    double *d_a, *d_b, *d_c;
    hipMalloc(&d_a, m * k * sizeof(double));
    hipMalloc(&d_b, k * n * sizeof(double));
    hipMalloc(&d_c, m * n * sizeof(double));

    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    dim3 blockSize(32, 32);
    dim3 gridSize((m + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y);

    gemm_kernel<<<gridSize, blockSize>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

