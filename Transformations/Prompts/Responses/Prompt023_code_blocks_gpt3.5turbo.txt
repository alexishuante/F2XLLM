Code Block 1:
void gemv_parallel(int n, float *A, float *x, float *y) {
    #pragma omp target teams distribute parallel for map(to:A[:n*n],x[:n]) map(from:y[:n])
    for (int i = 0; i < n; i++) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 2:
void gemv_parallel(int n, float *A, float *x, float *y) {
    hipLaunchKernelGGL(kernel_gemv_parallel, dim3((n+255)/256, 1, 1), dim3(256, 1, 1), 0, 0, n, A, x, y);
}

__global__ void kernel_gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 3:
void gemv_parallel(int n, float* A, float* x, float* y){
    int block_size = 256;
    int grid_size = (n + block_size - 1) / block_size;
    
    hipLaunchKernelGGL(gemv_parallel_kernel, dim3(grid_size), dim3(block_size), 0, 0, n, A, x, y);
}

__global__ void gemv_parallel_kernel(int n, float* A, float* x, float* y){
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if(i < n){
        float sum = 0.0;
        for(int j = 0; j < n; j++){
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 4:
void gemv(int n, float *h_A, float *h_x, float *h_y) {
    float *d_A, *d_x, *d_y;
    
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));
    
    hipMemcpy(d_A, h_A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, h_x, n * sizeof(float), hipMemcpyHostToDevice);
    
    int threadsPerBlock = 256;
    int blocksPerGrid = (n + threadsPerBlock - 1) / threadsPerBlock;
    
    gemv_parallel<<<blocksPerGrid, threadsPerBlock>>>(n, d_A, d_x, d_y);
    
    hipMemcpy(h_y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        float sum = 0.0f;
        
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        
        y[i] = sum;
    }
}

Code Block 5:
void gemv(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    hipMalloc(&d_A, n*n*sizeof(float));
    hipMalloc(&d_x, n*sizeof(float));
    hipMalloc(&d_y, n*sizeof(float));

    hipMemcpy(d_A, A, n*n*sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n*sizeof(float), hipMemcpyHostToDevice);

    dim3 blockSize(256);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x);

    gemv_parallel<<<gridSize, blockSize>>>(n, d_A, d_x, d_y);
    hipMemcpy(y, d_y, n*sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 6:
void gemv_parallel_wrapper(int n, float *A, float *x, float *y) {
    hipLaunchKernelGGL(gemv_parallel, dim3((n + 255) / 256), dim3(256), 0, 0, n, A, x, y);
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;    
    }
}

Code Block 7:
void gemv_parallel(int n, float *A, float *x, float *y) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 8:
void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;

    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    hipLaunchKernelGGL(gemv_kernel, dim3((n + 255) / 256), dim3(256), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    float sum = 0.0;

    if (i < n) {
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 9:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;

    hipLaunchKernelGGL(HIP_KERNEL_NAME(gemv_kernel), dim3(N), dim3(1), 0, 0, n, A, x, y);
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x;

    float sum = 0.0;
    for (int j = 0; j < n; j++) {
        sum += A[i*n + j] * x[j];
    }

    y[i] = sum;
}

Code Block 10:
void gemv_parallel(int n, float* h_A, float* h_x, float* h_y) {
    float* d_A, *d_x, *d_y;
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_A, h_A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, h_x, n * sizeof(float), hipMemcpyHostToDevice);

    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    gemv_kernel<<<gridSize, blockSize>>>(n, d_A, d_x, d_y);

    hipMemcpy(h_y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

