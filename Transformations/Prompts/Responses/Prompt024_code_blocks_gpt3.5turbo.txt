Code Block 1:
void gemv_parallel(int n, float *A, float *x, float *y) {
    hipLaunchKernelGGL([&](int i) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }, dim3(n), dim3(1), 0, 0, n, A, x, y);
}

Code Block 2:
void gemv_parallel(int n, float* A, float* x, float* y) {
    int i, j;
    float sum;
    
    hipLaunchKernelGGL([&](int i) {
        sum = 0.0f;
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }, dim3(n), dim3(1), 0, 0, n);
}

Code Block 3:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;

    for (i = 0; i < n; i++) {
        sum = 0.0f;
        for (j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 4:
__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if(i < n) {
        float sum = 0.0f;
        for(int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 5:
void gemv_parallel(int n, float *A, float *x, float *y) {
    real sum;
    hipLaunchKernelGGL([=] __device__ (int i) {
        sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }, dim3(n), dim3(1), 0, 0, n);
}

Code Block 6:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;

    hipLaunchKernelGGL([=] __global__ void() {
        int i = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;
        if (i < n) {
            sum = 0.0f;
            for (int j = 0; j < n; j++) {
                sum += A[i*n + j] * x[j];
            }
            y[i] = sum;
        }
    }, dim3((n + 255)/256), dim3(256), 0, 0, n, A, x, y);
}

Code Block 7:
__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 8:
__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 9:
void gemv(int n, float* A, float* x, float* y) {
    float *d_A, *d_x, *d_y;
    cudaMalloc(&d_A, n * n * sizeof(float));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));

    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    gemv_parallel<<<gridSize, blockSize>>>(n, d_A, d_x, d_y);

    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

__global__
void gemv_parallel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 10:
void gemv_parallel(int n, float* A, float* x, float* y) {
    for (int i = 0; i < n; i++) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

