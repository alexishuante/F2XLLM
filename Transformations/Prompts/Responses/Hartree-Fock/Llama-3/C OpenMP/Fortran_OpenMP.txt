--------------- Output 1 ---------------
Here is a possible implementation of the Hartree-Fock operation in C with OpenMP:
#include <stdio.h>
#include <math.h>
#include <omp.h>

// Define constants and data structures
#define NGAUSS 5
#define NNNN 100
#define DTOL 1e-6
#define RCUT 10.0

typedef struct {
    double x, y, z;
} geom_t;

typedef struct {
    double xpnt, coef;
} gauss_t;

double schwarz(int ij) {
    // Implement Schwarz function
}

int main() {
    int i, j, k, l, ijkl, n;
    double eri, f0t, tt, aij, dij, xij, yij, zij, akl, dkl, aijkl;
    geom_t *geom;
    gauss_t *gauss;
    double *fock, *dens;

    // Initialize data structures
    geom = malloc(NNNN * sizeof(geom_t));
    gauss = malloc(NGAUSS * sizeof(gauss_t));
    fock = malloc(NNNN * NNNN * sizeof(double));
    dens = malloc(NNNN * NNNN * sizeof(double));

    // Initialize OpenMP
    omp_set_num_threads(4);

    #pragma omp parallel private(ijkl, ij, i, j, kl, k, l, n, ai, dij, xij, yij, zij, akl, dkl, aijkl, tt, f0t, eri)
    {
        #pragma omp for
        for (ijkl = 1; ijkl <= NNNN; ijkl++) {
            // Decompose triangular ijkl index into ij>=kl
            ij = sqrt(2 * ijkl);
            n = (ij * ij + ij) / 2;
            while (n < ijkl) {
                ij++;
                n = (ij * ij + ij) / 2;
            }
            kl = ijkl - (ij * ij - ij) / 2;

            if (schwarz(ij) * schwarz(kl) > DTOL) {
                // Decompose triangular ij index into i>=j
                i = sqrt(2 * ij);
                n = (i * i + i) / 2;
                while (n < ij) {
                    i++;
                    n = (i * i + i) / 2;
                }
                j = ij - (i * i - i) / 2;

                // Decompose triangular kl index into k>=l
                k = sqrt(2 * kl);
                n = (k * k + k) / 2;
                while (n < kl) {
                    k++;
                    n = (k * k + k) / 2;
                }
                l = kl - (k * k - k) / 2;

                eri = 0.0;

                for (int ib = 1; ib <= NGAUSS; ib++) {
                    for (int jb = 1; jb <= NGAUSS; jb++) {
                        aij = 1.0 / (gauss[ib].xpnt + gauss[jb].xpnt);
                        dij = gauss[ib].coef * gauss[jb].coef * exp(-gauss[ib].xpnt * gauss[jb].xpnt * aij * (
                            (geom[i].x - geom[j].x) * (geom[i].x - geom[j].x) +
                            (geom[i].y - geom[j].y) * (geom[i].y - geom[j].y) +
                            (geom[i].z - geom[j].z) * (geom[i].z - geom[j].z))) * (aij ** 1.5);

                        if (abs(dij) > DTOL) {
                            xij = aij * (gauss[ib].xpnt * geom[i].x + gauss[jb].xpnt * geom[j].x);
                            yij = aij * (gauss[ib].xpnt * geom[i].y + gauss[jb].xpnt * geom[j].y);
                            zij = aij * (gauss[ib].xpnt * geom[i].z + gauss[jb].xpnt * geom[j].z);

                            for (int kb = 1; kb <= NGAUSS; kb++) {
                                for (int lb = 1; lb <= NGAUSS; lb++) {
                                    akl = 1.0 / (gauss[kb].xpnt + gauss[lb].xpnt);
                                    dkl = dij * gauss[kb].coef * gauss[lb].coef * exp(-gauss[kb].xpnt * gauss[lb].xpnt * akl * (
                                        (geom[k].x - geom[l].x)

--------------- Output 2 ---------------
Here is a possible implementation of the Hartree-Fock operation in C with OpenMP:
#include <stdio.h>
#include <math.h>
#include <omp.h>

// ...

int main() {
    int nnnn = ...;
    double *xpnt = ...;
    double *geom = ...;
    double *coef = ...;
    double *dens = ...;
    double *fock = ...;
    double dtol = ...;
    double rcut = ...;

    #pragma omp parallel do private(ib, jb, kb, lb, ijkl, ij, i, j, kl, k, l, n, aij, dij, xij, yij, zij, akl, dkl, aijkl, tt, f0t, eri)
    for (ijkl = 1; ijkl <= nnnn; ijkl++) {
        // decompose triangular ijkl index into ij>=kl
        ij = sqrt(2 * ijkl);
        n = (ij * ij + ij) / 2;
        while (n < ijkl) {
            ij = ij + 1;
            n = (ij * ij + ij) / 2;
        }
        kl = ijkl - (ij * ij - ij) / 2;

        if (schwarz(ij) * schwarz(kl) > dtol) {
            // decompose triangular ij index into i>=j
            i = sqrt(2 * ij);
            n = (i * i + i) / 2;
            while (n < ij) {
                i = i + 1;
                n = (i * i + i) / 2;
            }
            j = ij - (i * i - i) / 2;

            // decompose triangular kl index into k>=l
            k = sqrt(2 * kl);
            n = (k * k + k) / 2;
            while (n < kl) {
                k = k + 1;
                n = (k * k + k) / 2;
            }
            l = kl - (k * k - k) / 2;

            eri = 0.0;

            for (ib = 1; ib <= ngauss; ib++) {
                for (jb = 1; jb <= ngauss; jb++) {
                    aij = 1.0 / (xpnt[ib] + xpnt[jb]);
                    dij = coef[ib] * coef[jb] * exp(-xpnt[ib] * xpnt[jb] * aij *
                            ((geom[0][i] - geom[0][j]) * (geom[0][i] - geom[0][j]) +
                             (geom[1][i] - geom[1][j]) * (geom[1][i] - geom[1][j]) +
                             (geom[2][i] - geom[2][j]) * (geom[2][i] - geom[2][j]))) *
                            (aij ** 1.5);

                    if (fabs(dij) > dtol) {
                        xij = aij * (xpnt[ib] * geom[0][i] + xpnt[jb] * geom[0][j]);
                        yij = aij * (xpnt[ib] * geom[1][i] + xpnt[jb] * geom[1][j]);
                        zij = aij * (xpnt[ib] * geom[2][i] + xpnt[jb] * geom[2][j]);

                        for (kb = 1; kb <= ngauss; kb++) {
                            for (lb = 1; lb <= ngauss; lb++) {
                                akl = 1.0 / (xpnt[kb] + xpnt[lb]);
                                dkl = dij * coef[kb] * coef[lb] * exp(-xpnt[kb] * xpnt[lb] * akl *
                                        ((geom[0][k] - geom[0][l]) * (geom[0][k] - geom[0][l]) +
                                         (geom[1][k] - geom[1][l]) * (geom[1][k] - geom[1][l]) +
                                         (geom[2][k] - geom[2][l]) * (geom[2][k] - geom[2][l]))) *
                                        (akl ** 1.5);

                                if (fabs(dkl) > dtol) {
                                    aijkl = (xpnt[ib] + xpnt[jb]) * (xpnt[kb] + xpnt[lb]) /
                                            (xpnt[ib] + xpnt[jb] + xpnt[kb] + xpnt[lb]);
                                    tt = aijkl * ((x

--------------- Output 3 ---------------
Here is the equivalent C code with OpenMP:
#include <math.h>
#include <omp.h>

// ...

#pragma omp parallel do private(ib, jb, kb, lb, ijkl, ij, i, j, kl, k, l, n, aij, dij, xij, yij, zij, akl, dkl, aijkl, tt, f0t, eri)
for (ijkl = 1; ijkl <= nnnn; ijkl++) {
    // decompose triangular ijkl index into ij>=kl
    ij = sqrt(2 * ijkl);
    n = (ij * ij + ij) / 2;
    while (n < ijkl) {
        ij = ij + 1;
        n = (ij * ij + ij) / 2;
    }
    kl = ijkl - (ij * ij - ij) / 2;
    if (schwarz(ij) * schwarz(kl) > dtol) {
        // decompose triangular ij index into i>=j
        i = sqrt(2 * ij);
        n = (i * i + i) / 2;
        while (n < ij) {
            i = i + 1;
            n = (i * i + i) / 2;
        }
        j = ij - (i * i - i) / 2;
        // decompose triangular kl index into k>=l
        k = sqrt(2 * kl);
        n = (k * k + k) / 2;
        while (n < kl) {
            k = k + 1;
            n = (k * k + k) / 2;
        }
        l = kl - (k * k - k) / 2;
        eri = 0.0;
        for (ib = 1; ib <= ngauss; ib++) {
            for (jb = 1; jb <= ngauss; jb++) {
                aij = 1.0 / (xpnt[ib] + xpnt[jb]);
                dij = coef[ib] * coef[jb] * exp(-xpnt[ib] * xpnt[jb] * aij * (
                    (geom[0][i] - geom[0][j]) * (geom[0][i] - geom[0][j]) +
                    (geom[1][i] - geom[1][j]) * (geom[1][i] - geom[1][j]) +
                    (geom[2][i] - geom[2][j]) * (geom[2][i] - geom[2][j])
                )) * sqrt(aij);
                if (fabs(dij) > dtol) {
                    xij = aij * (xpnt[ib] * geom[0][i] + xpnt[jb] * geom[0][j]);
                    yij = aij * (xpnt[ib] * geom[1][i] + xpnt[jb] * geom[1][j]);
                    zij = aij * (xpnt[ib] * geom[2][i] + xpnt[jb] * geom[2][j]);
                    for (kb = 1; kb <= ngauss; kb++) {
                        for (lb = 1; lb <= ngauss; lb++) {
                            akl = 1.0 / (xpnt[kb] + xpnt[lb]);
                            dkl = dij * coef[kb] * coef[lb] * exp(-xpnt[kb] * xpnt[lb] * akl * (
                                (geom[0][k] - geom[0][l]) * (geom[0][k] - geom[0][l]) +
                                (geom[1][k] - geom[1][l]) * (geom[1][k] - geom[1][l]) +
                                (geom[2][k] - geom[2][l]) * (geom[2][k] - geom[2][l])
                            )) * sqrt(akl);
                            if (fabs(dkl) > dtol) {
                                aijkl = (xpnt[ib] + xpnt[jb]) * (xpnt[kb] + xpnt[lb]) /
                                    (xpnt[ib] + xpnt[jb] + xpnt[kb] + xpnt[lb]);
                                tt = aijkl * (
                                    (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] * geom[0][l])) * (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] * geom[0][l])) +
                                    (yij - akl * (xpnt[kb] * geom

--------------- Output 4 ---------------
Here is the equivalent C code with OpenMP:
#include <math.h>
#include <omp.h>

// ...

#pragma omp parallel do private(ib, jb, kb, lb, ijkl, ij, i, j, kl, k, l, n, aij, dij, xij, yij, zij, akl, dkl, aijkl, tt, f0t, eri)
for (ijkl = 1; ijkl <= nnnn; ijkl++) {
    // decompose triangular ijkl index into ij>=kl
    ij = sqrt(2 * ijkl);
    n = (ij * ij + ij) / 2;
    while (n < ijkl) {
        ij = ij + 1;
        n = (ij * ij + ij) / 2;
    }
    kl = ijkl - (ij * ij - ij) / 2;
    if (schwarz(ij) * schwarz(kl) > dtol) {
        // decompose triangular ij index into i>=j
        i = sqrt(2 * ij);
        n = (i * i + i) / 2;
        while (n < ij) {
            i = i + 1;
            n = (i * i + i) / 2;
        }
        j = ij - (i * i - i) / 2;
        // decompose triangular kl index into k>=l
        k = sqrt(2 * kl);
        n = (k * k + k) / 2;
        while (n < kl) {
            k = k + 1;
            n = (k * k + k) / 2;
        }
        l = kl - (k * k - k) / 2;
        eri = 0.0;
        for (ib = 1; ib <= ngauss; ib++) {
            for (jb = 1; jb <= ngauss; jb++) {
                aij = 1.0 / (xpnt[ib] + xpnt[jb]);
                dij = coef[ib] * coef[jb] * exp(-xpnt[ib] * xpnt[jb] * aij * (
                    (geom[0][i] - geom[0][j]) * (geom[0][i] - geom[0][j]) +
                    (geom[1][i] - geom[1][j]) * (geom[1][i] - geom[1][j]) +
                    (geom[2][i] - geom[2][j]) * (geom[2][i] - geom[2][j])
                )) * sqrt(aij);
                if (fabs(dij) > dtol) {
                    xij = aij * (xpnt[ib] * geom[0][i] + xpnt[jb] * geom[0][j]);
                    yij = aij * (xpnt[ib] * geom[1][i] + xpnt[jb] * geom[1][j]);
                    zij = aij * (xpnt[ib] * geom[2][i] + xpnt[jb] * geom[2][j]);
                    for (kb = 1; kb <= ngauss; kb++) {
                        for (lb = 1; lb <= ngauss; lb++) {
                            akl = 1.0 / (xpnt[kb] + xpnt[lb]);
                            dkl = dij * coef[kb] * coef[lb] * exp(-xpnt[kb] * xpnt[lb] * akl * (
                                (geom[0][k] - geom[0][l]) * (geom[0][k] - geom[0][l]) +
                                (geom[1][k] - geom[1][l]) * (geom[1][k] - geom[1][l]) +
                                (geom[2][k] - geom[2][l]) * (geom[2][k] - geom[2][l])
                            )) * sqrt(akl);
                            if (fabs(dkl) > dtol) {
                                aijkl = (xpnt[ib] + xpnt[jb]) * (xpnt[kb] + xpnt[lb]) /
                                    (xpnt[ib] + xpnt[jb] + xpnt[kb] + xpnt[lb]);
                                tt = aijkl * (
                                    (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] * geom[0][l])) *
                                    (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] * geom[0][l])) +
                                    (yij - akl * (xpnt[kb] *

--------------- Output 5 ---------------
Here is a possible implementation of the Hartree-Fock operation in C with OpenMP:
#include <math.h>
#include <omp.h>

// ...

#pragma omp parallel for private(ib, jb, kb, lb, ijkl, ij, i, j, kl, k, l, n, aij, dij, xij, yij, zij, akl, dkl, aijkl, tt, f0t, eri) reduction(+:fock)
for (int ijkl = 1; ijkl <= nnnn; ijkl++) {
    // decompose triangular ijkl index into ij>=kl
    int ij = sqrt(2 * ijkl);
    int n = (ij * ij + ij) / 2;
    while (n < ijkl) {
        ij++;
        n = (ij * ij + ij) / 2;
    }
    int kl = ijkl - (ij * ij - ij) / 2;

    if (schwarz(ij) * schwarz(kl) > dtol) {
        // decompose triangular ij index into i>=j
        int i = sqrt(2 * ij);
        n = (i * i + i) / 2;
        while (n < ij) {
            i++;
            n = (i * i + i) / 2;
        }
        int j = ij - (i * i - i) / 2;

        // decompose triangular kl index into k>=l
        int k = sqrt(2 * kl);
        n = (k * k + k) / 2;
        while (n < kl) {
            k++;
            n = (k * k + k) / 2;
        }
        int l = kl - (k * k - k) / 2;

        double eri = 0.0;
        for (int ib = 1; ib <= ngauss; ib++) {
            for (int jb = 1; jb <= ngauss; jb++) {
                double aij = 1.0 / (xpnt[ib] + xpnt[jb]);
                double dij = coef[ib] * coef[jb] * exp(-xpnt[ib] * xpnt[jb] * aij * (
                    (geom[0][i] - geom[0][j]) * (geom[0][i] - geom[0][j]) +
                    (geom[1][i] - geom[1][j]) * (geom[1][i] - geom[1][j]) +
                    (geom[2][i] - geom[2][j]) * (geom[2][i] - geom[2][j])
                )) * sqrt(aij);
                if (fabs(dij) > dtol) {
                    double xij = aij * (xpnt[ib] * geom[0][i] + xpnt[jb] * geom[0][j]);
                    double yij = aij * (xpnt[ib] * geom[1][i] + xpnt[jb] * geom[1][j]);
                    double zij = aij * (xpnt[ib] * geom[2][i] + xpnt[jb] * geom[2][j]);
                    for (int kb = 1; kb <= ngauss; kb++) {
                        for (int lb = 1; lb <= ngauss; lb++) {
                            double akl = 1.0 / (xpnt[kb] + xpnt[lb]);
                            double dkl = dij * coef[kb] * coef[lb] * exp(-xpnt[kb] * xpnt[lb] * akl * (
                                (geom[0][k] - geom[0][l]) * (geom[0][k] - geom[0][l]) +
                                (geom[1][k] - geom[1][l]) * (geom[1][k] - geom[1][l]) +
                                (geom[2][k] - geom[2][l]) * (geom[2][k] - geom[2][l])
                            )) * sqrt(akl);
                            if (fabs(dkl) > dtol) {
                                double aijkl = (xpnt[ib] + xpnt[jb]) * (xpnt[kb] + xpnt[lb]) /
                                    (xpnt[ib] + xpnt[jb] + xpnt[kb] + xpnt[lb]);
                                double tt = aijkl * (
                                    (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] * geom[0][l])) *
                                    (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] *

--------------- Output 6 ---------------
Here is the equivalent C code with OpenMP:
#include <math.h>
#include <omp.h>

// ...

#pragma omp parallel do private(ib, jb, kb, lb, ijkl, ij, i, j, kl, k, l, n, aij, dij, xij, yij, zij, akl, dkl, aijkl, tt, f0t, eri)
for (ijkl = 1; ijkl <= nnnn; ijkl++) {
    // decompose triangular ijkl index into ij>=kl
    ij = sqrt(2 * ijkl);
    n = (ij * ij + ij) / 2;
    while (n < ijkl) {
        ij = ij + 1;
        n = (ij * ij + ij) / 2;
    }
    kl = ijkl - (ij * ij - ij) / 2;
    if (schwarz(ij) * schwarz(kl) > dtol) {
        // decompose triangular ij index into i>=j
        i = sqrt(2 * ij);
        n = (i * i + i) / 2;
        while (n < ij) {
            i = i + 1;
            n = (i * i + i) / 2;
        }
        j = ij - (i * i - i) / 2;
        // decompose triangular kl index into k>=l
        k = sqrt(2 * kl);
        n = (k * k + k) / 2;
        while (n < kl) {
            k = k + 1;
            n = (k * k + k) / 2;
        }
        l = kl - (k * k - k) / 2;
        eri = 0.0;
        for (ib = 1; ib <= ngauss; ib++) {
            for (jb = 1; jb <= ngauss; jb++) {
                aij = 1.0 / (xpnt[ib] + xpnt[jb]);
                dij = coef[ib] * coef[jb] * exp(-xpnt[ib] * xpnt[jb] * aij * (
                    (geom[0][i] - geom[0][j]) * (geom[0][i] - geom[0][j]) +
                    (geom[1][i] - geom[1][j]) * (geom[1][i] - geom[1][j]) +
                    (geom[2][i] - geom[2][j]) * (geom[2][i] - geom[2][j])
                )) * (aij ** 1.5);
                if (fabs(dij) > dtol) {
                    xij = aij * (xpnt[ib] * geom[0][i] + xpnt[jb] * geom[0][j]);
                    yij = aij * (xpnt[ib] * geom[1][i] + xpnt[jb] * geom[1][j]);
                    zij = aij * (xpnt[ib] * geom[2][i] + xpnt[jb] * geom[2][j]);
                    for (kb = 1; kb <= ngauss; kb++) {
                        for (lb = 1; lb <= ngauss; lb++) {
                            akl = 1.0 / (xpnt[kb] + xpnt[lb]);
                            dkl = dij * coef[kb] * coef[lb] * exp(-xpnt[kb] * xpnt[lb] * akl * (
                                (geom[0][k] - geom[0][l]) * (geom[0][k] - geom[0][l]) +
                                (geom[1][k] - geom[1][l]) * (geom[1][k] - geom[1][l]) +
                                (geom[2][k] - geom[2][l]) * (geom[2][k] - geom[2][l])
                            )) * (akl ** 1.5);
                            if (fabs(dkl) > dtol) {
                                aijkl = (xpnt[ib] + xpnt[jb]) * (xpnt[kb] + xpnt[lb]) /
                                    (xpnt[ib] + xpnt[jb] + xpnt[kb] + xpnt[lb]);
                                tt = aijkl * (
                                    (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] * geom[0][l])) *
                                    (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] * geom[0][l])) +
                                    (yij - a

--------------- Output 7 ---------------
Here is a possible implementation of the Hartree-Fock operation in C with OpenMP:
#include <math.h>
#include <omp.h>

void hartree_fock(int nnnn, double *schwarz, double *xpnt, double *geom, double *coef, double *dens, double *fock) {
  int ijkl, ij, kl, i, j, k, l, ib, jb, kb, lb;
  double dij, aij, xij, yij, zij, dkl, akl, aijkl, tt, f0t, eri;

  #pragma omp parallel do private(ib, jb, kb, lb, ijkl, ij, i, j, kl, k, l, n, aij, dij, xij, yij, zij, akl, dkl, aijkl, tt, f0t, eri)
  for (ijkl = 1; ijkl <= nnnn; ijkl++) {
    // decompose triangular ijkl index into ij>=kl
    ij = sqrt(2 * ijkl);
    int n = (ij * ij + ij) / 2;
    while (n < ijkl) {
      ij++;
      n = (ij * ij + ij) / 2;
    }
    kl = ijkl - (ij * ij - ij) / 2;

    if (schwarz[ij] * schwarz[kl] > dtol) {
      // decompose triangular ij index into i>=j
      i = sqrt(2 * ij);
      n = (i * i + i) / 2;
      while (n < ij) {
        i++;
        n = (i * i + i) / 2;
      }
      j = ij - (i * i - i) / 2;

      // decompose triangular kl index into k>=l
      k = sqrt(2 * kl);
      n = (k * k + k) / 2;
      while (n < kl) {
        k++;
        n = (k * k + k) / 2;
      }
      l = kl - (k * k - k) / 2;

      eri = 0.0;

      for (ib = 1; ib <= ngauss; ib++) {
        for (jb = 1; jb <= ngauss; jb++) {
          aij = 1.0 / (xpnt[ib] + xpnt[jb]);
          dij = coef[ib] * coef[jb] * exp(-xpnt[ib] * xpnt[jb] * aij * (
              (geom[0][i] - geom[0][j]) * (geom[0][i] - geom[0][j]) +
              (geom[1][i] - geom[1][j]) * (geom[1][i] - geom[1][j]) +
              (geom[2][i] - geom[2][j]) * (geom[2][i] - geom[2][j])
          )) * (aij ** 1.5);

          if (fabs(dij) > dtol) {
            xij = aij * (xpnt[ib] * geom[0][i] + xpnt[jb] * geom[0][j]);
            yij = aij * (xpnt[ib] * geom[1][i] + xpnt[jb] * geom[1][j]);
            zij = aij * (xpnt[ib] * geom[2][i] + xpnt[jb] * geom[2][j]);

            for (kb = 1; kb <= ngauss; kb++) {
              for (lb = 1; lb <= ngauss; lb++) {
                akl = 1.0 / (xpnt[kb] + xpnt[lb]);
                dkl = dij * coef[kb] * coef[lb] * exp(-xpnt[kb] * xpnt[lb] * akl * (
                    (geom[0][k] - geom[0][l]) * (geom[0][k] - geom[0][l]) +
                    (geom[1][k] - geom[1][l]) * (geom[1][k] - geom[1][l]) +
                    (geom[2][k] - geom[2][l]) * (geom[2][k] - geom[2][l])
                )) * (akl ** 1.5);

                if (fabs(dkl) > dtol) {
                  aijkl = (xpnt[ib] + xpnt[jb]) * (xpnt[kb] + xpnt[lb]) /
                      (xpnt[ib] + xpnt[jb] + xpnt[k

--------------- Output 8 ---------------
Here is the equivalent code in C with OpenMP:
#include <math.h>
#include <omp.h>

// ...

#pragma omp parallel do private(ib, jb, kb, lb, ijkl, ij, i, j, kl, k, l, n, aij, dij, xij, yij, zij, akl, dkl, aijkl, tt, f0t, eri)
for (ijkl = 1; ijkl <= nnnn; ijkl++) {
    // decompose triangular ijkl index into ij>=kl
    ij = sqrt(2 * ijkl);
    n = (ij * ij + ij) / 2;
    while (n < ijkl) {
        ij++;
        n = (ij * ij + ij) / 2;
    }
    kl = ijkl - (ij * ij - ij) / 2;
    if (schwarz(ij) * schwarz(kl) > dtol) {
        // decompose triangular ij index into i>=j
        i = sqrt(2 * ij);
        n = (i * i + i) / 2;
        while (n < ij) {
            i++;
            n = (i * i + i) / 2;
        }
        j = ij - (i * i - i) / 2;
        // decompose triangular kl index into k>=l
        k = sqrt(2 * kl);
        n = (k * k + k) / 2;
        while (n < kl) {
            k++;
            n = (k * k + k) / 2;
        }
        l = kl - (k * k - k) / 2;
        eri = 0.0;
        for (ib = 1; ib <= ngauss; ib++) {
            for (jb = 1; jb <= ngauss; jb++) {
                aij = 1.0 / (xpnt[ib] + xpnt[jb]);
                dij = coef[ib] * coef[jb] * exp(-xpnt[ib] * xpnt[jb] * aij * (
                    (geom[0][i] - geom[0][j]) * (geom[0][i] - geom[0][j]) +
                    (geom[1][i] - geom[1][j]) * (geom[1][i] - geom[1][j]) +
                    (geom[2][i] - geom[2][j]) * (geom[2][i] - geom[2][j])
                )) * sqrt(aij);
                if (fabs(dij) > dtol) {
                    xij = aij * (xpnt[ib] * geom[0][i] + xpnt[jb] * geom[0][j]);
                    yij = aij * (xpnt[ib] * geom[1][i] + xpnt[jb] * geom[1][j]);
                    zij = aij * (xpnt[ib] * geom[2][i] + xpnt[jb] * geom[2][j]);
                    for (kb = 1; kb <= ngauss; kb++) {
                        for (lb = 1; lb <= ngauss; lb++) {
                            akl = 1.0 / (xpnt[kb] + xpnt[lb]);
                            dkl = dij * coef[kb] * coef[lb] * exp(-xpnt[kb] * xpnt[lb] * akl * (
                                (geom[0][k] - geom[0][l]) * (geom[0][k] - geom[0][l]) +
                                (geom[1][k] - geom[1][l]) * (geom[1][k] - geom[1][l]) +
                                (geom[2][k] - geom[2][l]) * (geom[2][k] - geom[2][l])
                            )) * sqrt(akl);
                            if (fabs(dkl) > dtol) {
                                aijkl = (xpnt[ib] + xpnt[jb]) * (xpnt[kb] + xpnt[lb]) /
                                    (xpnt[ib] + xpnt[jb] + xpnt[kb] + xpnt[lb]);
                                tt = aijkl * (
                                    (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] * geom[0][l])) * (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] * geom[0][l])) +
                                    (yij - akl * (xpnt[kb] * geom[1][k] + xpnt[lb] * geom[

--------------- Output 9 ---------------
Here is a possible implementation of the Hartree-Fock operation in C with OpenMP:
#include <math.h>
#include <omp.h>

void hartree_fock(int nnnn, double *schwarz, double *xpnt, double *coef, double *geom, double *dens, double *fock) {
    int ijkl, ij, kl, i, j, k, l, ib, jb, kb, lb;
    double aij, dij, xij, yij, zij, akl, dkl, aijkl, tt, f0t, eri;

    #pragma omp parallel do private(ib, jb, kb, lb, ijkl, ij, i, j, kl, k, l, n, aij, dij, xij, yij, zij, akl, dkl, aijkl, tt, f0t, eri)
    for (ijkl = 1; ijkl <= nnnn; ijkl++) {
        // decompose triangular ijkl index into ij>=kl
        ij = sqrt(2 * ijkl);
        int n = (ij * ij + ij) / 2;
        while (n < ijkl) {
            ij++;
            n = (ij * ij + ij) / 2;
        }
        kl = ijkl - (ij * ij - ij) / 2;

        if (schwarz[ij] * schwarz[kl] > dtol) {
            // decompose triangular ij index into i>=j
            i = sqrt(2 * ij);
            n = (i * i + i) / 2;
            while (n < ij) {
                i++;
                n = (i * i + i) / 2;
            }
            j = ij - (i * i - i) / 2;

            // decompose triangular kl index into k>=l
            k = sqrt(2 * kl);
            n = (k * k + k) / 2;
            while (n < kl) {
                k++;
                n = (k * k + k) / 2;
            }
            l = kl - (k * k - k) / 2;

            eri = 0.0;

            for (ib = 1; ib <= ngauss; ib++) {
                for (jb = 1; jb <= ngauss; jb++) {
                    aij = 1.0 / (xpnt[ib] + xpnt[jb]);
                    dij = coef[ib] * coef[jb] * exp(-xpnt[ib] * xpnt[jb] * aij * (
                            (geom[0] * i - geom[0] * j) * (geom[0] * i - geom[0] * j) +
                            (geom[1] * i - geom[1] * j) * (geom[1] * i - geom[1] * j) +
                            (geom[2] * i - geom[2] * j) * (geom[2] * i - geom[2] * j)
                    )) * (aij ** 1.5);

                    if (fabs(dij) > dtol) {
                        xij = aij * (xpnt[ib] * geom[0] * i + xpnt[jb] * geom[0] * j);
                        yij = aij * (xpnt[ib] * geom[1] * i + xpnt[jb] * geom[1] * j);
                        zij = aij * (xpnt[ib] * geom[2] * i + xpnt[jb] * geom[2] * j);

                        for (kb = 1; kb <= ngauss; kb++) {
                            for (lb = 1; lb <= ngauss; lb++) {
                                akl = 1.0 / (xpnt[kb] + xpnt[lb]);
                                dkl = dij * coef[kb] * coef[lb] * exp(-xpnt[kb] * xpnt[lb] * akl * (
                                        (geom[0] * k - geom[0] * l) * (geom[0] * k - geom[0] * l) +
                                        (geom[1] * k - geom[1] * l) * (geom[1] * k - geom[1] * l) +
                                        (geom[2] * k - geom[2] * l) * (geom[2] * k - geom[2] * l)
                                )) * (akl ** 1.5);

                                if (fabs(dkl) > dtol) {
                                    aijkl = (xpnt[ib] + xpnt[jb]) * (xpnt[kb] + xpnt[lb]) /
                                            (

--------------- Output 10 ---------------
Here is the equivalent C code using OpenMP:
#include <math.h>
#include <stdio.h>
#include <omp.h>

// ...

#pragma omp parallel do private(ib, jb, kb, lb, ijkl, ij, i, j, kl, k, l, n, aij, dij, xij, yij, zij, akl, dkl, aijkl, tt, f0t, eri)
for (ijkl = 1; ijkl <= nnnn; ijkl++) {
    // decompose triangular ijkl index into ij>=kl
    ij = sqrt(2 * ijkl);
    n = (ij * ij + ij) / 2;
    while (n < ijkl) {
        ij = ij + 1;
        n = (ij * ij + ij) / 2;
    }
    kl = ijkl - (ij * ij - ij) / 2;
    if (schwarz(ij) * schwarz(kl) > dtol) {
        // decompose triangular ij index into i>=j
        i = sqrt(2 * ij);
        n = (i * i + i) / 2;
        while (n < ij) {
            i = i + 1;
            n = (i * i + i) / 2;
        }
        j = ij - (i * i - i) / 2;
        // decompose triangular kl index into k>=l
        k = sqrt(2 * kl);
        n = (k * k + k) / 2;
        while (n < kl) {
            k = k + 1;
            n = (k * k + k) / 2;
        }
        l = kl - (k * k - k) / 2;
        eri = 0.0;
        for (ib = 1; ib <= ngauss; ib++) {
            for (jb = 1; jb <= ngauss; jb++) {
                aij = 1.0 / (xpnt[ib] + xpnt[jb]);
                dij = coef[ib] * coef[jb] * exp(-xpnt[ib] * xpnt[jb] * aij * (
                    (geom[0][i] - geom[0][j]) * (geom[0][i] - geom[0][j]) +
                    (geom[1][i] - geom[1][j]) * (geom[1][i] - geom[1][j]) +
                    (geom[2][i] - geom[2][j]) * (geom[2][i] - geom[2][j])
                )) * (aij * sqrt(aij));
                if (fabs(dij) > dtol) {
                    xij = aij * (xpnt[ib] * geom[0][i] + xpnt[jb] * geom[0][j]);
                    yij = aij * (xpnt[ib] * geom[1][i] + xpnt[jb] * geom[1][j]);
                    zij = aij * (xpnt[ib] * geom[2][i] + xpnt[jb] * geom[2][j]);
                    for (kb = 1; kb <= ngauss; kb++) {
                        for (lb = 1; lb <= ngauss; lb++) {
                            akl = 1.0 / (xpnt[kb] + xpnt[lb]);
                            dkl = dij * coef[kb] * coef[lb] * exp(-xpnt[kb] * xpnt[lb] * akl * (
                                (geom[0][k] - geom[0][l]) * (geom[0][k] - geom[0][l]) +
                                (geom[1][k] - geom[1][l]) * (geom[1][k] - geom[1][l]) +
                                (geom[2][k] - geom[2][l]) * (geom[2][k] - geom[2][l])
                            )) * (akl * sqrt(akl));
                            if (fabs(dkl) > dtol) {
                                aijkl = (xpnt[ib] + xpnt[jb]) * (xpnt[kb] + xpnt[lb]) /
                                    (xpnt[ib] + xpnt[jb] + xpnt[kb] + xpnt[lb]);
                                tt = aijkl * (
                                    (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] * geom[0][l])) * (xij - akl * (xpnt[kb] * geom[0][k] + xpnt[lb] * geom[0][l])) +
                                    (y

