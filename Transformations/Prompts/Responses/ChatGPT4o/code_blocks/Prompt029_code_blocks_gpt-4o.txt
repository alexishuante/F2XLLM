--------------- Code Block 1 ---------------
__global__ void spmv_kernel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = row[i]; j < row[i + 1]; ++j) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    // Device pointers
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    
    // Allocate memory on the GPU
    hipMalloc((void**)&d_val, nnz * sizeof(float));
    hipMalloc((void**)&d_row, (n + 1) * sizeof(int));
    hipMalloc((void**)&d_col, nnz * sizeof(int));
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));
    
    // Copy data to the GPU
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    
    // Launch the kernel with appropriate block and grid sizes
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;
    hipLaunchKernelGGL(spmv_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    // Copy the result back to the host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    // Free device memory
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 2 ---------------
__global__ void spmv_kernel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0f;
        int row_start = row[i];
        int row_end = row[i + 1];
        for (int j = row_start; j < row_end; ++j) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    // Device arrays
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    // Allocate memory on device
    hipMalloc(&d_val, nnz * sizeof(float));
    hipMalloc(&d_row, (n + 1) * sizeof(int));
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data to device
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    // Define grid and block sizes
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch HIP kernel
    hipLaunchKernelGGL(spmv_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, nnz, d_val, d_row, d_col, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 3 ---------------
__global__ void spmv_kernel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0f;
        for (int j = row[i]; j < row[i + 1]; ++j) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

void spmv_parallel(int n, int nnz, const float *h_val, const int *h_row, const int *h_col, const float *h_x, float *h_y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    // Allocate device memory
    hipMalloc(&d_val, nnz * sizeof(float));
    hipMalloc(&d_row, (n + 1) * sizeof(int));
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data from host to device
    hipMemcpy(d_val, h_val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, h_row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, h_col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, h_x, n * sizeof(float), hipMemcpyHostToDevice);

    // Set grid and block dimensions
    int blockSize = 256;  // You can choose another block size depending on your hardware
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch HIP kernel
    hipLaunchKernelGGL(spmv_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, nnz, d_val, d_row, d_col, d_x, d_y);

    // Copy the result back to host
    hipMemcpy(h_y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 4 ---------------
__global__ void spmv_kernel(const int n, const int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0;
        for (int j = row[i]; j < row[i + 1]; ++j) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

void spmv_parallel(const int n, const int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    // Allocate device memory
    hipMalloc((void**)&d_val, nnz * sizeof(float));
    hipMalloc((void**)&d_row, (n + 1) * sizeof(int));
    hipMalloc((void**)&d_col, nnz * sizeof(int));
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));

    // Copy data to device
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    // Configure and launch the kernel
    int blockSize = 256; // Can be tuned based on specific hardware
    int numBlocks = (n + blockSize - 1) / blockSize;

    hipLaunchKernelGGL(spmv_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, nnz, d_val, d_row, d_col, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 5 ---------------
__global__ void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        float sum = 0.0;
        for (int j = row[i]; j < row[i + 1]; ++j) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

void spmv_parallel_hip(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    // Allocate device memory
    hipMalloc(&d_val, nnz * sizeof(float));
    hipMalloc(&d_row, (n + 1) * sizeof(int));
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data from host to device
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    // Define block and grid sizes
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize; // round up number of blocks

    // Launch the HIP kernel
    hipLaunchKernelGGL(spmv_parallel, dim3(gridSize), dim3(blockSize), 0, 0, n, nnz, d_val, d_row, d_col, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 6 ---------------
__global__ void spmv_kernel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = row[i]; j < row[i + 1]; ++j) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    HIP_CALL(hipMalloc((void**)&d_val, nnz * sizeof(float)));
    HIP_CALL(hipMalloc((void**)&d_row, (n + 1) * sizeof(int)));
    HIP_CALL(hipMalloc((void**)&d_col, nnz * sizeof(int)));
    HIP_CALL(hipMalloc((void**)&d_x, n * sizeof(float)));
    HIP_CALL(hipMalloc((void**)&d_y, n * sizeof(float)));

    HIP_CALL(hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice));
    HIP_CALL(hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice));
    HIP_CALL(hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice));
    HIP_CALL(hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice));

    int gridSize = (n + BLOCK_SIZE - 1) / BLOCK_SIZE;

    hipLaunchKernelGGL(spmv_kernel, dim3(gridSize), dim3(BLOCK_SIZE), 0, 0, n, nnz, d_val, d_row, d_col, d_x, d_y);

    HIP_CALL(hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost));

    HIP_CALL(hipFree(d_val));
    HIP_CALL(hipFree(d_row));
    HIP_CALL(hipFree(d_col));
    HIP_CALL(hipFree(d_x));
    HIP_CALL(hipFree(d_y));
}

--------------- Code Block 7 ---------------
__global__ void spmv_parallel_hip(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y)
{
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = row[i]; j < row[i + 1]; j++) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

void spmv_parallel_hip_launcher(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y)
{
    int *d_row, *d_col;
    float *d_val, *d_x, *d_y;
    
    // Allocate device memory
    hipMalloc((void**)&d_val, nnz * sizeof(float));
    hipMalloc((void**)&d_row, (n + 1) * sizeof(int));
    hipMalloc((void**)&d_col, nnz * sizeof(int));
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));
    
    // Copy data from host to device
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    
    // Define grid and block dimensions
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;
    
    // Launch the kernel
    hipLaunchKernelGGL(spmv_parallel_hip, dim3(gridSize), dim3(blockSize), 0, 0, n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    // Copy the result from device to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    // Free device memory
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 8 ---------------
__global__ void spmv_kernel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = row[i]; j < row[i + 1]; j++) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

void checkHIPError(hipError_t status, const char* msg) {
    if (status != hipSuccess) {
        fprintf(stderr, "Error: %s: %s\n", msg, hipGetErrorString(status));
        exit(status);
    }
}

--------------- Code Block 9 ---------------
__global__ void spmv_kernel(int n, const float* val, const int* row, const int* col, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0f;
        for (int j = row[i]; j < row[i + 1]; j++) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

void spmv_parallel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y) {
    // Device pointers
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    // Allocate device memory
    hipMalloc((void**)&d_val, nnz * sizeof(float));
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));
    hipMalloc((void**)&d_row, (n + 1) * sizeof(int));
    hipMalloc((void**)&d_col, nnz * sizeof(int));

    // Copy data to device
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);

    // Define block and grid sizes
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch kernel
    hipLaunchKernelGGL(spmv_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, d_val, d_row, d_col, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_val);
    hipFree(d_x);
    hipFree(d_y);
    hipFree(d_row);
    hipFree(d_col);
}

--------------- Code Block 10 ---------------
__global__
void spmv_kernel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = row[i]; j < row[i + 1]; j++) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    // Device pointers
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    // Allocate device memory
    hipMalloc(&d_val, nnz * sizeof(float));
    hipMalloc(&d_row, (n + 1) * sizeof(int));
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data to device
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    // Launch the kernel
    hipLaunchKernelGGL(spmv_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, nnz, d_val, d_row, d_col, d_x, d_y);

    // Copy the result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

