--------------- Code Block 1 ---------------
__global__ void saxpy(int n, float a, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

--------------- Code Block 2 ---------------
__global__ void saxpy_hip(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy(int n, float a, float *x, float *y) {
    float *d_x, *d_y;

    // Allocate memory on the device
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));

    // Copy vectors from host to device
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Define the block size and grid size
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    // Launch the SAXPY kernel
    hipLaunchKernelGGL(saxpy_hip, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 3 ---------------
__global__ void saxpy(int n, float a, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy_hip(int n, float a, float* x, float* y) {
    float *d_x, *d_y;

    // Allocate memory on the device
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data from host to device
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Launch the saxpy kernel with sufficient blocks and threads
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    hipLaunchKernelGGL(saxpy, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, d_x, d_y);

    // Copy the result back to the host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 4 ---------------
__global__ void saxpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

--------------- Code Block 5 ---------------
__global__ void saxpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy_hip(int n, float a, float *x, float *y) {
    float *d_x, *d_y;

    // Allocate device memory
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy input data from host to device
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Define the number of blocks and threads per block
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    // Launch the HIP kernel
    hipLaunchKernelGGL(saxpy, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, d_x, d_y);

    // Copy the result back to the host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 6 ---------------
__global__ void saxpy_kernel(int n, float a, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy(int n, float a, const float *x, float *y) {
    float *d_x, *d_y;
    
    // Allocate device memory
    hipMalloc((void **)&d_x, n * sizeof(float));
    hipMalloc((void **)&d_y, n * sizeof(float));
    
    // Copy vectors from host memory to device memory
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Define the block size and grid size
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch kernel
    hipLaunchKernelGGL(saxpy_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, a, d_x, d_y);
    
    // Copy the result vector from device memory to host memory
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 7 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy(int n, float a, float *x, float *y) {
    // Define device pointers
    float *d_x, *d_y;
    
    // Allocate memory on the device
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));

    // Copy data from host to device
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Define the block size and number of blocks
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    // Launch the saxpy kernel
    hipLaunchKernelGGL(saxpy_kernel, numBlocks, blockSize, 0, 0, n, a, d_x, d_y);
    
    // Copy the result back from device to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 8 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy(int n, float a, float *x, float *y) {
    float *d_x, *d_y;
    size_t size = n * sizeof(float);
    
    // Allocate memory on the device
    hipMalloc((void**)&d_x, size);
    hipMalloc((void**)&d_y, size);
    
    // Copy data from host to device
    hipMemcpy(d_x, x, size, hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, size, hipMemcpyHostToDevice);
    
    // Set up execution configuration
    int blockSize = 256; // Define the number of threads per block
    int numBlocks = (n + blockSize - 1) / blockSize; // Calculate the number of blocks needed

    // Launch the saxpy kernel
    hipLaunchKernelGGL(saxpy_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, d_x, d_y);

    // Wait for the kernel to finish
    hipDeviceSynchronize();
    
    // Copy the result from device to host
    hipMemcpy(y, d_y, size, hipMemcpyDeviceToHost);
    
    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 9 ---------------
__global__ void saxpy_kernel(int n, float a, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy(int n, float a, const float *x, float *y) {
    // Declare device pointers
    float *d_x, *d_y;

    // Allocate memory on the GPU
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));

    // Copy the input arrays from the host to the device
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Determine the block and grid sizes
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch the kernel
    hipLaunchKernelGGL(saxpy_kernel, gridSize, blockSize, 0, 0, n, a, d_x, d_y);

    // Copy the result back to the host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 10 ---------------
__global__ void saxpy_hip_kernel(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy_hip(int n, float a, float *x, float *y) {
    float *d_x, *d_y;

    // Allocate device memory
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data from host to device
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Define the number of threads per block and number of blocks
    int threads_per_block = 256;
    int number_of_blocks = (n + threads_per_block - 1) / threads_per_block;

    // Launch the HIP kernel
    hipLaunchKernelGGL(saxpy_hip_kernel, dim3(number_of_blocks), dim3(threads_per_block), 0, 0, n, a, d_x, d_y);

    // Copy result from device to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

