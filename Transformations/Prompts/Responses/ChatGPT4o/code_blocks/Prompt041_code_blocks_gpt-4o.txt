--------------- Code Block 1 ---------------
void saxpy_parallel(const int n, const float a, Kokkos::View<const float*> x, Kokkos::View<float*> y) {
    // Kokkos parallel for loop
    Kokkos::parallel_for("saxpy", Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(const int i) {
        y(i) = a * x(i) + y(i);
    });
}

--------------- Code Block 2 ---------------
void saxpy_parallel(int n, float a, const float* x, float* y) {
    // Create Kokkos views from raw pointers
    Kokkos::View<const float*> x_view(x, n);
    Kokkos::View<float*> y_view(y, n);

    Kokkos::parallel_for("SAXPY", n, KOKKOS_LAMBDA(int i) {
        y_view(i) = a * x_view(i) + y_view(i);
    });
}

--------------- Code Block 3 ---------------
void saxpy_parallel(int n, float a, Kokkos::View<float*> x, Kokkos::View<float*> y) {
    // Parallel_for with Kokkos to perform the AXPY operation
    Kokkos::parallel_for("axpy", n, KOKKOS_LAMBDA(int i) {
        y(i) = a * x(i) + y(i);
    });
}

--------------- Code Block 4 ---------------
void axpy_parallel(int n, float a, const Kokkos::View<float*> x, Kokkos::View<float*> y) {
    Kokkos::parallel_for("AXPY", Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(int i) {
        y(i) = a * x(i) + y(i);
    });
}

--------------- Code Block 5 ---------------
void saxpy_parallel(int n, float a, const float *x, float *y) {
    // Define a Kokkos parallel loop, similar to the OpenMP parallel do directive
    Kokkos::parallel_for("saxpy", n, KOKKOS_LAMBDA(int i) {
        y[i] = a * x[i] + y[i];
    });
}

--------------- Code Block 6 ---------------
void saxpy_parallel(int n, float a, Kokkos::View<float*> x, Kokkos::View<float*> y) {
    Kokkos::parallel_for("saxpy_parallel", n, KOKKOS_LAMBDA(const int i) {
        y(i) = a * x(i) + y(i);
    });
}

--------------- Code Block 7 ---------------
void saxpy_parallel(int n, float a, Kokkos::View<const float*> x, Kokkos::View<float*> y) {
    Kokkos::parallel_for("saxpy", n, KOKKOS_LAMBDA(int i) {
        y(i) = a * x(i) + y(i);
    });
}

--------------- Code Block 8 ---------------
void saxpy_parallel(int n, float a, const float* x, float* y) {
    // Create Kokkos views from raw pointers
    Kokkos::View<const float*> d_x(x, n);
    Kokkos::View<float*> d_y(y, n);

    // Run the parallel loop using Kokkos
    Kokkos::parallel_for("SaxpyParallel", n, SaxpyFunctor(a, d_x, d_y));
}

--------------- Code Block 9 ---------------
void saxpy_parallel(const int n, const float a, const Kokkos::View<const float *> x, Kokkos::View<float *> y) {
    // Parallel loop using Kokkos
    Kokkos::parallel_for("saxpy_parallel", n, KOKKOS_LAMBDA(const int i) {
        y(i) = a * x(i) + y(i);
    });
}

--------------- Code Block 10 ---------------
void saxpy_parallel(int n, float a, const float *x_data, float *y_data) {
    // Initialize Kokkos
    Kokkos::initialize();

    // Create Kokkos Views (arrays) to wrap the input data
    Kokkos::View<const float*> x(x_data, n);
    Kokkos::View<float*> y(y_data, n);

    // Launch the kernel using a parallel_for construct
    Kokkos::parallel_for("SAXPY", n, SaxpyFunctor(n, a, x, y));

    // Finalize Kokkos
    Kokkos::finalize();
}

