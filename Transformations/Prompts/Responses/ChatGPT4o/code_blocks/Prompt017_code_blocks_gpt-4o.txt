--------------- Code Block 1 ---------------
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copy(u[0:n][0:n][0:n]) create(unew[0:n][0:n][0:n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k) present(u, unew)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3) private(i, j, k) present(u, unew)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

--------------- Code Block 2 ---------------
void jacobi_parallel(int n, int niter, double ***u, double ***unew) {
    int i, j, k, iter;

    #pragma acc data copyin(u[:n][:n][:n]), create(unew[:n][:n][:n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                  u[i][j-1][k] + u[i][j+1][k] +
                                                  u[i][j][k-1] + u[i][j][k+1] +
                                                  u[i][j][k]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

--------------- Code Block 3 ---------------
void jacobi_parallel(double* u, double* unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma acc data copy(u[0:n*n*n]), create(unew[0:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) num_gangs(nthreads)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (
                            u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                            u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                            u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                            u[i + j*n + k*n*n]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3) num_gangs(nthreads)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                    }
                }
            }
        }
    }
}

--------------- Code Block 4 ---------------
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + n * (j + n * k)] = 0.125 * (
                            u[(i - 1) + n * (j + n * k)] +
                            u[(i + 1) + n * (j + n * k)] +
                            u[i + n * ((j - 1) + n * k)] +
                            u[i + n * ((j + 1) + n * k)] +
                            u[i + n * (j + n * (k - 1))] +
                            u[i + n * (j + n * (k + 1))] +
                            u[i + n * (j + n * k)]
                        );
                    }
                }
            }

            // Swap pointers for the next iteration
            double *temp = u;
            u = unew;
            unew = temp;
        }
    }
}

--------------- Code Block 5 ---------------
void jacobi_parallel(double*** u, double*** unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    // OpenACC parallel region
    #pragma acc parallel loop num_gangs(nthreads) private(i, j, k, iter)
    for (iter = 0; iter < niter; iter++) {
        // Loop over the inner part of the 3D array
        #pragma acc loop gang
        for (k = 1; k < n - 1; k++) {
            #pragma acc loop worker
            for (j = 1; j < n - 1; j++) {
                #pragma acc loop vector
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                             u[i][j-1][k] + u[i][j+1][k] + 
                                             u[i][j][k-1] + u[i][j][k+1] + 
                                             u[i][j][k]);
                }
            }
        }
        // Synchronize the threads
        #pragma acc update self(unew[0:n][0:n][0:n])
        #pragma acc update device(u[0:n][0:n][0:n] = unew[0:n][0:n][0:n])
    }
}

--------------- Code Block 6 ---------------
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copy(u[0:n][0:n][0:n]) create(unew[0:n][0:n][0:n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                                 u[i][j-1][k] + u[i][j+1][k] + 
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }

            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

--------------- Code Block 7 ---------------
void allocate_3d_array(double ****array, int n) {
    int i, j;
    *array = (double***)malloc(n * sizeof(double**));
    for (i = 0; i < n; ++i) {
        (*array)[i] = (double**)malloc(n * sizeof(double*));
        for (j = 0; j < n; ++j) {
            (*array)[i][j] = (double*)malloc(n * sizeof(double));
        }
    }
}

--------------- Code Block 8 ---------------
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;
   
    #pragma acc data copyin(u[0:n*n*n]), copy(unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) gang vector
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i*n*n + j*n + k] = 0.125 * (
                            u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] +
                            u[i*n*n + (j-1)*n + k] + u[i*n*n + (j+1)*n + k] +
                            u[i*n*n + j*n + (k-1)] + u[i*n*n + j*n + (k+1)] +
                            u[i*n*n + j*n + k]);
                    }
                }
            }

            #pragma acc parallel loop collapse(3) gang vector
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i*n*n + j*n + k] = unew[i*n*n + j*n + k];
                    }
                }
            }
            #pragma acc update self(u[0:n*n*n])
        }
    }
}

--------------- Code Block 9 ---------------
void jacobi_parallel(int n, int niter, double* u, double* unew) {
    int i, j, k, iter;
    
    // Start the Jacobi iterations
    for (iter = 1; iter <= niter; iter++) {
        // Parallelize the nested loops using OpenACC
        #pragma acc parallel loop collapse(3) private(i, j, k) present(u[0:n*n*n], unew[0:n*n*n])
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (
                        u[(i-1) + (j) * n + (k) * n * n] +
                        u[(i+1) + (j) * n + (k) * n * n] +
                        u[(i) + (j-1) * n + (k) * n * n] +
                        u[(i) + (j+1) * n + (k) * n * n] +
                        u[(i) + (j) * n + (k-1) * n * n] +
                        u[(i) + (j) * n + (k+1) * n * n] +
                        u[(i) + (j) * n + (k) * n * n]
                    );
                }
            }
        }

        // Synchronize and copy unew to u for the next iteration
        #pragma acc parallel loop collapse(3) present(u[0:n*n*n], unew[0:n*n*n])
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                }
            }
        }
    }
}

--------------- Code Block 10 ---------------
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    // Initialize the OpenACC environment
    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            // Perform the Jacobi update in parallel
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i + n*(j + n*k)] = 0.125 * (u[(i-1) + n*(j + n*k)] + u[(i+1) + n*(j + n*k)] +
                                                        u[i + n*((j-1) + n*k)] + u[i + n*((j+1) + n*k)] +
                                                        u[i + n*(j + n*(k-1))] + u[i + n*(j + n*(k+1))] +
                                                        u[i + n*(j + n*k)]);
                    }
                }
            }
            
            // Synchronize devices
            #pragma acc update self(u[0:n*n*n])
            
            // Copy the new values back to the original array
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + n*(j + n*k)] = unew[i + n*(j + n*k)];
                    }
                }
            }
        }
    }
}

