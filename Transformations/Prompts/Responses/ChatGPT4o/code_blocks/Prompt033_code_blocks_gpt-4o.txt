--------------- Code Block 1 ---------------
__global__ void gemv_kernel(int n, const float *A, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, const float *h_A, const float *h_x, float *h_y) {
    float *d_A, *d_x, *d_y;

    // Allocate device memory
    cudaMalloc((void**)&d_A, n * n * sizeof(float));
    cudaMalloc((void**)&d_x, n * sizeof(float));
    cudaMalloc((void**)&d_y, n * sizeof(float));

    // Copy data from host to device
    cudaMemcpy(d_A, h_A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, h_x, n * sizeof(float), cudaMemcpyHostToDevice);

    // Define thread block size and grid size
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch the kernel
    gemv_kernel<<<gridSize, blockSize>>>(n, d_A, d_x, d_y);

    // Copy result back to host
    cudaMemcpy(h_y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

--------------- Code Block 2 ---------------
__global__ void gemv_kernel(int n, const float *A, const float *x, float *y) {
    // Calculate the global thread index
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        float sum = 0.0f;
        // Perform the dot product of row i of A and vector x
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, const float *A, const float *x, float *y) {
    // Pointers for device memory
    float *d_A, *d_x, *d_y;

    // Allocate device memory
    cudaMalloc((void**)&d_A, n * n * sizeof(float));
    cudaMalloc((void**)&d_x, n * sizeof(float));
    cudaMalloc((void**)&d_y, n * sizeof(float));

    // Copy data from host to device
    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    // Define grid and block sizes
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    // Launch the GEMV kernel
    gemv_kernel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);

    // Wait for the GPU to finish
    cudaDeviceSynchronize();

    // Copy the result from device to host
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

--------------- Code Block 3 ---------------
__global__ void gemv_kernel(int n, const float* A, const float* x, float* y) {
    // Calculate the global thread ID
    int i = blockDim.x * blockIdx.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, const float* A, const float* x, float* y) {
    // Device pointers
    float *d_A, *d_x, *d_y;

    // Allocate device memory
    cudaMalloc((void**)&d_A, n * n * sizeof(float));
    cudaMalloc((void**)&d_x, n * sizeof(float));
    cudaMalloc((void**)&d_y, n * sizeof(float));
    
    // Copy data to device
    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);
    
    // Define the number of threads per block and number of blocks
    int blockSize = 256; // This can be tuned
    int numBlocks = (n + blockSize - 1) / blockSize;

    // Launch kernel
    gemv_kernel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);

    // Copy result back to host
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

--------------- Code Block 4 ---------------
__global__ void gemv_kernel(int n, const float *A, const float *x, float *y) {
    int row = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[row * n + j] * x[j];
        }
        y[row] = sum;
    }
}

void gemv_parallel(int n, const float *A, const float *x, float *y) {
    float *d_A = NULL;
    float *d_x = NULL;
    float *d_y = NULL;

    cudaMalloc((void**)&d_A, n * n * sizeof(float));
    cudaMalloc((void**)&d_x, n * sizeof(float));
    cudaMalloc((void**)&d_y, n * sizeof(float));

    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);
    
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    gemv_kernel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);

    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

--------------- Code Block 5 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *h_A, float *h_x, float *h_y) {
    float *d_A, *d_x, *d_y;
    
    // Allocate device memory
    cudaMalloc((void**)&d_A, n * n * sizeof(float));
    cudaMalloc((void**)&d_x, n * sizeof(float));
    cudaMalloc((void**)&d_y, n * sizeof(float));
    
    // Copy data from host to device
    cudaMemcpy(d_A, h_A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, h_x, n * sizeof(float), cudaMemcpyHostToDevice);
    
    // Launch kernel
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;  // Round up division
    gemv_kernel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);
    
    // Check for kernel launch errors
    cudaError_t error = cudaGetLastError();
    if (error != cudaSuccess) {
        fprintf(stderr, "CUDA error: %s\n", cudaGetErrorString(error));
    }
    
    // Copy result from device to host
    cudaMemcpy(h_y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);
    
    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

--------------- Code Block 6 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;

    // Allocate device memory
    cudaMalloc((void **)&d_A, n * n * sizeof(float));
    cudaMalloc((void **)&d_x, n * sizeof(float));
    cudaMalloc((void **)&d_y, n * sizeof(float));

    // Copy data from host to device
    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    // Launch the kernel with grid and block configuration
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;
    gemv_kernel<<<gridSize, blockSize>>>(n, d_A, d_x, d_y);

    // Copy result from device to host
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

--------------- Code Block 7 ---------------
__global__
void gemv_kernel(int n, const float* A, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, const float* A, const float* x, float* y) {
    float *d_A, *d_x, *d_y;
    size_t size_matrix = n * n * sizeof(float);
    size_t size_vector = n * sizeof(float);

    // Allocate device memory
    cudaMalloc((void**)&d_A, size_matrix);
    cudaMalloc((void**)&d_x, size_vector);
    cudaMalloc((void**)&d_y, size_vector);

    // Copy data from host to device
    cudaMemcpy(d_A, A, size_matrix, cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, size_vector, cudaMemcpyHostToDevice);

    // Determine block size and grid size
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch the kernel
    gemv_kernel<<<gridSize, blockSize>>>(n, d_A, d_x, d_y);

    // Copy the result back to host
    cudaMemcpy(y, d_y, size_vector, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

--------------- Code Block 8 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    size_t size_matrix = n * n * sizeof(float);
    size_t size_vector = n * sizeof(float);

    // Allocate device memory
    cudaMalloc((void**)&d_A, size_matrix);
    cudaMalloc((void**)&d_x, size_vector);
    cudaMalloc((void**)&d_y, size_vector);

    // Copy data to the device
    cudaMemcpy(d_A, A, size_matrix, cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, size_vector, cudaMemcpyHostToDevice);

    // Define grid and block dimensions
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch kernel
    gemv_kernel<<<gridSize, blockSize>>>(n, d_A, d_x, d_y);

    // Copy result back to the host
    cudaMemcpy(y, d_y, size_vector, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

--------------- Code Block 9 ---------------
__global__ void gemv_kernel(int n, const float *A, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, const float *A, const float *x, float *y) {
    float *d_A, *d_x, *d_y;

    // Allocate memory on the GPU
    cudaMalloc((void **)&d_A, n * n * sizeof(float));
    cudaMalloc((void **)&d_x, n * sizeof(float));
    cudaMalloc((void **)&d_y, n * sizeof(float));

    // Copy data from host to device
    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    // Calculate grid and block dimensions
    int threadsPerBlock = 256;
    int blocksPerGrid = (n + threadsPerBlock - 1) / threadsPerBlock;

    // Launch the kernel
    gemv_kernel<<<blocksPerGrid, threadsPerBlock>>>(n, d_A, d_x, d_y);

    // Copy the result back to the host
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    // Free memory on the GPU
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

--------------- Code Block 10 ---------------
__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float* A, float* x, float* y) {
    float *d_A, *d_x, *d_y;

    // Allocate Device Memory
    cudaMalloc(&d_A, n * n * sizeof(float));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));

    // Copy Data from Host to Device
    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    // Kernel launch parameters
    int threadsPerBlock = 256;
    int blocksPerGrid = (n + threadsPerBlock - 1) / threadsPerBlock;

    // Launch Kernel
    gemv_kernel<<<blocksPerGrid, threadsPerBlock>>>(n, d_A, d_x, d_y);

    // Copy Result from Device to Host
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    // Free Device Memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

