--------------- Code Block 1 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    // Parallelize the outer loop using OpenACC
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0;

        for (int j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 2 ---------------
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    // Specify that this loop should be parallelized with OpenACC
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 3 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, 
                   const int *col, const float *x, float *y) 
{
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0f;

        #pragma acc loop seq
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 4 ---------------
void spmv_parallel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y) {
    #pragma acc parallel loop copyin(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 5 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    
    // Apply appropriate OpenACC directives for parallelization.
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0;
        
        #pragma acc loop reduction(+:y[i])
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 6 ---------------
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    // Initialize result vector y to zero before parallel region
    for(int i = 0; i < n; i++) {
        y[i] = 0.0f;
    }

    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n], y[0:n])
    for (int i = 0; i < n; i++) {
        // Initialize the y element in the parallel region
        float sum = 0.0f;
        #pragma acc loop reduction(+:sum)
        for (int j = row[i]; j < row[i+1]; j++) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    }
}

--------------- Code Block 7 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 8 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n], y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0f;
        #pragma acc loop
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 9 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i, j;

    // Using OpenACC to parallelize the loop
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) create(y[0:n])
    for (i = 0; i < n; ++i) {
        y[i] = 0.0;
        for (j = row[i]; j < row[i+1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 10 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    // OpenACC Parallel Region
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

