--------------- Code Block 1 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i * n * n + j * n + k] = 0.125 * (
            u[(i-1) * n * n + j * n + k] +
            u[(i+1) * n * n + j * n + k] +
            u[i * n * n + (j-1) * n + k] +
            u[i * n * n + (j+1) * n + k] +
            u[i * n * n + j * n + (k-1)] +
            u[i * n * n + j * n + (k+1)] +
            u[i * n * n + j * n + k]
        );
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; ++iter) {
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaDeviceSynchronize();

        // Swap the buffers
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 2 ---------------
__global__ void jacobi_kernel(double* d_u, double* d_unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = IDX(i, j, k, n);
        d_unew[idx] = 0.125 * (
            d_u[IDX(i-1, j, k, n)] +
            d_u[IDX(i+1, j, k, n)] +
            d_u[IDX(i, j-1, k, n)] +
            d_u[IDX(i, j+1, k, n)] +
            d_u[IDX(i, j, k-1, n)] +
            d_u[IDX(i, j, k+1, n)] +
            d_u[idx]
        );
    }
}

extern "C" void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double* d_u;
    double* d_unew;
    size_t size = n * n * n * sizeof(double);

    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n+threadsPerBlock.x-2)/(threadsPerBlock.x),
                   (n+threadsPerBlock.y-2)/(threadsPerBlock.y),
                   (n+threadsPerBlock.z-2)/(threadsPerBlock.z));

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 3 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1; // Avoid the boundary (i = 0, n-1)
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1; // Avoid the boundary (j = 0, n-1)
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1; // Avoid the boundary (k = 0, n-1)

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[IDX(i, j, k, n)] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)]
                                         + u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)]
                                         + u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)]
                                         + u[IDX(i, j, k, n)]);
    }
}

extern "C" void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;

    // Allocate device memory
    cudaMalloc((void**)&d_u, n * n * n * sizeof(double));
    cudaMalloc((void**)&d_unew, n * n * n * sizeof(double));

    // Copy data from host to device
    cudaMemcpy(d_u, u, n * n * n * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, n * n * n * sizeof(double), cudaMemcpyHostToDevice);

    // Define grid and block dimensions
    dim3 threadsPerBlock(8, 8, 8); // Adjust as needed for your GPU
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    // Perform Jacobi iterations
    for (int iter = 0; iter < niter; ++iter) {
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaDeviceSynchronize();

        // Swap pointers
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy result back to host
    cudaMemcpy(u, d_u, n * n * n * sizeof(double), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 4 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] + 
                             u[idx - n] + u[idx + n] + 
                             u[idx - n * n] + u[idx + n * n] + 
                             u[idx]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    size_t size = n * n * n * sizeof(double);
    
    // Allocate device memory
    double *d_u, *d_unew;
    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    // Copy input data to device
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, size, cudaMemcpyHostToDevice);

    // Define block and grid sizes
    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; ++iter) {
        // Launch kernel
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        
        // Swap the arrays
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy the result back to the host
    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 5 ---------------
__global__ void jacobiKernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i * n * n + j * n + k] = 0.125 * (
            u[(i-1) * n * n + j * n + k] + 
            u[(i+1) * n * n + j * n + k] + 
            u[i * n * n + (j-1) * n + k] + 
            u[i * n * n + (j+1) * n + k] + 
            u[i * n * n + j * n + (k-1)] + 
            u[i * n * n + j * n + (k+1)] + 
            u[i * n * n + j * n + k]
        );
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int size = n * n * n * sizeof(double);
    double *d_u, *d_unew;

    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, size, cudaMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x,
                  (n + blockSize.y - 1) / blockSize.y,
                  (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; ++iter) {
        jacobiKernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaDeviceSynchronize();

        // Swap pointers for next iteration
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy the final result back to host
    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 6 ---------------
__global__ void jacobiKernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        unew[(i * n + j) * n + k] = 0.125 * (
            u[((i-1) * n + j) * n + k] + u[((i+1) * n + j) * n + k] +
            u[(i * n + (j-1)) * n + k] + u[(i * n + (j+1)) * n + k] + 
            u[(i * n + j) * n + (k-1)] + u[(i * n + j) * n + (k+1)] +
            u[(i * n + j) * n + k]
        );
    }
}

void jacobi_parallel(double *h_u, double *h_unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = sizeof(double) * n * n * n;

    // Allocate device memory
    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);

    // Copy data from host to device
    cudaMemcpy(d_u, h_u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, h_unew, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n+threadsPerBlock.x-1) / threadsPerBlock.x,
                   (n+threadsPerBlock.y-1) / threadsPerBlock.y,
                   (n+threadsPerBlock.z-1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; ++iter) {
        // Launch the kernel
        jacobiKernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);

        // Synchronize before updating u with unew
        cudaDeviceSynchronize();

        // Copy unew to u for the next iteration
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    // Copy the result back to the host
    cudaMemcpy(h_u, d_u, size, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 7 ---------------
__global__ void jacobiKernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int idx = i + n * j + n * n * k;
        unew[idx] = 0.125 * (u[(i-1) + n * j + n * n * k] +
                             u[(i+1) + n * j + n * n * k] +
                             u[i + n * (j-1) + n * n * k] +
                             u[i + n * (j+1) + n * n * k] +
                             u[i + n * j + n * n * (k-1)] +
                             u[i + n * j + n * n * (k+1)] +
                             u[i + n * j + n * n * k]);
    }
}

void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, size, cudaMemcpyHostToDevice);

    dim3 blockDim(8, 8, 8);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x, (n + blockDim.y - 1) / blockDim.y, (n + blockDim.z - 1) / blockDim.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobiKernel<<<gridDim, blockDim>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    cudaMemcpy(u, d_unew, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 8 ---------------
__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int idx = i + n * (j + n * k);
        unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] +
                             u[idx - n] + u[idx + n] +
                             u[idx - n * n] + u[idx + n * n] +
                             u[idx]);
    }
}

extern "C" void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 9 ---------------
__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        int idx = i * n * n + j * n + k;
        int idx_im1 = (i-1) * n * n + j * n + k;
        int idx_ip1 = (i+1) * n * n + j * n + k;
        int idx_jm1 = i * n * n + (j-1) * n + k;
        int idx_jp1 = i * n * n + (j+1) * n + k;
        int idx_km1 = i * n * n + j * n + (k-1);
        int idx_kp1 = i * n * n + j * n + (k+1);

        unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] + u[idx_jm1] + u[idx_jp1] + u[idx_km1] + u[idx_kp1] + u[idx]); 
    }
}

extern "C" void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double* d_u;
    double* d_unew;

    size_t size = n * n * n * sizeof(double);
    
    // Allocate memory on device
    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);

    // Copy the input arrays to device
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8); // Define the appropriate block size depending on hardware
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice); // Copy updated values
    }

    // Copy the result back to host
    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 10 ---------------
__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i + n * (j + n * k)] = 0.125 * (
            u[(i-1) + n * (j + n * k)] +
            u[(i+1) + n * (j + n * k)] +
            u[i + n * ((j-1) + n * k)] +
            u[i + n * ((j+1) + n * k)] +
            u[i + n * (j + n * (k-1))] +
            u[i + n * (j + n * (k+1))] +
            u[i + n * (j + n * k)]
        );
    }
}

extern "C"
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    // Allocate device memory
    double* d_u;
    double* d_unew;
    size_t size = n * n * n * sizeof(double);
    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);

    // Copy data to device memory
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, size, cudaMemcpyHostToDevice);

    // Configure the grid and block dimensions
    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y, 
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; ++iter) {
        // Launch kernel
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);

        // Synchronize threads
        cudaDeviceSynchronize();

        // Swap pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy result back to host memory
    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_u);
    cudaFree(d_unew);
}

