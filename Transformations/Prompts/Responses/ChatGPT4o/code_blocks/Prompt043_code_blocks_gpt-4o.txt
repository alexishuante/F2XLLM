--------------- Code Block 1 ---------------
void gemv_parallel(const int n, const Kokkos::View<double**> &A, const Kokkos::View<double*> &x, Kokkos::View<double*> &y) {
    // Initialize Kokkos
    Kokkos::initialize();

    // Define the parallel_for to perform GEMV
    Kokkos::parallel_for("gemv_parallel", Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });

    // Finalize Kokkos
    Kokkos::finalize();
}

--------------- Code Block 2 ---------------
void gemv_parallel(int n, const Kokkos::View<const float**> A, 
                   const Kokkos::View<const float*> x, 
                   Kokkos::View<float*> y) {
    
    Kokkos::parallel_for("gemv", Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(int i) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
}

--------------- Code Block 3 ---------------
void gemv_parallel(int n, const Kokkos::View<double**> &A, const Kokkos::View<double*> &x, Kokkos::View<double*> &y) {
    // Kokkos parallel loop
    Kokkos::parallel_for("gemv_parallel", Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
}

--------------- Code Block 4 ---------------
void gemv_parallel(int n, const Matrix& A, const Vector& x, Vector& y) {
  // Perform the Generalized Matrix-Vector (GEMV) multiplication in parallel
  Kokkos::parallel_for("GEMV", n, KOKKOS_LAMBDA(const int i) {
    double sum = 0.0;
    for (int j = 0; j < n; ++j) {
      sum += A(i, j) * x(j);
    }
    y(i) = sum;
  });
}

--------------- Code Block 5 ---------------
void gemv_parallel(const int n, const Kokkos::View<double**>& A, const Kokkos::View<double*>& x, Kokkos::View<double*>& y) {
    // Parallelize the operation using Kokkos
    Kokkos::parallel_for("gemv_parallel", Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
}

--------------- Code Block 6 ---------------
void gemv_parallel(const int n, const Kokkos::View<float**>& A, const Kokkos::View<float*>& x, Kokkos::View<float*>& y) {
    // Parallel for loop using Kokkos
    Kokkos::parallel_for("GEMV", Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(const int i) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
}

--------------- Code Block 7 ---------------
void gemv_parallel(int n, const Kokkos::View<double**> &A, const Kokkos::View<double*> &x, Kokkos::View<double*> &y) {
    // Define a parallel policy, using Kokkos' default execution space.
    Kokkos::parallel_for("gemv_parallel", Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });

    // Synchronize to ensure the kernel completes before proceeding.
    Kokkos::fence();
}

--------------- Code Block 8 ---------------
void gemv_parallel(const int n, const Kokkos::View<double**> A, const Kokkos::View<double*> x, Kokkos::View<double*> y) {

    // Parallelize this loop using Kokkos
    Kokkos::parallel_for("gemv", n, KOKKOS_LAMBDA(const int i) {
        double sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
}

--------------- Code Block 9 ---------------
void gemv_parallel(int n, const ViewType& A, const ViewType& x, ViewType& y) {
    // Ensure the input views have the correct dimensions
    assert(A.extent(0) == n && A.extent(1) == n);
    assert(x.extent(0) == n);
    assert(y.extent(0) == n);

    // Perform the matrix-vector multiplication
    Kokkos::parallel_for("gemv_parallel", Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(int i) {
        typename ViewType::value_type sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
}

--------------- Code Block 10 ---------------
void gemv_parallel(int n, const Kokkos::View<double**> &A, const Kokkos::View<double*> &x, Kokkos::View<double*> &y) {
    // Ensure Kokkos is initialized
    Kokkos::initialize();

    {
        // Create a Kokkos parallel-for loop to perform GEMV operation
        Kokkos::parallel_for("GEMV", n, KOKKOS_LAMBDA(int i) {
            double sum = 0.0;
            for (int j = 0; j < n; ++j) {
                sum += A(i,j) * x(j);
            }
            y(i) = sum;
        });
    }

    // Finalize Kokkos
    Kokkos::finalize();
}

