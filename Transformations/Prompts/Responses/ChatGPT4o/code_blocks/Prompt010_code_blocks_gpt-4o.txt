--------------- Code Block 1 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i, j;

    // Parallel region with OpenMP
    #pragma omp parallel for private(i, j)
    for (i = 0; i < n; i++) {
        y[i] = 0.0f;
        for (j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 2 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i, j;

    // Parallelize the outer loop using OpenMP
    #pragma omp parallel for default(none) shared(val, row, col, x, y, n) private(i, j)
    for (i = 0; i < n; i++) {
        y[i] = 0.0;
        for (j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 3 ---------------
void spmv_parallel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y) {
    int i, j;

    #pragma omp parallel for private(j) shared(val, row, col, x, y)
    for (i = 0; i < n; i++) {
        y[i] = 0.0;
        for (j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 4 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i, j;
    
    #pragma omp parallel for private(i, j) shared(val, row, col, x, y)
    for (i = 0; i < n; i++) {
        y[i] = 0.0;
        for (j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 5 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i, j;

    // Initialize the result vector y with 0
    #pragma omp parallel for
    for (i = 0; i < n; i++) {
        y[i] = 0.0;
    }

    // Perform the matrix-vector multiplication in parallel
    #pragma omp parallel for private(j)
    for (i = 0; i < n; i++) {
        for (j = row[i]; j < row[i + 1]; j++) {
            #pragma omp atomic
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 6 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    // Parallelize the outer loop with OpenMP
    #pragma omp parallel for
    for (int i = 0; i < n; ++i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i + 1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 7 ---------------
void spmv_parallel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y) {
    // Parallelize the outer loop using OpenMP
    #pragma omp parallel for
    for (int i = 0; i < n; ++i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 8 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i, j;

    // Initialize the result vector y to zero
    #pragma omp parallel for
    for (i = 0; i < n; ++i) {
        y[i] = 0.0f;
    }

    // Sparse matrix-vector multiplication
    #pragma omp parallel for private(j)
    for (i = 0; i < n; ++i) {
        for (j = row[i]; j < row[i + 1]; ++j) {
            #pragma omp atomic
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 9 ---------------
void spmv_parallel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y) {
    int i, j;

    #pragma omp parallel for default(none) shared(n, row, val, col, x, y) private(i, j)
    for (i = 0; i < n; i++) {
        y[i] = 0.0;
        for (j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

--------------- Code Block 10 ---------------
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        y[i] = 0.0f;  // Initialize the result vector element to zero
        for (int j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];  // Perform the SpMV operation
        }
    }
}

