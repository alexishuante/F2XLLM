--------------- Code Block 1 ---------------
__global__ void gemv_kernel(int n, const float* A, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, const float* A, const float* x, float* y) {
    float *d_A, *d_x, *d_y;

    // Allocate device memory
    hipMalloc((void**)&d_A, n * n * sizeof(float));
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));

    // Copy data to device
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    // Define block and grid sizes
    const int blockSize = 256;
    const int gridSize = (n + blockSize - 1) / blockSize;

    // Launch HIP kernel
    hipLaunchKernelGGL(gemv_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 2 ---------------
__global__ void gemv_kernel(int n, const float* A, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        // Compute the dot product of row i of A with vector x
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, const float* A, const float* x, float* y) {
    float *d_A, *d_x, *d_y;
    size_t size_A = n * n * sizeof(float);
    size_t size_x = n * sizeof(float);
    size_t size_y = n * sizeof(float);

    // Allocate device memory
    hipMalloc(&d_A, size_A);
    hipMalloc(&d_x, size_x);
    hipMalloc(&d_y, size_y);

    // Copy host memory to device
    hipMemcpy(d_A, A, size_A, hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, size_x, hipMemcpyHostToDevice);

    // Launch kernel
    int numBlocks = (n + THREADS_PER_BLOCK - 1) / THREADS_PER_BLOCK;
    hipLaunchKernelGGL(gemv_kernel, dim3(numBlocks), dim3(THREADS_PER_BLOCK), 0, 0, n, d_A, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, size_y, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 3 ---------------
__global__ void gemvKernel(int n, const float* A, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemvParallelHIP(int n, const float* A, const float* x, float* y) {
    // Device pointers
    float *d_A, *d_x, *d_y;

    // Allocate memory on the GPU
    hipMalloc((void**)&d_A, n * n * sizeof(float));
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));

    // Copy data to the GPU
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    // Launch the kernel
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;
    hipLaunchKernelGGL(gemvKernel, dim3(gridSize), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    // Copy the result from the GPU
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free GPU memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 4 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x; // Compute the row index

    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j]; // Multiply and accumulate
        }
        y[i] = sum; // Store the result in y
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;

    // Allocate device memory
    hipMalloc((void**)&d_A, n * n * sizeof(float));
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));

    // Copy data from host to device
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    // Define block size and grid size
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch the kernel
    hipLaunchKernelGGL(gemv_kernel, dim3(gridSize), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    // Copy the result back to the host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 5 ---------------
__global__ void gemv_kernel(int n, const float* A, const float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, const float* h_A, const float* h_x, float* h_y) {
    float *d_A, *d_x, *d_y;

    hipMalloc((void**)&d_A, n * n * sizeof(float));
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));

    hipMemcpy(d_A, h_A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, h_x, n * sizeof(float), hipMemcpyHostToDevice);

    int num_blocks = (n + THREADS_PER_BLOCK - 1) / THREADS_PER_BLOCK;
    hipLaunchKernelGGL(gemv_kernel, dim3(num_blocks), dim3(THREADS_PER_BLOCK), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(h_y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 6 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    size_t size_A = n * n * sizeof(float);
    size_t size_x = n * sizeof(float);
    size_t size_y = n * sizeof(float);

    // Allocate device memory
    hipMalloc(&d_A, size_A);
    hipMalloc(&d_x, size_x);
    hipMalloc(&d_y, size_y);

    // Copy data to device
    hipMemcpy(d_A, A, size_A, hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, size_x, hipMemcpyHostToDevice);

    // Define grid and block dimensions
    dim3 blockDim(BLOCK_SIZE);
    dim3 gridDim((n + BLOCK_SIZE - 1) / BLOCK_SIZE);

    // Launch the kernel
    hipLaunchKernelGGL(gemv_kernel, gridDim, blockDim, 0, 0, n, d_A, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, size_y, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 7 ---------------
__global__ void gemv_kernel(int n, const float* A, const float* x, float* y) {
  int i = threadIdx.x + blockIdx.x * blockDim.x;
  if (i < n) {
    float sum = 0.0f;
    for (int j = 0; j < n; ++j) {
        sum += A[i * n + j] * x[j];
    }
    y[i] = sum;
  }
}

void gemv_parallel(int n, const float* A, const float* x, float* y) {
  float *d_A, *d_x, *d_y;

  // Allocate memory on the device
  hipMalloc(&d_A, n * n * sizeof(float));
  hipMalloc(&d_x, n * sizeof(float));
  hipMalloc(&d_y, n * sizeof(float));

  // Copy data from host to device
  hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
  hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

  // Define block size and number of blocks
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  // Launch kernel
  hipLaunchKernelGGL(gemv_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

  // Copy the result from device to host
  hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

  // Free device memory
  hipFree(d_A);
  hipFree(d_x);
  hipFree(d_y);
}

--------------- Code Block 8 ---------------
__global__ void gemvKernel(int n, const float *A, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemvParallel(int n, const float *A, const float *x, float *y) {
    float *d_A, *d_x, *d_y;
    
    size_t size_matrix = n * n * sizeof(float);
    size_t size_vector = n * sizeof(float);

    // Allocate memory on the GPU
    hipMalloc((void**)&d_A, size_matrix);
    hipMalloc((void**)&d_x, size_vector);
    hipMalloc((void**)&d_y, size_vector);

    // Transfer data from host to GPU
    hipMemcpy(d_A, A, size_matrix, hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, size_vector, hipMemcpyHostToDevice);

    // Determine grid and block sizes
    dim3 block(BLOCK_SIZE, 1, 1);
    dim3 grid((n + BLOCK_SIZE - 1) / BLOCK_SIZE, 1, 1);

    // Launch the GEMV kernel on the GPU
    hipLaunchKernelGGL(gemvKernel, grid, block, 0, 0, n, d_A, d_x, d_y);

    // Copy the result from GPU to host
    hipMemcpy(y, d_y, size_vector, hipMemcpyDeviceToHost);

    // Free the GPU memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 9 ---------------
__global__
void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float* A, float* x, float* y) {
    float *d_A, *d_x, *d_y;
    
    // Allocate memory on the device
    HIP_CHECK(hipMalloc((void**)&d_A, n * n * sizeof(float)));
    HIP_CHECK(hipMalloc((void**)&d_x, n * sizeof(float)));
    HIP_CHECK(hipMalloc((void**)&d_y, n * sizeof(float)));
    
    // Copy data from host to device
    HIP_CHECK(hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice));
    HIP_CHECK(hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice));
    
    // Execute the kernel
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    hipLaunchKernelGGL(gemv_kernel, numBlocks, blockSize, 0, 0, n, d_A, d_x, d_y);
    
    // Check for any errors launching the kernel
    HIP_CHECK(hipGetLastError());
    
    // Copy the result back to the host
    HIP_CHECK(hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost));
    
    // Free device memory
    HIP_CHECK(hipFree(d_A));
    HIP_CHECK(hipFree(d_x));
    HIP_CHECK(hipFree(d_y));
}

--------------- Code Block 10 ---------------
__global__ void gemv_kernel(int n, const float *A, const float *x, float *y)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n)
    {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j)
        {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, const float *A, const float *x, float *y)
{
    float *d_A, *d_x, *d_y;
    
    // Allocate device memory
    hipMalloc((void **)&d_A, n * n * sizeof(float));
    hipMalloc((void **)&d_x, n * sizeof(float));
    hipMalloc((void **)&d_y, n * sizeof(float));
    
    // Copy data from host to device
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    
    // Set up execution configuration
    int blockSize = 256;      // threads per block
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    // Launch the GEMV kernel on the GPU
    hipLaunchKernelGGL(gemv_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);
    
    // Copy the result back to the host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    // Free device memory
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

