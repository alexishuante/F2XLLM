--------------- Code Block 1 ---------------
__global__ void gemm_parallel(int m, int n, int k, double alpha, const double* __restrict__ a, int lda, const double* __restrict__ b, int ldb, double beta, double* __restrict__ c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[IDX2C(i, l, lda)] * b[IDX2C(l, j, ldb)];
        }
        c[IDX2C(i, j, ldc)] = alpha * temp + beta * c[IDX2C(i, j, ldc)];
    }
}

void gemm(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    double *d_a, *d_b, *d_c;

    hipMalloc((void**)&d_a, m * k * sizeof(double));
    hipMalloc((void**)&d_b, k * n * sizeof(double));
    hipMalloc((void**)&d_c, m * n * sizeof(double));

    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((m + threadsPerBlock.x - 1) / threadsPerBlock.x, (n + threadsPerBlock.y - 1) / threadsPerBlock.y);

    hipLaunchKernelGGL(gemm_parallel, numBlocks, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

--------------- Code Block 2 ---------------
__global__ void gemm_kernel(const double* a, const double* b, double* c, double alpha, double beta, int m, int n, int k, int lda, int ldb, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    double *d_a, *d_b, *d_c;
    
    size_t size_a = m * k * sizeof(double);
    size_t size_b = k * n * sizeof(double);
    size_t size_c = m * n * sizeof(double);
    
    // Allocate device memory
    hipMalloc((void**)&d_a, size_a);
    hipMalloc((void**)&d_b, size_b);
    hipMalloc((void**)&d_c, size_c);
    
    // Copy data to device
    hipMemcpy(d_a, a, size_a, hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, size_b, hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, size_c, hipMemcpyHostToDevice);
    
    // Kernel configuration
    dim3 dimBlock(16, 16);
    dim3 dimGrid((n + dimBlock.x - 1) / dimBlock.x, (m + dimBlock.y - 1) / dimBlock.y);
    
    // Launch kernel
    hipLaunchKernelGGL(gemm_kernel, dimGrid, dimBlock, 0, 0, d_a, d_b, d_c, alpha, beta, m, n, k, lda, ldb, ldc);
    
    // Copy result back to host
    hipMemcpy(c, d_c, size_c, hipMemcpyDeviceToHost);
    
    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

--------------- Code Block 3 ---------------
__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    int row = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;
    int col = hipBlockIdx_y * hipBlockDim_y + hipThreadIdx_y;

    if (row < m && col < n) {
        double temp = 0.0;

        for (int i = 0; i < k; ++i) {
            temp += a[row + i * lda] * b[i + col * ldb];
        }

        c[row + col * ldc] = alpha * temp + beta * c[row + col * ldc];
    }
}

--------------- Code Block 4 ---------------
__global__ void gemm_kernel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    int j = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    // Allocate device memory
    double *d_a, *d_b, *d_c;
    hipMalloc((void**)&d_a, m * k * sizeof(double));
    hipMalloc((void**)&d_b, k * n * sizeof(double));
    hipMalloc((void**)&d_c, m * n * sizeof(double));

    // Copy data from host to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Define the block and grid sizes
    dim3 blockSize(16, 16, 1);
    dim3 gridSize((n + 15) / 16, (m + 15) / 16, 1);

    // Launch the kernel
    hipLaunchKernelGGL(gemm_kernel, gridSize, blockSize, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy the result back to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

--------------- Code Block 5 ---------------
__global__ void gemm_hip(int m, int n, int k, double alpha, const double* a, int lda,
                         const double* b, int ldb, double beta, double* c, int ldc) {
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, 
                              const double *b, int ldb, double beta, double *c, int ldc) {
    double *d_a, *d_b, *d_c;
    
    // Allocate device memory
    hipMalloc((void**)&d_a, m * k * sizeof(double));
    hipMalloc((void**)&d_b, k * n * sizeof(double));
    hipMalloc((void**)&d_c, m * n * sizeof(double));
    
    // Copy data from host to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);
    
    // Define block and grid sizes
    dim3 blockDim(16, 16); // You can tune these values for optimal performance
    dim3 gridDim((m + blockDim.x - 1) / blockDim.x, 
                 (n + blockDim.y - 1) / blockDim.y);
    
    // Launch the HIP kernel
    hipLaunchKernelGGL(gemm_hip, gridDim, blockDim, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);
    
    // Copy the result back to the host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);
    
    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

--------------- Code Block 6 ---------------
__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    int i = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[IDX2C(i,l,lda)] * b[IDX2C(l,j,ldb)];
        }
        c[IDX2C(i,j,ldc)] = alpha * temp + beta * c[IDX2C(i,j,ldc)];
    }
}

extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    double *d_a, *d_b, *d_c;

    hipMalloc(&d_a, m * k * sizeof(double));
    hipMalloc(&d_b, k * n * sizeof(double));
    hipMalloc(&d_c, m * n * sizeof(double));

    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    dim3 threadsPerBlock(16, 16);
    dim3 blocksPerGrid((n + 15) / 16, (m + 15) / 16);

    hipLaunchKernelGGL(gemm_kernel, blocksPerGrid, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    hipDeviceSynchronize();

    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

--------------- Code Block 7 ---------------
__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    int i = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    // Define thread block and grid sizes
    dim3 threadsPerBlock(16, 16);
    dim3 blocksPerGrid((n + 15) / 16, (m + 15) / 16);

    // Allocate device memory
    double *d_a, *d_b, *d_c;
    hipMalloc((void**)&d_a, m * k * sizeof(double));
    hipMalloc((void**)&d_b, k * n * sizeof(double));
    hipMalloc((void**)&d_c, m * n * sizeof(double));

    // Copy data to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Launch the kernel
    hipLaunchKernelGGL(gemm_kernel, blocksPerGrid, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy results back to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

--------------- Code Block 8 ---------------
__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    int i = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;

        for (int l = 0; l < k; ++l) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }

        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    double *d_a, *d_b, *d_c;

    // Allocate device memory
    hipMalloc(&d_a, m * k * sizeof(double));
    hipMalloc(&d_b, k * n * sizeof(double));
    hipMalloc(&d_c, m * n * sizeof(double));

    // Copy data to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Define block and grid dimensions
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (m + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Launch the kernel
    hipLaunchKernelGGL(gemm_kernel, numBlocks, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

--------------- Code Block 9 ---------------
__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;  // Get the row index
    int col = blockIdx.x * blockDim.x + threadIdx.x;  // Get the column index

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    // Define block and grid sizes
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (m + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Call the kernel
    hipLaunchKernelGGL(gemm_kernel, numBlocks, threadsPerBlock, 0, 0, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);

    // Synchronize the device
    hipDeviceSynchronize();
}

--------------- Code Block 10 ---------------
__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* __restrict__ a,
                            int lda, const double* __restrict__ b, int ldb, double beta,
                            double* __restrict__ c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    // Define device pointers
    double *d_a, *d_b, *d_c;

    // Allocate device memory
    hipMalloc((void**)&d_a, m * k * sizeof(double));
    hipMalloc((void**)&d_b, k * n * sizeof(double));
    hipMalloc((void**)&d_c, m * n * sizeof(double));

    // Copy data to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Define block and grid sizes
    dim3 blockDim(BLOCK_SIZE, BLOCK_SIZE);
    dim3 gridDim((n + BLOCK_SIZE - 1) / BLOCK_SIZE, (m + BLOCK_SIZE - 1) / BLOCK_SIZE);

    // Launch kernel
    hipLaunchKernelGGL(gemm_kernel, gridDim, blockDim, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy the result back to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

