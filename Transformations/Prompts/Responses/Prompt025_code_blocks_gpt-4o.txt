Code Block 1:
void jacobi_parallel(double* u, double* unew, int n, int niter, int block_size) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(block_size, block_size, block_size);
    dim3 numBlocks((n + block_size - 1) / block_size, 
                   (n + block_size - 1) / block_size, 
                   (n + block_size - 1) / block_size);

    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL(jacobi_iter, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();
        // Swap pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_iter(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = i * n * n + j * n + k;
        int idx_left = (i-1) * n * n + j * n + k;
        int idx_right = (i+1) * n * n + j * n + k;
        int idx_down = i * n * n + (j-1) * n + k;
        int idx_up = i * n * n + (j+1) * n + k;
        int idx_back = i * n * n + j * n + (k-1);
        int idx_front = i * n * n + j * n + (k+1);

        unew[idx] = 0.125 * (u[idx_left] + u[idx_right] + u[idx_down] + 
                             u[idx_up] + u[idx_back] + u[idx_front] + u[idx]);
    }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;

    size_t size = n * n * n * sizeof(double);
    hipMalloc((void**)&d_u, size);
    hipMalloc((void**)&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(nthreads, nthreads, nthreads);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();

        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[IDX(i, j, k, n)] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] +
                                        u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] +
                                        u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] +
                                        u[IDX(i, j, k, n)]);
    }
}

Code Block 3:
void jacobi_parallel(double* u, double* unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);
    
    // Allocate memory on the device
    hipMalloc((void **)&d_u, size);
    hipMalloc((void **)&d_unew, size);

    // Copy data from host to device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 blockDim(8, 8, 8);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x,
                 (n + blockDim.y - 1) / blockDim.y,
                 (n + blockDim.z - 1) / blockDim.z);

    for (int iter = 0; iter < niter; ++iter) {
        hipLaunchKernelGGL(jacobi_kernel, gridDim, blockDim, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();
        
        // Swap the pointers for the next iteration
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy result back to host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockDim.x * blockIdx.x + threadIdx.x + 1;
    int j = blockDim.y * blockIdx.y + threadIdx.y + 1;
    int k = blockDim.z * blockIdx.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[IDX(i, j, k, n)] = 0.125 * (
            u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] +
            u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] +
            u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] +
            u[IDX(i, j, k, n)]
        );
    }
}

Code Block 4:
iterations
    for (int iter = 1; iter <= niter; iter++) {
        idx = tidx;
        while (idx < (n-2) * (n-2) * (n-2)) {
            k = idx / ((n-2)*(n-2)) + 1;  // layer index
            idx %= ((n-2)*(n-2));
            
            j = idx / (n-2) + 1;         // row index
            i = idx % (n-2) + 1;         // column index

            unew[i + j * n + k * n * n] = 0.125 * (
                u[(i-1) + j * n + k * n * n] +
                u[(i+1) + j * n + k * n * n] +
                u[i + (j-1) * n + k * n * n] +
                u[i + (j+1) * n + k * n * n] +
                u[i + j * n + (k-1) * n * n] +
                u[i + j * n + (k+1) * n * n] +
                u[i + j * n + k * n * n]
            );

            idx += gridDim.x * blockDim.x; // Move to the next element for the thread
        }
        __syncthreads();

        // Swap pointers after every iteration
        if (iter < niter) {
            double *temp = u;
            u = unew;
            unew = temp;
        }
    }

__global__ void jacobi_kernel(double* u, double* unew, int n, int niter) {
    int i, j, k, idx;
    int tidx = blockIdx.x * blockDim.x + threadIdx.x;

    // Each thread goes over multiple iterations
    for (int iter = 1; iter <= niter; iter++) {
        idx = tidx;
        while (idx < (n-2) * (n-2) * (n-2)) {
            k = idx / ((n-2)*(n-2)) + 1;  // layer index
            idx %= ((n-2)*(n-2));
            
            j = idx / (n-2) + 1;         // row index
            i = idx % (n-2) + 1;         // column index

            unew[i + j * n + k * n * n] = 0.125 * (
                u[(i-1) + j * n + k * n * n] +
                u[(i+1) + j * n + k * n * n] +
                u[i + (j-1) * n + k * n * n] +
                u[i + (j+1) * n + k * n * n] +
                u[i + j * n + (k-1) * n * n] +
                u[i + j * n + (k+1) * n * n] +
                u[i + j * n + k * n * n]
            );

            idx += gridDim.x * blockDim.x; // Move to the next element for the thread
        }
        __syncthreads();

        // Swap pointers after every iteration
        if (iter < niter) {
            double *temp = u;
            u = unew;
            unew = temp;
        }
    }
}

Code Block 5:
void jacobi_parallel(double* u, double* unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + n * (j + n * k)] = 0.125 * (u[(i-1) + n * (j + n * k)] +
                                                              u[(i+1) + n * (j + n * k)] +
                                                              u[i + n * ((j-1) + n * k)] +
                                                              u[i + n * ((j+1) + n * k)] +
                                                              u[i + n * (j + n * (k-1))] +
                                                              u[i + n * (j + n * (k+1))] +
                                                              u[i + n * (j + n * k)]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + n * (j + n * k)] = unew[i + n * (j + n * k)];
                    }
                }
            }
        }
    }
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[i + n * (j + n * k)] = 0.125 * (u[(i-1) + n * (j + n * k)] +
                                             u[(i+1) + n * (j + n * k)] +
                                             u[i + n * ((j-1) + n * k)] +
                                             u[i + n * ((j+1) + n * k)] +
                                             u[i + n * (j + n * (k-1))] +
                                             u[i + n * (j + n * (k+1))] +
                                             u[i + n * (j + n * k)]);
    }
}

Code Block 6:
void jacobi_parallel(double* u, double* unew, int n, int niter, int block_size) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);
    
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);
    
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);
    
    dim3 dimBlock(block_size, block_size, block_size);
    dim3 dimGrid((n + block_size - 1) / block_size, (n + block_size - 1) / block_size, (n + block_size - 1) / block_size);
    
    for (int iter = 0; iter < niter; ++iter) {
        hipLaunchKernelGGL(jacobi_kernel, dimGrid, dimBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();
        std::swap(d_u, d_unew);
    }
    
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);
    
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = IDX(i, j, k, n);
        unew[idx] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] + 
                             u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] + 
                             u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] + 
                             u[idx]);
    }
}

Code Block 7:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;
    
    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = i + n * (j + n * k);
        int idx_xm = (i-1) + n * (j + n * k);
        int idx_xp = (i+1) + n * (j + n * k);
        int idx_ym = i + n * ((j-1) + n * k);
        int idx_yp = i + n * ((j+1) + n * k);
        int idx_zm = i + n * (j + n * (k-1));
        int idx_zp = i + n * (j + n * (k+1));
        
        unew[idx] = 0.125 * (u[idx_xm] + u[idx_xp] + u[idx_ym] +
                             u[idx_yp] + u[idx_zm] + u[idx_zp] +
                             u[idx]);
    }
}

Code Block 8:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    // Allocate device memory
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    // Copy data to device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    // Set up grid and block dimensions
    dim3 dimBlock(8, 8, 8);  // block dimensions (can be adjusted)
    dim3 dimGrid((n + dimBlock.x - 1) / dimBlock.x, 
                 (n + dimBlock.y - 1) / dimBlock.y, 
                 (n + dimBlock.z - 1) / dimBlock.z);  // grid dimensions

    // Perform iterations
    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<dimGrid, dimBlock>>>(d_u, d_unew, n);
        hipDeviceSynchronize();
        // Swap pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy result back to host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        int index = i + n * (j + n * k);
        unew[index] = 0.125 * (u[(i-1) + n * (j + n * k)] + u[(i+1) + n * (j + n * k)] +
                             u[i + n * ((j-1) + n * k)] + u[i + n * ((j+1) + n * k)] +
                             u[i + n * (j + n * (k-1))] + u[i + n * (j + n * (k+1))] +
                             u[index]);
    }
}

Code Block 9:
void jacobi_parallel(double* u, double* unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);
    
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);
    
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);
    
    dim3 threadsPerBlock(nthreads, nthreads, nthreads);
    dim3 numBlocks((n + nthreads - 1) / nthreads, (n + nthreads - 1) / nthreads, (n + nthreads - 1) / nthreads);
    
    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        hipDeviceSynchronize();
        
        // Swap pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }
    
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int idx = i + n * (j + n * k);
        unew[idx] = 0.125 * (
            u[idx - 1] + u[idx + 1] +
            u[idx - n] + u[idx + n] +
            u[idx - n * n] + u[idx + n * n] +
            u[idx]
        );
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc((void**)&d_u, size);
    hipMalloc((void**)&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + 7) / 8, (n + 7) / 8, (n + 7) / 8);

    hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n, niter);

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        for (int iter = 0; iter < niter; ++iter) {
            __syncthreads();
            unew[IDX(i, j, k, n)] = 0.125 * (
                u[IDX(i - 1, j, k, n)] + u[IDX(i + 1, j, k, n)] +
                u[IDX(i, j - 1, k, n)] + u[IDX(i, j + 1, k, n)] +
                u[IDX(i, j, k - 1, n)] + u[IDX(i, j, k + 1, n)] + 
                u[IDX(i, j, k, n)]
            );
            __syncthreads();
            u[IDX(i, j, k, n)] = unew[IDX(i, j, k, n)];
        }
    }
}

