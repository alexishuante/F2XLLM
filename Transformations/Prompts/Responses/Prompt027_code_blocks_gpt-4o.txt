Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc((void**)&d_u, size);
    hipMalloc((void**)&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(nthreads, nthreads, nthreads);
    dim3 numBlocks((n + nthreads - 2) / nthreads, (n + nthreads - 2) / nthreads, (n + nthreads - 2) / nthreads);

    for (int iter = 0; iter < niter; ++iter) {
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();

        std::swap(d_u, d_unew);
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__
void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i >= n - 1 || j >= n - 1 || k >= n - 1)
        return;

    unew[IDX(i, j, k, n)] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] +
                                     u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] +
                                     u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] +
                                     u[IDX(i, j, k, n)]);
}

Code Block 2:
iteration
            if (iter == niter - 1) {
                u[IDX(i, j, k, n)] = unew[IDX(i, j, k, n)];
            }

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 1 && i < n-1 && j > 1 && j < n-1 && k > 1 && k < n-1) {
        for (int iter = 0; iter < niter; iter++) {
            unew[IDX(i, j, k, n)] = 0.125 * (u[IDX(i-1, j, k, n)] + u[idx(i+1, j, k, n)] +
                                             u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] +
                                             u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] +
                                             u[IDX(i, j, k, n)]);

            // Ensure all threads have computed the new values before updating u
            __syncthreads();

            // Update u with new computed values if it's the last iteration
            if (iter == niter - 1) {
                u[IDX(i, j, k, n)] = unew[IDX(i, j, k, n)];
            }

            // Ensure all threads have updated u before starting next iteration
            __syncthreads();
        }
    }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    // Allocate device memory
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    // Copy data to device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(16, 16, 16);
    dim3 numBlocks((n + threadsPerBlock.x - 2) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 2) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 2) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();
        // Swap pointers
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy results back to host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = i + j * n + k * n * n;
        int idx_i1 = (i + 1) + j * n + k * n * n;
        int idx_i0 = (i - 1) + j * n + k * n * n;
        int idx_j1 = i + (j + 1) * n + k * n * n;
        int idx_j0 = i + (j - 1) * n + k * n * n;
        int idx_k1 = i + j * n + (k + 1) * n * n;
        int idx_k0 = i + j * n + (k - 1) * n * n;
        
        unew[idx] = 0.125 * (u[idx_i0] + u[idx_i1] + u[idx_j0] + u[idx_j1] + u[idx_k0] + u[idx_k1] + u[idx]);
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter, dim3 gridDim, dim3 blockDim) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    // Allocate device memory
    hipMalloc((void**)&d_u, size);
    hipMalloc((void**)&d_unew, size);

    // Copy data from host to device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    for (int iter = 0; iter < niter; iter++) {
        // Launch kernel
        hipLaunchKernelGGL(jacobi_kernel, gridDim, blockDim, 0, 0, d_u, d_unew, n);

        // Swap arrays by swapping pointers
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy result back to host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;

    if (i < (n-1) && j < (n-1) && k < (n-1)) {
        unew[(k * n + j) * n + i] = 0.125 * (
            u[((k-1) * n + j) * n + i] +
            u[((k+1) * n + j) * n + i] +
            u[(k * n + (j-1)) * n + i] +
            u[(k * n + (j+1)) * n + i] +
            u[(k * n + j) * n + (i-1)] +
            u[(k * n + j) * n + (i+1)] +
            u[(k * n + j) * n + i]
        );
    }
}

Code Block 5:
void jacobi_parallel(double* u, double* unew, int n, int niter, int block_size) {
    double *d_u, *d_unew;

    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 dimBlock(block_size, block_size, block_size);
    dim3 dimGrid((n - 2 + block_size - 1) / block_size, 
                 (n - 2 + block_size - 1) / block_size, 
                 (n - 2 + block_size - 1) / block_size);

    for (int iter = 0; iter < niter; ++iter) {
        hipLaunchKernelGGL(jacobi_kernel, dimGrid, dimBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();

        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int idx = IDX(i, j, k, n);
        unew[idx] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)]
                            + u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)]
                            + u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)]
                            + u[idx]);
    }
}

Code Block 6:
void jacobi_parallel(double*** u, double*** unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    // Set number of threads
    omp_set_num_threads(nthreads);
    
    #pragma omp parallel private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] + 
                                                  u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + 
                                                  u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
            #pragma omp barrier
        }
    }
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        unew[IDX(i, j, k, n)] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] +
                                         u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] +
                                         u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] +
                                         u[IDX(i, j, k, n)]);
    }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter, int threads_per_block) {
    double *d_u, *d_unew;

    // Allocate device memory
    size_t size = n * n * n * sizeof(double);
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    // Copy data to device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    // Kernel configuration
    dim3 threads(threads_per_block, threads_per_block, threads_per_block);
    dim3 blocks((n-2 + threads.x - 1) / threads.x, 
                (n-2 + threads.y - 1) / threads.y, 
                (n-2 + threads.z - 1) / threads.z);

    for (int iter = 0; iter < niter; iter++) {
        // Launch the kernel
        hipLaunchKernelGGL(jacobi_kernel, blocks, threads, 0, 0, d_u, d_unew, n);

        // For debugging: check for errors in kernel launch/copy (optional)
        // hipError_t err = hipGetLastError();
        // if (err != hipSuccess) {
        //     printf("HIP error: %s\n", hipGetErrorString(err));
        // }

        // Swap pointers
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy result back to host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = IDX3D(i, j, k, n);
        int idx_xm = IDX3D(i-1, j, k, n);
        int idx_xp = IDX3D(i+1, j, k, n);
        int idx_ym = IDX3D(i, j-1, k, n);
        int idx_yp = IDX3D(i, j+1, k, n);
        int idx_zm = IDX3D(i, j, k-1, n);
        int idx_zp = IDX3D(i, j, k+1, n);

        unew[idx] = 0.125 * (u[idx_xm] + u[idx_xp] + u[idx_ym] + 
                             u[idx_yp] + u[idx_zm] + u[idx_zp] + 
                             u[idx]);
    }
}

Code Block 8:
void jacobi_parallel(double* u, double* unew, int n, int niter, int nblocks, dim3 blockDim) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    // Allocate memory on the device
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    // Copy the initial values from host to device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    // Define grid dimensions
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x, 
                 (n + blockDim.y - 1) / blockDim.y, 
                 (n + blockDim.z - 1) / blockDim.z);

    for (int iter = 0; iter < niter; ++iter) {
        jacobi_kernel<<<gridDim, blockDim>>>(d_u, d_unew, n);
        hipDeviceSynchronize();

        // Swap the pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy the results back to host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx - 1]          // u(i-1, j, k)
                          + u[idx + 1]          // u(i+1, j, k)
                          + u[idx - n]          // u(i, j-1, k)
                          + u[idx + n]          // u(i, j+1, k)
                          + u[idx - n * n]      // u(i, j, k-1)
                          + u[idx + n * n]      // u(i, j, k+1)
                          + u[idx]);            // u(i, j, k)
    }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(nthreads, nthreads, nthreads);
    int blocks = (n + nthreads - 1) / nthreads;
    dim3 numBlocks(blocks, blocks, blocks);

    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();
        hipMemcpy(d_u, d_unew, size, hipMemcpyDeviceToDevice); // Copy unew to u
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        unew[IDX(i, j, k, n)] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] +
                                         u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] +
                                         u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] +
                                         u[IDX(i, j, k, n)]);
    }
}

Code Block 10:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;

    size_t size = n * n * n * sizeof(double);

    // Allocate device memory
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    // Copy data from host to device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; ++iter) {
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();
        
        // Swap pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy result back to host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if(i < n-1 && j < n-1 && k < n-1) {
        unew[IDX(i, j, k, n)] = 0.125 * (
            u[IDX(i-1, j, k, n)] +
            u[IDX(i+1, j, k, n)] +
            u[IDX(i, j-1, k, n)] +
            u[IDX(i, j+1, k, n)] +
            u[IDX(i, j, k-1, n)] +
            u[IDX(i, j, k+1, n)] +
            u[IDX(i, j, k, n)]
        );
    }
}

