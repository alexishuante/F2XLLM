Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (int iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (int k = 1; k < n - 1; k++) {
                for (int j = 1; j < n - 1; j++) {
                    for (int i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                         u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                         u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                                         u[i + j*n + k*n*n]);
                    }
                }
            }
            #pragma acc update self(u[0:n*n*n])
        }
    }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma acc data copy(u[:n*n*n], unew[:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        int idx = i + j * n + k * n * n;
                        unew[idx] = 0.125 * (u[idx-n] + u[idx+n] + u[idx-n*n] + u[idx+n*n] +
                                            u[idx-n*n*n] + u[idx+n*n*n] + u[idx]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        int idx = i + j * n + k * n * n;
                        u[idx] = unew[idx];
                    }
                }
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    #pragma acc data copy(u[:n*n*n], unew[:n*n*n])
    for (int iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) present(u[:n*n*n], unew[:n*n*n])
        for (int k = 1; k < n-1; k++) {
            for (int j = 1; j < n-1; j++) {
                for (int i = 1; i < n-1; i++) {
                    unew[i+n*j+n*n*k] = 0.125 * (u[i-1+n*j+n*n*k] + u[i+1+n*j+n*n*k] + u[i+n*(j-1)+n*n*k] +
                                                  u[i+n*(j+1)+n*n*k] + u[i+n*j+n*n*(k-1)] + u[i+n*j+n*n*(k+1)] +
                                                  u[i+n*j+n*n*k]);
                }
            }
        }
        #pragma acc update self(u[:n*n*n]) async(iter%2+1)
        #pragma acc update device(unew[:n*n*n]) async(iter%2+1)
        #pragma acc wait(iter%2+1)
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for(iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for(k = 1; k < n-1; k++) {
                for(j = 1; j < n-1; j++) {
                    for(i = 1; i < n-1; i++) {
                        int idx = i + j*n + k*n*n;
                        unew[idx] = 0.125 * (u[idx-1] + u[idx+1] + u[idx-n] +
                            u[idx+n] + u[idx-n*n] + u[idx+n*n] + u[idx]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for(k = 1; k < n-1; k++) {
                for(j = 1; j < n-1; j++) {
                    for(i = 1; i < n-1; i++) {
                        int idx = i + j*n + k*n*n;
                        u[idx] = unew[idx];
                    }
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter){
    int i, j, k, iter;
    for(iter = 0; iter < niter; iter++){
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for(k = 1; k < n-1; k++){
            for(j = 1; j < n-1; j++){
                for(i = 1; i < n-1; i++){
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                                                      u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        // Copy unew values back to u
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for(k = 1; k < n-1; k++){
            for(j = 1; j < n-1; j++){
                for(i = 1; i < n-1; i++){
                    u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma acc data copyin(u[0:n*n*n]) copy(unew[0:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + n * (j + n * k)] = 0.125 * (u[(i-1) + n * (j + n * k)] + u[(i+1) + n * (j + n * k)] +
                            u[i + n * ((j-1) + n * k)] + u[i + n * ((j+1) + n * k)] + u[i + n * (j + n * (k-1)] +
                            u[i + n * (j + n * (k+1)] + u[i + n * (j + n * k)]);
                    }
                }
            }
            #pragma acc update self(u[0:n*n*n])
        }
    }
}

Code Block 7:
void jacobi_parallel(double u[n][n][n], double unew[n][n][n], int n, int niter) {
    int i, j, k, iter;
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] + u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }
        #pragma acc update self(u)
        #pragma acc update device(unew)
        #pragma acc update self(u)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter)
{
    int i, j, k, iter;
    #pragma acc data copyin(u[:n*n*n]) copyout(unew[:n*n*n])
    {
        for(iter = 0; iter < niter; iter++)
        {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for(k = 1; k < n - 1; k++)
            {
                for(j = 1; j < n - 1; j++)
                {
                    for(i = 1; i < n - 1; i++)
                    {
                        int idx = i + n*(j + n*k);
                        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - 1] +
                                            u[idx + 1] + u[idx - n*n] + u[idx + n*n] + u[idx]);
                    }
                }
            }
            
            #pragma acc parallel loop collapse(3)
            for(k = 1; k < n - 1; k++)
            {
                for(j = 1; j < n - 1; j++)
                {
                    for(i = 1; i < n - 1; i++)
                    {
                        int idx = i + n*(j + n*k);
                        u[idx] = unew[idx];
                    }
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma acc data copyin(u[0:n*n*n]) copyout(unew[0:n*n*n])
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                        u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] +
                        u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        #pragma acc parallel loop collapse(3)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                }
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    #pragma acc data copyin(u[0:n*n*n]) copy(unew[0:n*n*n])
    {
        for (int iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) present(u, unew)
            for (int k = 1; k < n - 1; k++) {
                for (int j = 1; j < n - 1; j++) {
                    for (int i = 1; i < n - 1; i++) {
                        unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
                                                             u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] +
                                                             u[i + j * n + (k-1) * n * n] + u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
                    }
                }
            }
            #pragma acc parallel loop present(u, unew)
            for (int i = 0; i < n*n*n; i++) {
                u[i] = unew[i];
            }
        }
    }
}

