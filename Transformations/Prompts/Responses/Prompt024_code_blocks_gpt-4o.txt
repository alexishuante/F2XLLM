Code Block 1:
void gemm_parallel(int m, int n, int k, double alpha,
                   const double* a, int lda,
                   const double* b, int ldb,
                   double beta,
                   double* c, int ldc)
{
    double *d_a, *d_b, *d_c;
    size_t size_a = m * k * sizeof(double);
    size_t size_b = k * n * sizeof(double);
    size_t size_c = m * n * sizeof(double);

    // Allocate GPU memory for matrices
    hipMalloc(&d_a, size_a);
    hipMalloc(&d_b, size_b);
    hipMalloc(&d_c, size_c);

    // Copy matrices from host to device
    hipMemcpy(d_a, a, size_a, hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, size_b, hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, size_c, hipMemcpyHostToDevice);

    // Launch dimensions
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (m + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Launch kernel
    hipLaunchKernelGGL(gemm_parallel_hip,
                       numBlocks, threadsPerBlock,
                       0, 0,
                       m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back to host
    hipMemcpy(c, d_c, size_c, hipMemcpyDeviceToHost);

    // Free GPU memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_parallel_hip(int m, int n, int k, double alpha,
                                  const double* a, int lda,
                                  const double* b, int ldb,
                                  double beta,
                                  double* c, int ldc)
{
    // Index calculation
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    int j = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < m && j < n)
    {
        double temp = 0.0;
        for (int l = 0; l < k; ++l)
        {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 2:
void gemm_parallel(int m, int n, int k, double alpha, const double* A, int lda, const double* B, int ldb, double beta, double* C, int ldc) {
    // Define device pointers
    double *d_A, *d_B, *d_C;

    // Allocate memory on the device
    hipMalloc(&d_A, lda * k * sizeof(double));
    hipMalloc(&d_B, ldb * n * sizeof(double));
    hipMalloc(&d_C, ldc * n * sizeof(double));

    // Copy matrices from host to device
    hipMemcpy(d_A, A, lda * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_B, B, ldb * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_C, C, ldc * n * sizeof(double), hipMemcpyHostToDevice);

    // Define block and grid sizes
    dim3 blockDim(16, 16);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x, (m + blockDim.y - 1) / blockDim.y);

    // Launch the kernel
    hipLaunchKernelGGL(gemm_kernel, gridDim, blockDim, 0, 0, m, n, k, alpha, d_A, lda, d_B, ldb, beta, d_C, ldc);

    // Copy the result back to the host
    hipMemcpy(C, d_C, ldc * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_B);
    hipFree(d_C);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* __restrict__ A, int lda, const double* __restrict__ B, int ldb, double beta, double* __restrict__ C, int ldc) {
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    int i = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += A[IDX2C(i, l, lda)] * B[IDX2C(l, j, ldb)];
        }
        C[IDX2C(i, j, ldc)] = alpha * temp + beta * C[IDX2C(i, j, ldc)];
    }
}

Code Block 3:
void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, 
                   const double *b, int ldb, double beta, double *c, int ldc) {
    // Set up device variables
    double *d_a, *d_b, *d_c;

    // Allocate device memory
    hipMalloc((void**)&d_a, m * k * sizeof(double));
    hipMalloc((void**)&d_b, k * n * sizeof(double));
    hipMalloc((void**)&d_c, m * n * sizeof(double));

    // Copy data to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Set up execution configuration
    dim3 blockDim(16, 16);
    dim3 gridDim((m + blockDim.x - 1) / blockDim.x, (n + blockDim.y - 1) / blockDim.y);

    // Launch the kernel
    hipLaunchKernelGGL(gemm_kernel, gridDim, blockDim, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, 
                            const double *b, int ldb, double beta, double *c, int ldc) {
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[IDX2C(i, l, lda)] * b[IDX2C(l, j, ldb)];
        }
        c[IDX2C(i, j, ldc)] = alpha * temp + beta * c[IDX2C(i, j, ldc)];
    }
}

Code Block 4:
void gemm_parallel(const int m, const int n, const int k,
                   const double alpha, const double* a, const int lda,
                   const double* b, const int ldb,
                   const double beta, double* c, const int ldc) {
    // Define thread block size
    dim3 threadsPerBlock(16, 16);
    // Calculate grid size to cover the whole matrix
    dim3 numBlocks((m + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Pointers for GPU
    double *d_a, *d_b, *d_c;

    // Allocate memory on the GPU
    hipMalloc((void**)&d_a, m * k * sizeof(double));
    hipMalloc((void**)&d_b, k * n * sizeof(double));
    hipMalloc((void**)&d_c, m * n * sizeof(double));

    // Copy data from host to device (GPU)
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Launch the GEMM kernel
    hipLaunchKernelGGL(gemm_parallel_kernel, numBlocks, threadsPerBlock, 0, 0,
                       m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free GPU memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_parallel_kernel(const int m, const int n, const int k,
                                     const double alpha, const double* a, const int lda,
                                     const double* b, const int ldb,
                                     const double beta, double* c, const int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 5:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    // Define block size and grid size
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x, (m + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Allocate device memory
    double *d_a, *d_b, *d_c;
    hipMalloc(&d_a, m * k * sizeof(double));
    hipMalloc(&d_b, k * n * sizeof(double));
    hipMalloc(&d_c, m * n * sizeof(double));

    // Copy data from host to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Launch kernel
    hipLaunchKernelGGL(gemm_parallel_kernel, numBlocks, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_parallel_kernel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int j = blockDim.x * blockIdx.x + threadIdx.x;
    int i = blockDim.y * blockIdx.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 6:
void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda,
                   const double *b, int ldb, double beta, double *c, int ldc) {
    double *d_a, *d_b, *d_c;

    // Allocate device memory
    hipMalloc((void **)&d_a, m * k * sizeof(double));
    hipMalloc((void **)&d_b, k * n * sizeof(double));
    hipMalloc((void **)&d_c, m * n * sizeof(double));

    // Copy matrices to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Define block and grid sizes
    dim3 block_dim(16, 16);
    dim3 grid_dim((m + block_dim.x - 1) / block_dim.x, (n + block_dim.y - 1) / block_dim.y);

    // Launch the kernel
    hipLaunchKernelGGL(gemm_kernel, grid_dim, block_dim, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy the result back to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda,
                            const double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[IDX2C(i, l, lda)] * b[IDX2C(l, j, ldb)];
        }
        c[IDX2C(i, j, ldc)] = alpha * temp + beta * c[IDX2C(i, j, ldc)];
    }
}

Code Block 7:
extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    // Define the block and grid dimensions
    dim3 threadsPerBlock(16, 16);
    dim3 blocksPerGrid((n + threadsPerBlock.x - 1) / threadsPerBlock.x, (m + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Launch the kernel
    hipLaunchKernelGGL(gemm_kernel, blocksPerGrid, threadsPerBlock, 0, 0, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);

    // Synchronize the device
    hipDeviceSynchronize();
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    int j = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 8:
extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    double *d_a, *d_b, *d_c;
    size_t size_a = lda * k * sizeof(double);
    size_t size_b = ldb * n * sizeof(double);
    size_t size_c = ldc * n * sizeof(double);

    // Allocate device memory
    hipMalloc((void **) &d_a, size_a);
    hipMalloc((void **) &d_b, size_b);
    hipMalloc((void **) &d_c, size_c);

    // Copy matrices to device
    hipMemcpy(d_a, a, size_a, hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, size_b, hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, size_c, hipMemcpyHostToDevice);

    // Define block and grid sizes
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x, (m + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Launch the kernel
    hipLaunchKernelGGL(gemm_kernel, numBlocks, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back to host
    hipMemcpy(c, d_c, size_c, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[IDX2C(row, l, lda)] * b[IDX2C(l, col, ldb)];
        }
        c[IDX2C(row, col, ldc)] = alpha * temp + beta * c[IDX2C(row, col, ldc)];
    }
}

Code Block 9:
void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    // device memory pointers
    double *d_a, *d_b, *d_c;

    // allocate device memory
    hipMalloc((void**)&d_a, m * k * sizeof(double));
    hipMalloc((void**)&d_b, k * n * sizeof(double));
    hipMalloc((void**)&d_c, m * n * sizeof(double));

    // copy data to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // define grid and block dimensions
    dim3 threadsPerBlock(16, 16);
    dim3 blocksPerGrid((n + 15) / 16, (m + 15) / 16);

    // launch GEMM kernel
    hipLaunchKernelGGL(gemm_kernel, blocksPerGrid, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // copy result back to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__
void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc)
{
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    int i = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 10:
extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    double *d_a, *d_b, *d_c;
    size_t size_a = lda * k * sizeof(double);
    size_t size_b = ldb * n * sizeof(double);
    size_t size_c = ldc * n * sizeof(double);

    hipMalloc((void**)&d_a, size_a);
    hipMalloc((void**)&d_b, size_b);
    hipMalloc((void**)&d_c, size_c);

    hipMemcpy(d_a, a, size_a, hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, size_b, hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, size_c, hipMemcpyHostToDevice);

    dim3 dimBlock(TILE_SIZE, TILE_SIZE);
    dim3 dimGrid((n + TILE_SIZE - 1) / TILE_SIZE, (m + TILE_SIZE - 1) / TILE_SIZE);

    hipLaunchKernelGGL(hip_gemm_kernel, dimGrid, dimBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    hipMemcpy(c, d_c, size_c, hipMemcpyDeviceToHost);

    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void hip_gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * TILE_SIZE + threadIdx.y;
    int col = blockIdx.x * TILE_SIZE + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[IDX2C(row, l, lda)] * b[IDX2C(l, col, ldb)];
        }
        c[IDX2C(row, col, ldc)] = alpha * temp + beta * c[IDX2C(row, col, ldc)];
    }
}

