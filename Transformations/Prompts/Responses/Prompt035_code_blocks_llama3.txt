Code Block 1:
void jacobi_parallel_c(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i + j*n + k*n*n] = 0.125 * (u[i-1 + j*n + k*n*n] + u[i+1 + j*n + k*n*n] +
              u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] +
              u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n*n*n; k++) {
        u[k] = unew[k];
      }
    }
  }
}

__global__ void jacobi_parallel_cuda(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j*n + k*n*n] = 0.125 * (u[i-1 + j*n + k*n*n] + u[i+1 + j*n + k*n*n] +
        u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] +
        u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
      __syncthreads();
      u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
    }
  }
}

Code Block 2:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;

  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] +
              (*u)[i][j-1][k] + (*u)[i][j+1][k] + (*u)[i][j][k-1] +
              (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] +
        u[(i+1) + j * n + k * n * n] + u[i + (j-1) * n + k * n * n] +
        u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 3:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + (*u)[i][j-1][k] +
              (*u)[i][j+1][k] + (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 4:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
              u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            u[i][j][k] = unew[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int iter;

  for (iter = 1; iter <= niter; iter++) {
    if (i > 1 && i < n - 2 && j > 1 && j < n - 2 && k > 1 && k < n - 2) {
      unew[i + j * n + k * n * n] = 0.125 * (u[i-1 + j * n + k * n * n] + u[i+1 + j * n + k * n * n] +
        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
    }
    __syncthreads();
    if (i > 1 && i < n - 2 && j > 1 && j < n - 2 && k > 1 && k < n - 2) {
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 5:
void jacobi_parallel(float ***u, float ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;

  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + (*u)[i][j-1][k] +
              (*u)[i][j+1][k] + (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 6:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;

  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] +
                                         (*u)[i][j-1][k] + (*u)[i][j+1][k] +
                                         (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] +
                                             u[(i+1) + j * n + k * n * n] +
                                             u[i + (j-1) * n + k * n * n] +
                                             u[i + (j+1) * n + k * n * n] +
                                             u[i + j * n + (k-1) * n * n] +
                                             u[i + j * n + (k+1) * n * n] +
                                             u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 7:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + (*u)[i][j-1][k] +
              (*u)[i][j+1][k] + (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int iter;

  for (iter = 1; iter <= niter; iter++) {
    if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
      unew[i + j * n + k * n * n] = 0.125 * (u[i-1 + j * n + k * n * n] + u[i+1 + j * n + k * n * n] +
        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
    }
    __syncthreads();
    if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 8:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;

  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] +
              (*u)[i][j-1][k] + (*u)[i][j+1][k] + (*u)[i][j][k-1] +
              (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] +
        u[(i+1) + j * n + k * n * n] + u[i + (j-1) * n + k * n * n] +
        u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 9:
void jacobi_parallel(float ***u, float ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
#pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
#pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + (*u)[i][j-1][k] +
              (*u)[i][j+1][k] + (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
#pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 10:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + (*u)[i][j-1][k] +
              (*u)[i][j+1][k] + (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

