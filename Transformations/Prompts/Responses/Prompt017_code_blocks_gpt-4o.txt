Code Block 1:
void jacobi_parallel(int n, int niter, double u[n][n][n], double unew[n][n][n]) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n-1; k++) {
            for (j = 1; j < n-1; j++) {
                for (i = 1; i < n-1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }
        #pragma acc end parallel loop

        // Copy the values from unew to u
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
        #pragma acc end parallel loop
    }
}

Code Block 2:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int iter, i, j, k;

    for (iter = 1; iter <= niter; ++iter) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; ++k) {
            for (j = 1; j < n - 1; ++j) {
                for (i = 1; i < n - 1; ++i) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] +
                                             u[i][j][k]);
                }
            }
        }
        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; ++k) {
            for (j = 0; j < n; ++j) {
                for (i = 0; i < n; ++i) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                             u[i][j - 1][k] + u[i][j + 1][k] +
                                             u[i][j][k - 1] + u[i][j][k + 1] +
                                             u[i][j][k]);
                }
            }
        }
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    // Access elements in linearized 3D array
                    int idx = i + j * n + k * n * n;
                    int idx_im1 = (i - 1) + j * n + k * n * n;
                    int idx_ip1 = (i + 1) + j * n + k * n * n;
                    int idx_jm1 = i + (j - 1) * n + k * n * n;
                    int idx_jp1 = i + (j + 1) * n + k * n * n;
                    int idx_km1 = i + j * n + (k - 1) * n * n;
                    int idx_kp1 = i + j * n + (k + 1) * n * n;

                    unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] + u[idx_jm1] +
                                         u[idx_jp1] + u[idx_km1] + u[idx_kp1] + u[idx]);
                }
            }
        }
        #pragma acc end parallel loop

        // Copy unew to u
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    int idx = i + j * n + k * n * n;
                    u[idx] = unew[idx];
                }
            }
        }
        #pragma acc end parallel loop
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 0; iter < niter; iter++) {
        
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    int idx = i + n * (j + n * k);             // Index for 1D array representation
                    int idx_im1 = (i-1) + n * (j + n * k);     // i - 1 index
                    int idx_ip1 = (i+1) + n * (j + n * k);     // i + 1 index
                    int idx_jm1 = i + n * ( (j-1) + n * k);    // j - 1 index
                    int idx_jp1 = i + n * ( (j+1) + n * k);    // j + 1 index
                    int idx_km1 = i + n * (j + n * (k-1));     // k - 1 index
                    int idx_kp1 = i + n * (j + n * (k+1));     // k + 1 index
                    
                    unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] + u[idx_jm1] + u[idx_jp1] + u[idx_km1] + u[idx_kp1] + u[idx]);
                }
            }
        }

        // Update u with the new values in unew
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    int idx = i + n * (j + n * k);
                    u[idx] = unew[idx];
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    // Handle the indexing into the 3D arrays
    #define U(i, j, k) u[(i) + (j)*n + (k)*n*n]
    #define UNEW(i, j, k) unew[(i) + (j)*n + (k)*n*n]

    int i, j, k, iter;

    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    UNEW(i, j, k) = 0.125 * (U(i-1, j, k) + U(i+1, j, k) + 
                                             U(i, j-1, k) + U(i, j+1, k) + 
                                             U(i, j, k-1) + U(i, j, k+1) + 
                                             U(i, j, k));
                }
            }
        }

        // Copy unew back to u
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    U(i, j, k) = UNEW(i, j, k);
                }
            }
        }
    }

    #undef U
    #undef UNEW
}

Code Block 7:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int iter, i, j, k;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + n*(j + n*k)] = 0.125 * (u[(i-1) + n*(j + n*k)] + u[(i+1) + n*(j + n*k)] + 
                                                    u[i + n*((j-1) + n*k)] + u[i + n*((j+1) + n*k)] + 
                                                    u[i + n*(j + n*(k-1))] + u[i + n*(j + n*(k+1))] + 
                                                    u[i + n*(j + n*k)]);
                }
            }
        }
        #pragma acc loop
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i + n*(j + n*k)] = unew[i + n*(j + n*k)];
                }
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    // Helper macros for 3D array indexing
    #define U(i,j,k) u[(i) + (j)*n + (k)*n*n]
    #define UNEW(i,j,k) unew[(i) + (j)*n + (k)*n*n]

    int i, j, k, iter;
    for (iter = 0; iter < niter; iter++) {
        // OpenACC parallel loop with collapse of 3 nested loops
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    UNEW(i, j, k) = 0.125 * (U(i-1, j, k) + U(i+1, j, k) +
                                             U(i, j-1, k) + U(i, j+1, k) +
                                             U(i, j, k-1) + U(i, j, k+1) +
                                             U(i, j, k));
                }
            }
        }
        // Copy unew to u
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    U(i, j, k) = UNEW(i, j, k);
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;
    
    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i,j,k)
        for (k = 1; k < n-1; k++) {
            for (j = 1; j < n-1; j++) {
                for (i = 1; i < n-1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + 
                                             u[i][j][k]);
                }
            }
        }
        #pragma acc update self(unew[0:n][0:n][0:n])
        
        #pragma acc parallel loop collapse(3) private(i,j,k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
        #pragma acc update self(u[0:n][0:n][0:n])
    }
}

Code Block 10:
void jacobi_parallel(int n, int niter, double u[n][n][n], double unew[n][n][n]) {
    int i, j, k, iter;

    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                             u[i][j-1][k] + u[i][j+1][k] +
                                             u[i][j][k-1] + u[i][j][k+1] +
                                             u[i][j][k]);
                }
            }
        }
        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

