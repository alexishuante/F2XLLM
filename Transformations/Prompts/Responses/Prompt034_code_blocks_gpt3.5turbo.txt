Code Block 1:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;
    #pragma acc parallel loop
    for(i = 0; i < n; i++) {
        sum = 0.0;
        for(j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 2:
x
    for (int i = 0; i < N; i++) {
        x[i] = i + 1;
        for (int j = 0; j < N; j++) {
            A[i][j] = i + j + 1;
        }
    }

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i*n+j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 3:
void gemv(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    cudaMalloc(&d_A, n * n * sizeof(float));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));

    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    int block_size = 256;
    int grid_size = (n + block_size - 1) / block_size;
    gemv_parallel<<<grid_size, block_size>>>(n, d_A, d_x, d_y);

    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 4:
void gemv(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;

    cudaMalloc((void**)&d_A, n*n*sizeof(float));
    cudaMalloc((void**)&d_x, n*sizeof(float));
    cudaMalloc((void**)&d_y, n*sizeof(float));

    cudaMemcpy(d_A, A, n*n*sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n*sizeof(float), cudaMemcpyHostToDevice);

    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    gemv_parallel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);

    cudaMemcpy(y, d_y, n*sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 5:
void gemv_parallel(int n, float *A, float *x, float *y) {
    #pragma acc parallel loop
    for (int i = 0; i < n; i++) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 6:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;
    
    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        sum = 0.0;
        for (j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_parallel_cuda(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 7:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;
    for (i = 0; i < n; i++) {
        sum = 0.0f;
        #pragma acc parallel loop
        for (j = 0; j < n; j++) {
            sum += A[i*n+j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i*n+j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 8:
__global__
void gemv_parallel(int n, float A[N][N], float x[N], float y[N]) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 9:
void gemv(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;
    
    for (i = 0; i < n; i++) {
        sum = 0.0;
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 10:
void gemv_parallel_host(int n, float *A_host, float *x_host, float *y_host) {
    float *A_device, *x_device, *y_device;
    cudaMalloc(&A_device, n * n * sizeof(float));
    cudaMalloc(&x_device, n * sizeof(float));
    cudaMalloc(&y_device, n * sizeof(float));

    cudaMemcpy(A_device, A_host, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_device, x_host, n * sizeof(float), cudaMemcpyHostToDevice);

    int block_size = 256;
    int grid_size = (n + block_size - 1) / block_size;

    gemv_parallel<<<grid_size, block_size>>>(n, A_device, x_device, y_device);

    cudaMemcpy(y_host, y_device, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(A_device);
    cudaFree(x_device);
    cudaFree(y_device);
}

__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

