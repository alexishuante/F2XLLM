--------------- Code Block 1 ---------------
__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    
    if(i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                                 u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
    }
}

void jacobi(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, (n + blockSize.z - 1) / blockSize.z);

    for(int iter = 0; iter < niter; iter++) {
        jacobi_parallel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(d_u, unew, size, cudaMemcpyHostToDevice);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 2 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x*blockDim.x + threadIdx.x;
    int j = blockIdx.y*blockDim.y + threadIdx.y;
    int k = blockIdx.z*blockDim.z + threadIdx.z;
    
    if (i >= 1 && i < n-1 && j >= 1 && j < n-1 && k >= 1 && k < n-1) {
        int index = i + j*n + k*n*n;
        unew[index] = 0.125 * (u[index-n] + u[index+n] + u[index-n*n] +
                              u[index+n*n] + u[index-n*n*n] + u[index+n*n*n] + u[index]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);
    
    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);
    
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    
    dim3 dimBlock(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
    dim3 dimGrid(GRID_SIZE, GRID_SIZE, GRID_SIZE);
    
    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<dimGrid, dimBlock>>>(d_u, d_unew, n);
        
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }
    
    cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
    
    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 3 ---------------
__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] 
            + u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
    }
}

void jacobi_operation(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 dimBlock(16, 16, 16); // You may need to adjust block size based on your GPU
    dim3 dimGrid((n + dimBlock.x - 1) / dimBlock.x, (n + dimBlock.y - 1) / dimBlock.y, (n + dimBlock.z - 1) / dimBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel<<<dimGrid, dimBlock>>>(d_u, d_unew, n);
        cudaDeviceSynchronize();
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 4 ---------------
__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        unew[i + n * (j + n * k)] = 0.125 * (u[(i-1) + n * (j + n * k)] + u[(i+1) + n * (j + n * k)] + u[i + n * ((j-1) + n * k)] 
                                            + u[i + n * ((j+1) + n * k)] + u[i + n * (j + n * (k-1)] + u[i + n * (j + n * (k+1))] 
                                            + u[i + n * (j + n * k)]);
    }
}

void jacobi_operation(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 5 ---------------
__global__ void jacobi_parallel_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                          u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                          u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *u_dev, *unew_dev;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&u_dev, size);
    cudaMalloc(&unew_dev, size);

    cudaMemcpy(u_dev, u, size, cudaMemcpyHostToDevice);

    dim3 dimBlock(8, 8, 8);
    dim3 dimGrid((n+dimBlock.x-1)/dimBlock.x, (n+dimBlock.y-1)/dimBlock.y, (n+dimBlock.z-1)/dimBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_kernel<<<dimGrid, dimBlock>>>(u_dev, unew_dev, n);
        cudaDeviceSynchronize();
        cudaMemcpy(unew, unew_dev, size, cudaMemcpyDeviceToHost);

        double *temp = u_dev;
        u_dev = unew_dev;
        unew_dev = temp;
    }

    cudaFree(u_dev);
    cudaFree(unew_dev);
}

--------------- Code Block 6 ---------------
__global__ void jacobi_parallel_kernel(double *u, double *unew) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < N - 1 && j >= 1 && j < N - 1 && k >= 1 && k < N - 1) {
        int idx = k * N * N + j * N + i;
        unew[idx] = 0.125 * (u[idx - N * N] + u[idx + N * N] + u[idx - N] +
                             u[idx + N] + u[idx - 1] + u[idx + 1] + u[idx]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = N * N * N * sizeof(double);

    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((N + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (N + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (N + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew);
        cudaDeviceSynchronize();

        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 7 ---------------
__global__ void jacobi_parallel_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if(i < n-1 && j < n-1 && k < n-1) {
        int idx = k * n * n + j * n + i;
        unew[idx] = 0.125 * (u[idx - n * n] + u[idx + n * n] + u[idx - n] + u[idx + n] 
                         + u[idx - 1] + u[idx + 1] + u[idx]);
    }
}

void jacobi_parallel(double *h_u, double *h_unew, int n, int niter) {
    int size = n * n * n * sizeof(double);
    double *d_u, *d_unew;
    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, h_u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, (n + blockSize.z - 1) / blockSize.z);

    for(int iter = 0; iter < niter; iter++) {
        jacobi_parallel_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaMemcpy(h_unew, d_unew, size, cudaMemcpyDeviceToHost);
        memcpy(h_u, h_unew, size);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 8 ---------------
__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    int j = threadIdx.y + blockIdx.y * blockDim.y;
    int k = threadIdx.z + blockIdx.z * blockDim.z;

    if (i > 1 && i < n-1 && j > 1 && j < n-1 && k > 1 && k < n-1) {
        int index = i + j * n + k * n * n;
        unew[index] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
                              u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + 
                              u[i + j * n + (k-1) * n * n] + u[i + j * n + (k+1) * n * n] + 
                              u[i + j * n + k * n * n]);
    }
}

--------------- Code Block 9 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        int index = i + j*n + k*n*n;
        unew[index] = 0.125 * (u[index-n] + u[index+n] + u[index-1] + 
                              u[index+1] + u[index-n*n] + u[index+n*n] + u[index]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n+7)/8, (n+7)/8, (n+7)/8);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 10 ---------------
__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        int index = i + j*n + k*n*n;
        unew[index] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                              u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n] + u[i + j*n + (k+1)*n] + u[index]);
    }
}

void jacobi_operation(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    cudaMalloc(&d_u, sizeof(double) * n * n * n);
    cudaMalloc(&d_unew, sizeof(double) * n * n * n);
    
    cudaMemcpy(d_u, u, sizeof(double) * n * n * n, cudaMemcpyHostToDevice);
    
    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, sizeof(double) * n * n * n, cudaMemcpyDeviceToDevice);
    }
    
    cudaMemcpy(unew, d_unew, sizeof(double) * n * n * n, cudaMemcpyDeviceToHost);
    
    cudaFree(d_u);
    cudaFree(d_unew);
}

