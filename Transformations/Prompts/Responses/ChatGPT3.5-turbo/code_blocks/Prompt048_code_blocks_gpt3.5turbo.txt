--------------- Code Block 1 ---------------
void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    Kokkos::parallel_for("jacobi_kernel", niter, KOKKOS_LAMBDA (const int iter) {
        for (int k = 1; k < n-1; k++) {
            for (int j = 1; j < n-1; j++) {
                for (int i = 1; i < n-1; i++) {
                    unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k)
                                             + u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
                }
            }
        }
    });

    Kokkos::deep_copy(u, unew);
}

--------------- Code Block 2 ---------------
void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    Kokkos::parallel_for("JacobiOperation", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
        KOKKOS_LAMBDA(int i, int j, int k) {
            unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k)
                           + u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
        }
    );

    Kokkos::deep_copy(u, unew);
}

--------------- Code Block 3 ---------------
void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    Kokkos::parallel_for("jacobi_kernel", niter, KOKKOS_LAMBDA(const int iter) {
        Kokkos::parallel_for("jacobi_ijk", n-2, KOKKOS_LAMBDA(const int k) {
            for (int j = 1; j < n-1; j++) {
                for (int i = 1; i < n-1; i++) {
                    unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                                             u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
                }
            }
        });
        Kokkos::parallel_for("jacobi_copy", n, KOKKOS_LAMBDA(const int i) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    u(i, j, k) = unew(i, j, k);
                }
            }
        });
    });
}

--------------- Code Block 4 ---------------
void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
  Kokkos::parallel_for("jacobi_kernel", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
    KOKKOS_LAMBDA (const int i, const int j, const int k) {
      unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                               u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
    });

  Kokkos::deep_copy(u, unew);

  for (int iter = 1; iter < niter; iter++) {
    Kokkos::parallel_for("jacobi_kernel", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
      KOKKOS_LAMBDA (const int i, const int j, const int k) {
        unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                                 u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
      });

    Kokkos::deep_copy(u, unew);
  }
}

--------------- Code Block 5 ---------------
void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    Kokkos::parallel_for("Jacobi", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}), KOKKOS_LAMBDA (const int i, const int j, const int k){
        unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                                 u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
    });

    Kokkos::deep_copy(u, unew);

    for(int iter = 1; iter <= niter; iter++) {
        Kokkos::parallel_for("Jacobi", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}), KOKKOS_LAMBDA (const int i, const int j, const int k){
            unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                                     u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
        });

        Kokkos::deep_copy(u, unew);
    }
}

--------------- Code Block 6 ---------------
void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    Kokkos::parallel_for("jacobi_parallel", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
        KOKKOS_LAMBDA(int i, int j, int k) {
            unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                                     u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
        });

    Kokkos::deep_copy(u, unew);

    for(int iter = 1; iter <= niter; iter++) {
        Kokkos::parallel_for("jacobi_parallel", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA(int i, int j, int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                                        u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
            });

        Kokkos::deep_copy(u, unew);
    }
}

--------------- Code Block 7 ---------------
void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
  Kokkos::parallel_for("jacobi_kernel", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
    KOKKOS_LAMBDA(int i, int j, int k) {
      unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                                u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
    });

  Kokkos::deep_copy(u, unew);

  for (int iter = 1; iter < niter; iter++) {
    Kokkos::parallel_for("jacobi_kernel", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
      KOKKOS_LAMBDA(int i, int j, int k) {
        unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                                  u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
      });

    Kokkos::deep_copy(u, unew);
  }
}

--------------- Code Block 8 ---------------
void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, const int n, const int niter) {
    Kokkos::parallel_for("jacobi_kernel", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({1, 1, 1}, {n-1, n-1, n-1}), KOKKOS_LAMBDA(int i, int j, int k) {
        unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) + u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
    });

    Kokkos::deep_copy(u, unew);
}

--------------- Code Block 9 ---------------
void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    Kokkos::parallel_for("jacobi_parallel", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({1, 1, 1}, {n - 1, n - 1, n - 1}),
        KOKKOS_LAMBDA(int i, int j, int k) {
            unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                                      u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
        });

    Kokkos::deep_copy(u, unew);

    for (int iter = 1; iter < niter; ++iter) {
        Kokkos::parallel_for("jacobi_parallel", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({1, 1, 1}, {n - 1, n - 1, n - 1}),
            KOKKOS_LAMBDA(int i, int j, int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                                          u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
            });

        Kokkos::deep_copy(u, unew);
    }
}

--------------- Code Block 10 ---------------
void jacobi_parallel(Kokkos::View<double***> u, Kokkos::View<double***> unew, int n, int niter) {
    Kokkos::parallel_for("jacobi_parallel", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({1, 1, 1}, {n-1, n-1, n-1}),
        KOKKOS_LAMBDA (const int i, const int j, const int k) {
            unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k)
                + u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
        });
    
    Kokkos::deep_copy(u, unew);

    for (int iter = 1; iter < niter; ++iter) {
        Kokkos::parallel_for("jacobi_parallel", Kokkos::MDRangePolicy<Kokkos::Rank<3>>({1, 1, 1}, {n-1, n-1, n-1}),
            KOKKOS_LAMBDA (const int i, const int j, const int k) {
                unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k)
                    + u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
            });

        Kokkos::deep_copy(u, unew);
    }
}

