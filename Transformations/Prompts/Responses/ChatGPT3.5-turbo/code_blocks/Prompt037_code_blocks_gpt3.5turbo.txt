--------------- Code Block 1 ---------------
__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n]
                                         + u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n]
                                         + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n]
                                         + u[i + j*n + k*n*n]);
    }
}

void jacobi(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 2 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                          u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                          u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                          u[i + j*n + k*n*n]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n+7)/8, (n+7)/8, (n+7)/8);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaDeviceSynchronize();
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 3 ---------------
__global__ void jacobi_parallel_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                            u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                            u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 block(8, 8, 8);
    dim3 grid((n + block.x - 1) / block.x, (n + block.y - 1) / block.y, (n + block.z - 1) / block.z);

    for(int iter = 0; iter < niter; iter++) {
        jacobi_parallel_kernel<<<grid, block>>>(d_u, d_unew, n);

        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, unew, size, cudaMemcpyHostToDevice);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 4 ---------------
__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - n * n] +
            u[idx + n * n] + u[idx - 1] + u[idx + 1] + u[idx]);
    }
}

void jacobi_operation(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 5 ---------------
__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[i*n*n + j*n + k] = 0.125 * (u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] + u[i*n*n + (j-1)*n + k] +
                                          u[i*n*n + (j+1)*n + k] + u[i*n*n + j*n + k-1] + u[i*n*n + j*n + k+1] + u[i*n*n + j*n + k]);
    }
}

void jacobi_cuda(double *u, double *unew, int n, int niter) {
    int size = n * n * n * sizeof(double);
    double *d_u, *d_unew;

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);

        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }
    
    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 6 ---------------
__global__ void jacobi_gpu(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        unew[i + n * j + n * n * k] = 0.125 * (u[(i-1) + n * j + n * n * k] + u[(i+1) + n * j + n * n * k] +
                                                u[i + n * (j-1) + n * n * k] + u[i + n * (j+1) + n * n * k] +
                                                u[i + n * j + n * n * (k-1)] + u[i + n * j + n * n * (k+1)] +
                                                u[i + n * j + n * n * k]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;

    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(16, 16, 16);
    dim3 numBlocks(n/16, n/16, n/16);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_gpu<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaDeviceSynchronize();
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 7 ---------------
__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    
    if (i > 0 && i < n - 1 && j > 0 && j < n -1 && k > 0 && k < n - 1) {
        unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] + u[i + (j-1) * n + k * n * n] +
            u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] + u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
    }
}

void jacobi(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 gridSize((n+BLOCK_SIZE-1)/BLOCK_SIZE, (n+BLOCK_SIZE-1)/BLOCK_SIZE, (n+BLOCK_SIZE-1)/BLOCK_SIZE);
    dim3 blockSize(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, unew, size, cudaMemcpyHostToDevice);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 8 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n-1 && j >= 1 && j < n-1 && k >= 1 && k < n-1) {
        unew[i*n*n + j*n + k] = 0.125 * (u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] +
                                          u[i*n*n + (j-1)*n + k] + u[i*n*n + (j+1)*n + k] +
                                          u[i*n*n + j*n + k-1] + u[i*n*n + j*n + k+1] + u[i*n*n + j*n + k]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(16, 16, 16);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToDevice);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 9 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[(i*n*n) + (j*n) + k] = 0.125 * (u[((i-1)*n*n) + (j*n) + k] + u[((i+1)*n*n) + (j*n) + k] + u[(i*n*n) + ((j-1)*n) + k] +
                                               u[(i*n*n) + ((j+1)*n) + k] + u[(i*n*n) + (j*n) + (k-1)] + u[(i*n*n) + (j*n) + (k+1)] + u[(i*n*n) + (j*n) + k]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);
    
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    
    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n+7)/8, (n+7)/8, (n+7)/8);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaDeviceSynchronize();
        
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);

        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }
    
    cudaFree(d_u);
    cudaFree(d_unew);
}

--------------- Code Block 10 ---------------
__global__ void jacobi_parallel_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x*blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y*blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z*blockDim.z + threadIdx.z + 1;
    
    if (i < n-1 && j < n-1 && k < n-1) {
        int index = i + j*n + k*n*n;
        unew[index] = 0.125 * (u[index-1] + u[index+1] + u[index-n] + u[index+n] + u[index-n*n] + u[index+n*n] + u[index]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    int size = n*n*n*sizeof(double);
    
    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);
    
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    
    dim3 threadsPerBlock(16, 16, 1);
    dim3 numBlocks((n-1)/threadsPerBlock.x + 1, (n-1)/threadsPerBlock.y + 1, (n-1)/threadsPerBlock.z + 1);
    
    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, unew, size, cudaMemcpyHostToDevice);
    }
    
    cudaFree(d_u);
    cudaFree(d_unew);
}

