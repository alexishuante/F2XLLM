--------------- Code Block 1 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
        y[idx] = a * x[idx] + y[idx];
    }
}

void saxpy(int n, float a, float *x, float *y) {
    float *d_x, *d_y;
    
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));
    
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);
    
    int block_size = 256;
    int grid_size = (n + block_size - 1) / block_size;
    
    hipLaunchKernelGGL(saxpy_kernel, dim3(grid_size), dim3(block_size), 0, 0, n, a, d_x, d_y);
    
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 2 ---------------
void saxpy(int n, float a, float *x, float *y){
    hipLaunchKernelGGL([=] HIP_KERNEL_NAME(axpy), dim3(1, 1, 1), dim3(n, 1, 1), 0, 0, n, a, x, y);
}

--------------- Code Block 3 ---------------
__global__
void hip_axpy(int n, float a, float *x, float *y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy(int n, float a, float *x, float *y) {
    hipLaunchKernelGGL(hip_axpy, dim3((n + 255) / 256), dim3(256), 0, 0, n, a, x, y);
}

--------------- Code Block 4 ---------------
__global__ void axpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void hip_axpy(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    hipLaunchKernelGGL(axpy, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, x, y);
}

--------------- Code Block 5 ---------------
void saxpy(int n, float a, float *x, float *y){
    hipLaunchKernelGGL([=] __device__ (int i) {
        if (i < n) {
            y[i] = a * x[i] + y[i];
        }
    }, dim3((n + 255) / 256), dim3(256), 0, 0, n);
}

--------------- Code Block 6 ---------------
void saxpy(int n, float a, float *x, float *y) {
    hipLaunchKernelGGL([=](hipLaunchParm lp) {
        int i = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;
        if (i < n) {
            y[i] = a * x[i] + y[i];
        }
    }, dim3((n + 255) / 256), dim3(256), 0, 0, n, a, x, y);
}

--------------- Code Block 7 ---------------
__global__ void hip_saxpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy(int n, float a, float *x, float *y) {
    float *d_x, *d_y;

    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    hipLaunchKernelGGL(hip_saxpy, dim3((n + 255) / 256), dim3(256), 0, 0, n, a, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 8 ---------------
__global__ void saxpy(int n, float a, float* x, float* y) {
    int index = blockIdx.x * blockDim.x + threadIdx.x;
    if (index < n) {
        y[index] = a * x[index] + y[index];
    }
}

void hip_saxpy(int n, float a, float* x, float* y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    hipLaunchKernelGGL(saxpy, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, x, y);
    hipDeviceSynchronize();
}

--------------- Code Block 9 ---------------
void saxpy(int n, float a, float* x, float* y) {
    hipLaunchKernelGGL(
        [=] __global__ void saxpy_kernel(float a, float* x, float* y) {
            int i = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;
            if(i < n) {
                y[i] = a * x[i] + y[i];
            }
        },
        dim3((n + 255) / 256), dim3(256), 0, 0, a, x, y
    );
}

--------------- Code Block 10 ---------------
__global__ void axpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if(i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    hipLaunchKernelGGL(axpy, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, x, y);
}

