--------------- Code Block 1 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA (const int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    });
}

--------------- Code Block 2 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}

--------------- Code Block 3 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, [=] (int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}

--------------- Code Block 4 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = row[i]; j < row[i + 1]; ++j) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    });
}

--------------- Code Block 5 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
  Kokkos::parallel_for(n, KOKKOS_LAMBDA (int i) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  });
}

--------------- Code Block 6 ---------------
void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  });
}

--------------- Code Block 7 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::View<double*> y_view("y_view", n);
    Kokkos::View<double*> x_view(x, n);
    Kokkos::View<double*> val_view(val, nnz);
    Kokkos::View<int*> row_view(row, n+1);
    Kokkos::View<int*> col_view(col, nnz);

    Kokkos::parallel_for(n, KOKKOS_LAMBDA (const int i) {
        double sum = 0.0;
        for (int j = row_view(i); j < row_view(i+1); j++) {
            sum += val_view(j) * x_view(col_view(j));
        }
        y_view(i) = sum;
    });

    Kokkos::deep_copy(y, y_view);
}

--------------- Code Block 8 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA (const int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}

--------------- Code Block 9 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y)
{
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(const int i)
    {
        double sum = 0.0;
        for (int j = row[i]; j < row[i + 1]; j++)
        {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    });
    Kokkos::fence();
}

--------------- Code Block 10 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::View<double*> y_view(y, n);
    Kokkos::View<double*> x_view(x, n);
    Kokkos::View<double*> val_view(val, nnz);
    Kokkos::View<int*> row_view(row, n + 1);
    Kokkos::View<int*> col_view(col, nnz);

    Kokkos::parallel_for("SpMV", n, KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = row_view(i); j < row_view(i + 1); j++) {
            sum += val_view(j) * x_view(col_view(j));
        }
        y_view(i) = sum;
    });
}

