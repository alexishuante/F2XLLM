--------------- Code Block 1 ---------------
void gemv(int n, float* A, float* x, float* y) {
    float* d_A, *d_x, *d_y;
    hipMalloc(&d_A, n*n*sizeof(float));
    hipMalloc(&d_x, n*sizeof(float));
    hipMalloc(&d_y, n*sizeof(float));

    hipMemcpy(d_A, A, n*n*sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n*sizeof(float), hipMemcpyHostToDevice);

    hipLaunchKernelGGL(gemv_kernel, dim3((n + 255) / 256), dim3(256), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n*sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 2 ---------------
void gemv_parallel(int n, float* A, float* x, float* y) {
    hipLaunchKernelGGL(
        [=] __device__(int i) {
            float sum = 0.0f;
            for (int j = 0; j < n; j++) {
                sum += A[i*n + j] * x[j];
            }
            y[i] = sum;
        },
        dim3(n),
        dim3(1),
        0,
        NULL
    );
}

--------------- Code Block 3 ---------------
void gemv_parallel(int n, float* A, float* x, float* y) {
    float *d_A, *d_x, *d_y;
    
    HIP_ASSERT(hipMalloc(&d_A, n * n * sizeof(float)));
    HIP_ASSERT(hipMalloc(&d_x, n * sizeof(float)));
    HIP_ASSERT(hipMalloc(&d_y, n * sizeof(float)));
    
    HIP_ASSERT(hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice));
    HIP_ASSERT(hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice));
    
    hipLaunchKernelGGL(gemv_kernel, dim3(n), dim3(1), 0, 0, n, d_A, d_x, d_y);
    
    HIP_ASSERT(hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost));
    
    HIP_ASSERT(hipFree(d_A));
    HIP_ASSERT(hipFree(d_x));
    HIP_ASSERT(hipFree(d_y));
}

--------------- Code Block 4 ---------------
__global__ void kernel_gemv_hip(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    float sum = 0.0;
    if (i < n) {
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_hip(int n, float *A, float *x, float *y) {
    hipLaunchKernelGGL(kernel_gemv_hip, dim3(1), dim3(n), 0, 0, n, A, x, y);
}

--------------- Code Block 5 ---------------
void gemv_parallel(int n, float *A, float *x, float *y) {
    hipError_t err;
    
    // Allocate memory on the GPU
    float *d_A, *d_x, *d_y;
    err = hipMalloc(&d_A, n * n * sizeof(float));
    err = hipMalloc(&d_x, n * sizeof(float));
    err = hipMalloc(&d_y, n * sizeof(float));
    
    // Copy data from host to device
    err = hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    err = hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    
    // Launch kernel
    hipLaunchKernelGGL(kernel_gemv_parallel, dim3(n), dim3(1), 0, 0, n, d_A, d_x, d_y);
    
    // Copy result back to host
    err = hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    // Free memory on the GPU
    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 6 ---------------
__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float* A, float* x, float* y) {
    float *d_A, *d_x, *d_y;

    hipMalloc(&d_A, n * n * sizeof(float));
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);

    hipMalloc(&d_x, n * sizeof(float));
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    hipMalloc(&d_y, n * sizeof(float);

    hipLaunchKernelGGL(gemv_kernel, dim3((n + 255) / 256), dim3(256), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

--------------- Code Block 7 ---------------
void gemv_parallel(int n, float* A, float* x, float* y)
{
    const int blockSize = 256;
    const int numBlocks = (n + blockSize - 1) / blockSize;

    hipLaunchKernelGGL(
        [=] __global__ void gemv_kernel(int n, float* A, float* x, float* y)
        {
            int idx = hipBlockDim_x * hipBlockIdx_x + hipThreadIdx_x;

            if (idx < n)
            {
                float sum = 0.0f;
                for (int j = 0; j < n; j++)
                {
                    sum += A[idx * n + j] * x[j];
                }
                y[idx] = sum;
            }
        },
        dim3(numBlocks), dim3(blockSize), 0, 0, n, A, x, y
    );
}

--------------- Code Block 8 ---------------
__global__ void gemv_kernel(int n, float* d_A, float* d_x, float* d_y) {
    int i = threadIdx.x;
    float sum = 0.0;

    for (int j = 0; j < n; j++) {
        sum += d_A[i * n + j] * d_x[j];
    }

    d_y[i] = sum;
}

void gemv_hip(int n, float* d_A, float* d_x, float* d_y) {
    hipLaunchKernelGGL(gemv_kernel, dim3(1, 1, 1), dim3(n, 1, 1), 0, 0, n, d_A, d_x, d_y);
}

--------------- Code Block 9 ---------------
__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    float sum = 0.0;

    if (i < n) {
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float* A, float* x, float* y) {
    int i, j;
    float sum;

    hipLaunchKernelGGL((gemv_kernel), dim3(1), dim3(n), 0, 0, n, A, x, y);
}

--------------- Code Block 10 ---------------
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    float sum;
    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        sum = 0.0;
        for (j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    }
}

