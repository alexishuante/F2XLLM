--------------- Code Block 1 ---------------
void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA (const int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}

--------------- Code Block 2 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
  Kokkos::View<double*> val_view(val, nnz);
  Kokkos::View<int*> row_view(row, n+1);
  Kokkos::View<int*> col_view(col, nnz);
  Kokkos::View<double*> x_view(x, n);
  Kokkos::View<double*> y_view(y, n);

  Kokkos::parallel_for("spmv_parallel", n, KOKKOS_LAMBDA (const int i) {
    y_view(i) = 0.0;
    for (int j = row_view(i); j < row_view(i+1); j++) {
      y_view(i) += val_view(j) * x_view(col_view(j));
    }
  });

  Kokkos::fence();
}

--------------- Code Block 3 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::View<double*> y_kokkos("y", n);
    Kokkos::View<double*>::HostMirror y_host = Kokkos::create_mirror_view(y_kokkos);

    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        y_kokkos(i) = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y_kokkos(i) += val[j] * x[col[j]];
        }
    });

    Kokkos::deep_copy(y_host, y_kokkos);

    for (int i = 0; i < n; i++) {
        y[i] = y_host(i);
    }
}

--------------- Code Block 4 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::RangePolicy<> policy(0, n);
    
    Kokkos::parallel_for(policy, [=] (const int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
    
    Kokkos::fence();
}

--------------- Code Block 5 ---------------
void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
    Kokkos::parallel_for("spmv_parallel", n, KOKKOS_LAMBDA(int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}

--------------- Code Block 6 ---------------
void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA (int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}

--------------- Code Block 7 ---------------
void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  });
}

--------------- Code Block 8 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}

--------------- Code Block 9 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(const int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}

--------------- Code Block 10 ---------------
void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}

