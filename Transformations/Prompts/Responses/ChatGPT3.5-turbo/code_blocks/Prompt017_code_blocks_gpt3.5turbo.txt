--------------- Code Block 1 ---------------
void jacobi_parallel_acc(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;

  #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
  {
    for(iter = 0; iter < niter; iter++) {
      #pragma acc kernels
      {
        for(k = 1; k < n-1; k++) {
          for(j = 1; j < n-1; j++) {
            for(i = 1; i < n-1; i++) {
              int idx = i + j*n + k*n*n;
              unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] + u[idx - n] +
                                   u[idx + n] + u[idx - n*n] + u[idx + n*n] +
                                   u[idx]);
            }
          }
        }
      }
      
      #pragma acc update self(u[0:n*n*n])
    }
  }

}

--------------- Code Block 2 ---------------
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) 
{
    int i, j, k, iter;
    #pragma acc parallel loop present(u, unew)
    for (iter = 0; iter < niter; iter++) 
    {
        #pragma acc loop collapse(3)
        for (k = 1; k < n-1; k++) 
        {
            for (j = 1; j < n-1; j++) 
            {
                for (i = 1; i < n-1; i++) 
                {
                    int index = i + j*n + k*n*n;
                    unew[index] = 0.125 * (u[index-n] + u[index+n] + u[index-n*n] + 
                                          u[index+n*n] + u[index-n*n*n] + u[index+n*n*n] + u[index]);
                }
            }
        }
        
        #pragma acc update host(u)
        #pragma acc parallel loop present(u, unew)
        for (k = 1; k < n-1; k++) 
        {
            for (j = 1; j < n-1; j++) 
            {
                for (i = 1; i < n-1; i++) 
                {
                    int index = i + j*n + k*n*n;
                    u[index] = unew[index];
                }
            }
        }
    }
}

--------------- Code Block 3 ---------------
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads)
{
    int i, j, k, iter;

    #pragma acc data copyin(u[:n*n*n]) copyout(unew[:n*n*n])
    {
        for (iter = 0; iter < niter; iter++)
        {
            #pragma acc parallel loop collapse(3) present(u[:n*n*n], unew[:n*n*n])
            for (k = 1; k < n-1; k++)
            {
                for (j = 1; j < n-1; j++)
                {
                    for (i = 1; i < n-1; i++)
                    {
                        int idx = i + n*j + n*n*k;
                        unew[idx] = 0.125 * (u[idx-1] + u[idx+1] + u[idx-n] +
                                             u[idx+n] + u[idx-n*n] + u[idx+n*n] + u[idx]);
                    }
                }
            }

            #pragma acc parallel loop collapse(3) present(u[:n*n*n], unew[:n*n*n])
            for (k = 1; k < n-1; k++)
            {
                for (j = 1; j < n-1; j++)
                {
                    for (i = 1; i < n-1; i++)
                    {
                        int idx = i + n*j + n*n*k;
                        u[idx] = unew[idx];
                    }
                }
            }
        }
    }
}

--------------- Code Block 4 ---------------
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    #pragma acc data copy(u[:n*n*n], unew[:n*n*n])
    {
        #pragma acc parallel loop num_gangs(n) num_workers(nthreads) collapse(3)
        for (iter = 0; iter < niter; iter++) {
            #pragma acc loop independent
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + n*j + n*n*k] = 0.125 * (u[(i-1) + n*j + n*n*k] + u[(i+1) + n*j + n*n*k] +
                                                          u[i + n*(j-1) + n*n*k] + u[i + n*(j+1) + n*n*k] +
                                                          u[i + n*j + n*n*(k-1)] + u[i + n*j + n*n*(k+1)] +
                                                          u[i + n*j + n*n*k]);
                    }
                }
            }
            #pragma acc parallel loop independent collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        u[i + n*j + n*n*k] = unew[i + n*j + n*n*k];
                    }
                }
            }
        }
    }
}

--------------- Code Block 5 ---------------
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        #pragma acc parallel loop collapse(3) num_gangs(n) num_workers(nthreads)
        for(iter = 0; iter < niter; iter++) {
            #pragma acc loop independent
            for(k = 1; k < n - 1; k++) {
                for(j = 1; j < n - 1; j++) {
                    for(i = 1; i < n - 1; i++) {
                        unew[i + n*(j + n*k)] = 0.125 * (u[(i-1) + n*(j + n*k)] + u[(i+1) + n*(j + n*k)] + u[i + n*((j-1) + n*k)] +
                                                          u[i + n*(j + n*(k-1))] + u[i + n*(j + n*(k+1))] + u[i + n*(j + n*k)] + u[i + n*(j + n*k)]);
                    }
                }
            }
            #pragma acc update self(u[0:n*n*n]) async(iter)
            #pragma acc wait(iter)
        }
    }
}

--------------- Code Block 6 ---------------
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    #pragma acc data copyin(u[0:n*n*n]) copy(unew[0:n*n*n])
    {
        #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
        {
            for (iter = 0; iter < niter; iter++) {
                #pragma omp for schedule(static)
                for (k = 1; k < n - 1; k++) {
                    for (j = 1; j < n - 1; j++) {
                        for (i = 1; i < n - 1; i++) {
                            unew[i + n*j + n*n*k] = 0.125 * (u[i-1 + n*(j + n*k)] + u[i+1 + n*(j + n*k)] + u[i + n*(j-1 + n*k)] +
                                u[i + n*(j+1 + n*k)] + u[i + n*(j + n*k-1)] + u[i + n*(j + n*k+1)] + u[i + n*(j + n*k)]);
                        }
                    }
                }
                #pragma omp barrier
                #pragma acc update device(u[0:n*n*n])
                #pragma acc update host(unew[0:n*n*n])
            }
        }
    }
}

--------------- Code Block 7 ---------------
void jacobi_parallel(double* u, double* unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    #pragma acc data copyin(u[:n*n*n]) copyout(unew[:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) present(u[:n*n*n], unew[:n*n*n])
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                         u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                         u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                    }
                }
            }
            #pragma acc update self(u[:n*n*n])
        }
    }
}

--------------- Code Block 8 ---------------
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) present(u[:n*n*n], unew[:n*n*n])
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[i-1 + j*n + k*n*n] + u[i+1 + j*n + k*n*n] +
                            u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                            u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                    }
                }
            }
            
            #pragma acc parallel loop collapse(3) present(u[:n*n*n], unew[:n*n*n])
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                    }
                }
            }
        }
    }
}

--------------- Code Block 9 ---------------
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma acc parallel num_gangs(nthreads) present(u[:n*n*n], unew[:n*n*n])
    for(iter = 0; iter < niter; iter++) {
        #pragma acc loop
        for(k = 1; k < n - 1; k++) {
            for(j = 1; j < n - 1; j++) {
                for(i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                      u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        #pragma acc loop
        for(i = 0; i < n*n*n; i++) {
            u[i] = unew[i];
        }
    }
}

--------------- Code Block 10 ---------------
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma acc parallel loop present(u[:n*n*n], unew[:n*n*n]) num_gangs(n) num_workers(nthreads)
    for (iter = 0; iter < niter; iter++) {
        #pragma acc loop independent
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + n*j + n*n*k] = 0.125 * (u[(i-1) + n*j + n*n*k] + u[(i+1) + n*j + n*n*k] +
                                                      u[i + n*(j-1) + n*n*k] + u[i + n*(j+1) + n*n*k] +
                                                      u[i + n*j + n*n*(k-1)] + u[i + n*j + n*n*(k+1)] + u[i + n*j + n*n*k]);
                }
            }
        }
        
        #pragma acc update device(u[:n*n*n]) async(iter%2+1)
        #pragma acc update host(unew[:n*n*n]) async(iter%2+1)
        #pragma acc wait(iter%2+1)
    }
}

