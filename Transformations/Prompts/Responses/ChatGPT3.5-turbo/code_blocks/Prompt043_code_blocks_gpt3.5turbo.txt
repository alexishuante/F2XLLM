--------------- Code Block 1 ---------------
void gemv_parallel(int n, double* A, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA (const int i) {
        double sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    });
    Kokkos::fence();
}

--------------- Code Block 2 ---------------
void gemv_parallel(int n, Kokkos::View<float**> A, Kokkos::View<float*> x, Kokkos::View<float*> y) {
    Kokkos::parallel_for("gemv_parallel", n, KOKKOS_LAMBDA (const int& i){
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
}

--------------- Code Block 3 ---------------
void gemv_parallel(int n, double *A, double *x, double *y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i*n + j] * x[j];
        }
        y[i] = sum;
    });
}

--------------- Code Block 4 ---------------
void gemv_parallel(int n, Kokkos::View<double**> A, Kokkos::View<double*> x, Kokkos::View<double*> y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
    Kokkos::fence();
}

--------------- Code Block 5 ---------------
void gemv_parallel(int n, Matrix A, Vector x, Vector y) {
    Kokkos::parallel_for(n, [=] (const int i) {
        double sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });

    Kokkos::fence();
}

--------------- Code Block 6 ---------------
void gemv_parallel(int n, double* A, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    });
}

--------------- Code Block 7 ---------------
void gemv_parallel(int n, Kokkos::View<double**> A, Kokkos::View<double*> x, Kokkos::View<double*> y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(const int i) {
        double sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
}

--------------- Code Block 8 ---------------
void gemv_parallel(int n, Kokkos::View<double**> A, Kokkos::View<double*> x, Kokkos::View<double*> y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
    Kokkos::fence();
}

--------------- Code Block 9 ---------------
void gemv_parallel(int n, Kokkos::View<double**> A, Kokkos::View<double*> x, Kokkos::View<double*> y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA (int i) {
        double sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
}

--------------- Code Block 10 ---------------
void gemv_parallel(int n, Kokkos::View<double**> A, Kokkos::View<double*> x, Kokkos::View<double*> y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A(i, j) * x(j);
        }
        y(i) = sum;
    });
}

