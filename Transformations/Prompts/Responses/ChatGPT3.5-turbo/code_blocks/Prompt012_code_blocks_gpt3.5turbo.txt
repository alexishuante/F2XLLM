--------------- Code Block 1 ---------------
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc parallel loop present(x[0:n], y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

--------------- Code Block 2 ---------------
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc parallel loop
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

--------------- Code Block 3 ---------------
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc kernels
    {
        for (int i = 0; i < n; i++) {
            y[i] = a * x[i] + y[i];
        }
    }
}

--------------- Code Block 4 ---------------
void saxpy(int n, float a, float *x, float *y)
{
    #pragma acc kernels
    for (int i = 0; i < n; i++)
    {
        y[i] = a * x[i] + y[i];
    }
}

--------------- Code Block 5 ---------------
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc kernels
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

--------------- Code Block 6 ---------------
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc kernels
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

--------------- Code Block 7 ---------------
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc kernels
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

--------------- Code Block 8 ---------------
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc kernels
    {
        for (int i = 0; i < n; i++) {
            y[i] = a * x[i] + y[i];
        }
    }
}

--------------- Code Block 9 ---------------
void saxpy(int n, float a, float *x, float *y) {
    int i;
    
    #pragma acc parallel loop copyin(x[0:n]) copy(y[0:n])
    for(i=0; i<n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

--------------- Code Block 10 ---------------
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc parallel loop
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

