--------------- Output 1 ---------------
```cpp
#include <Kokkos_Core.hpp>

void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA (const int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    });
}
```

--------------- Output 2 ---------------
Here is a C++ function implemented with Kokkos that performs the Sparse matrix–vector multiplication (SpMV) operation equivalent to the given Fortran subroutine with OpenACC:

```cpp
#include <Kokkos_Core.hpp>

void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}
```

In this C++ function, we use Kokkos to parallelize the loop over `n` elements, equivalent to the loop over `n` elements in the OpenACC version. The Kokkos lambda function captures the input and output arrays (`val`, `row`, `col`, `x`, `y`) by default, and the computation within the loop is the same as in the Fortran subroutine.

Please make sure to include the necessary Kokkos headers and initialize Kokkos before calling this function.

--------------- Output 3 ---------------
```cpp
#include <Kokkos_Core.hpp>

void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, [=] (int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}
```

--------------- Output 4 ---------------
```cpp
#include <Kokkos_Core.hpp>

void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = row[i]; j < row[i + 1]; ++j) {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    });
}
```

--------------- Output 5 ---------------
Here is the equivalent function in C++ with Kokkos that implements the SpMV operation:

```cpp
#include <Kokkos_Core.hpp>

void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
  Kokkos::parallel_for(n, KOKKOS_LAMBDA (int i) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  });
}
```

In this C++ implementation using Kokkos, the `parallel_for` function is used to parallelize the loop over the rows of the sparse matrix. The lambda function passed to `parallel_for` captures the necessary arrays and performs the SpMV operation for each row.

--------------- Output 6 ---------------
```cpp
#include <Kokkos_Core.hpp>

void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  Kokkos::parallel_for(n, KOKKOS_LAMBDA(int i) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  });
}
```

--------------- Output 7 ---------------
```cpp
#include<Kokkos_Core.hpp>

void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::View<double*> y_view("y_view", n);
    Kokkos::View<double*> x_view(x, n);
    Kokkos::View<double*> val_view(val, nnz);
    Kokkos::View<int*> row_view(row, n+1);
    Kokkos::View<int*> col_view(col, nnz);

    Kokkos::parallel_for(n, KOKKOS_LAMBDA (const int i) {
        double sum = 0.0;
        for (int j = row_view(i); j < row_view(i+1); j++) {
            sum += val_view(j) * x_view(col_view(j));
        }
        y_view(i) = sum;
    });

    Kokkos::deep_copy(y, y_view);
}
```

--------------- Output 8 ---------------
Here is the equivalent function implemented in C++ with Kokkos that achieves the same Sparse matrix–vector multiplication (SpMV) operation:

```cpp
#include <Kokkos_Core.hpp>

void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::parallel_for(n, KOKKOS_LAMBDA (const int i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    });
}
```

Please note that you need to have Kokkos installed and set up in your C++ environment to run this function. Also, the data types used in Kokkos can be different from the ones used in Fortran, so make sure to adjust them as per your requirements.

--------------- Output 9 ---------------
Here is the equivalent function implemented in C++ with Kokkos:

```cpp
#include <iostream>
#include <Kokkos_Core.hpp>

void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y)
{
    Kokkos::parallel_for(n, KOKKOS_LAMBDA(const int i)
    {
        double sum = 0.0;
        for (int j = row[i]; j < row[i + 1]; j++)
        {
            sum += val[j] * x[col[j]];
        }
        y[i] = sum;
    });
    Kokkos::fence();
}

int main()
{
    int n = 4, nnz = 6;
    
    double val[6] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0};
    int row[5] = {0, 2, 3, 5, 6};
    int col[6] = {0, 1, 1, 2, 2, 3};
    double x[4] = {1.0, 2.0, 3.0, 4.0};
    double y[4] = {0.0};

    Kokkos::initialize();
    spmv_parallel(n, nnz, val, row, col, x, y);
    Kokkos::finalize();

    for (int i = 0; i < n; i++)
    {
        std::cout << "y[" << i << "] = " << y[i] << std::endl;
    }

    return 0;
}
```

In this C++ code, we use Kokkos to parallelize the Sparse matrix–vector multiplication operation. The `spmv_parallel` function takes the same input parameters as the Fortran subroutine and computes the result using parallel processing. The main function initializes Kokkos, calls the `spmv_parallel` function, finalizes Kokkos, and then prints the result.

--------------- Output 10 ---------------
Here is a C++ implementation of the SpMV operation using Kokkos:

```cpp
#include <iostream>
#include <Kokkos_Core.hpp>

void spmv_parallel(int n, int nnz, double* val, int* row, int* col, double* x, double* y) {
    Kokkos::View<double*> y_view(y, n);
    Kokkos::View<double*> x_view(x, n);
    Kokkos::View<double*> val_view(val, nnz);
    Kokkos::View<int*> row_view(row, n + 1);
    Kokkos::View<int*> col_view(col, nnz);

    Kokkos::parallel_for("SpMV", n, KOKKOS_LAMBDA(int i) {
        double sum = 0.0;
        for (int j = row_view(i); j < row_view(i + 1); j++) {
            sum += val_view(j) * x_view(col_view(j));
        }
        y_view(i) = sum;
    });
}

int main() {
    int n = 5;
    int nnz = 8;
    double val[] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};
    int row[] = {0, 2, 4, 6, 8, 8};
    int col[] = {0, 1, 1, 2, 2, 3, 4, 0};
    double x[] = {1.0, 2.0, 3.0, 4.0, 5.0};
    double y[n];

    Kokkos::initialize();
    spmv_parallel(n, nnz, val, row, col, x, y);
    Kokkos::finalize();

    for (int i = 0; i < n; i++) {
        std::cout << "y[" << i << "] = " << y[i] << std::endl;
    }

    return 0;
}
```

This C++ code uses Kokkos to parallelize the SpMV operation in a similar way to the Fortran implementation with OpenACC. The `parallel_for` loop iterates over the rows of the matrix and calculates the dot product with the corresponding vector `x`. Finally, the result is stored in the output vector `y`.

Please make sure you have Kokkos installed and set up correctly before compiling and running this code.

