--------------- Output 1 ---------------
```c
#include <hip/hip_runtime.h>

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    
    if (i < n && j < n && k < n && i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                          u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                          u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                          u[i + j*n + k*n*n]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);
    
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);
    
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    
    dim3 blockSize(16, 16, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x,
                  (n + blockSize.y - 1) / blockSize.y,
                  (n + blockSize.z - 1) / blockSize.z);
    
    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        
        hipMemcpy(unew, d_unew, size, hipMemcpyDeviceToHost);
        hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);
    }
    
    hipFree(d_u);
    hipFree(d_unew);
}
```

--------------- Output 2 ---------------
```c
void jacobi_parallel(double* u, double* unew, int n, int niter);

void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + n*j + n*n*k] = 0.125 * (u[(i-1) + n*j + n*n*k] + u[(i+1) + n*j + n*n*k] + u[i + n*(j-1) + n*n*k] +
                                                      u[i + n*(j+1) + n*n*k] + u[i + n*j + n*n*(k-1)] + u[i + n*j + n*n*(k+1)] + u[i + n*j + n*n*k]);
                }
            }
        }
        #pragma acc parallel loop collapse(3) present(u[:n*n*n], unew[:n*n*n])
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    u[i + n*j + n*n*k] = unew[i + n*j + n*n*k];
                }
            }
        }
    }
}
```

--------------- Output 3 ---------------
```c
void jacobi_operation(double *u, double *unew, int n, int niter);

void jacobi_operation(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    for(iter = 0; iter < niter; iter++) {
        for(k = 1; k < n - 1; k++) {
            for(j = 1; j < n - 1; j++) {
                for(i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                      u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        // Copy unew to u
        for (int i = 0; i < n*n*n; i++) {
            u[i] = unew[i];
        }
    }
}
```

--------------- Output 4 ---------------
```c
#include <hip/hip_runtime.h>

void jacobi_kernel(double *u, double *unew, int n) {
  int i = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;
  int j = hipBlockIdx_y * hipBlockDim_y + hipThreadIdx_y;
  int k = hipBlockIdx_z * hipBlockDim_z + hipThreadIdx_z;
  
  if (i >= 1 && i < n-1 && j >= 1 && j < n-1 && k >= 1 && k < n-1) {
    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                      u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                      u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
  }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
  double *d_u, *d_unew;
  hipMalloc(&d_u, sizeof(double) * n * n * n);
  hipMalloc(&d_unew, sizeof(double) * n * n * n);
  
  hipMemcpy(d_u, u, sizeof(double) * n * n * n, hipMemcpyHostToDevice);
  
  dim3 blockSize(8, 8, 8);
  dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, (n + blockSize.z - 1) / blockSize.z);
  
  for (int iter = 0; iter < niter; iter++) {
    hipLaunchKernelGGL(jacobi_kernel, gridSize, blockSize, 0, 0, d_u, d_unew, n);
    
    hipMemcpy(d_u, d_unew, sizeof(double) * n * n * n, hipMemcpyDeviceToDevice);
  }
  
  hipMemcpy(u, d_u, sizeof(double) * n * n * n, hipMemcpyDeviceToHost);
  
  hipFree(d_u);
  hipFree(d_unew);
}
```

--------------- Output 5 ---------------
```c
#include <hip/hip_runtime.h>

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    int j = threadIdx.y + blockIdx.y * blockDim.y;
    int k = threadIdx.z + blockIdx.z * blockDim.z;

    if (i < n && j < n && k < n && i > 0 && j > 0 && k > 0 && i < n-1 && j < n-1 && k < n-1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - n * n] +
                             u[idx + n * n] + u[idx - 1] + u[idx + 1] +
                             u[idx]);
    }
}

void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 blockSize(16, 16, 16);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x,
                  (n + blockSize.y - 1) / blockSize.y,
                  (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        hipDeviceSynchronize();

        hipMemcpy(unew, d_unew, size, hipMemcpyDeviceToHost);

        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}
```

--------------- Output 6 ---------------
```c
#include <hip/hip_runtime.h>

void jacobi(int n, int niter, double *u, double *unew) {
    int i, j, k, iter;
    for (iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL(jacobi_kernel, dim3((n-2), (n-2), (n-2)), dim3(1, 1, 1), 0, 0, n, u, unew);
        // Update u with values from unew
        hipMemcpy(u, unew, n*n*n*sizeof(double), hipMemcpyDeviceToDevice);
    }
}

__global__ void jacobi_kernel(int n, double *u, double *unew) {
    int i = blockIdx.x + 1;
    int j = blockIdx.y + 1;
    int k = blockIdx.z + 1;
    
    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i*n*n + j*n + k] = 0.125 * (u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] 
                                         + u[i*n*n + (j-1)*n + k] + u[i*n*n + (j+1)*n + k]
                                         + u[i*n*n + j*n + k-1] + u[i*n*n + j*n + k+1] + u[i*n*n + j*n + k]);
    }
}
```

--------------- Output 7 ---------------
```c
#include <hip/hip_runtime.h>

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                         u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                         u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + 
                                         u[i + j*n + k*n*n]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    hipMalloc(&d_u, n*n*n*sizeof(double));
    hipMalloc(&d_unew, n*n*n*sizeof(double));
    hipMemcpy(d_u, u, n*n*n*sizeof(double), hipMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n+blockSize.x-1)/blockSize.x, (n+blockSize.y-1)/blockSize.y, (n+blockSize.z-1)/blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        hipDeviceSynchronize();
        hipMemcpy(unew, d_unew, n*n*n*sizeof(double), hipMemcpyDeviceToHost);

        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipFree(d_u);
    hipFree(d_unew);
}
```

--------------- Output 8 ---------------
```c
#include <hip/hip_runtime.h>

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        int idx = i + j*n + k*n*n;
        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - 1] + u[idx + 1] + u[idx - n*n] + u[idx + n*n] + u[idx]);
    }
}

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = sizeof(double) * n * n * n;

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);
    }

    hipFree(d_u);
    hipFree(d_unew);
}
```

--------------- Output 9 ---------------
```c
void jacobi_parallel(double *u, double *unew, int n, int niter);

void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    for(iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for(k = 1; k < n - 1; k++) {
            for(j = 1; j < n - 1; j++) {
                for(i = 1; i < n - 1; i++) {
                    unew[i + n*j + n*n*k] = 0.125 * (u[(i-1) + n*j + n*n*k] + u[(i+1) + n*j + n*n*k] +
                                                     u[i + n*(j-1) + n*n*k] + u[i + n*(j+1) + n*n*k] +
                                                     u[i + n*j + n*n*(k-1)] + u[i + n*j + n*n*(k+1)] + u[i + n*j + n*n*k]);
                }
            }
        }
        #pragma acc update device(u[0:n*n*n])
        for(int idx = 0; idx < n*n*n; idx++) {
            u[idx] = unew[idx];
        }
    }
}
```

--------------- Output 10 ---------------
```c
void jacobi_parallel(double *u, double *unew, int n, int niter);
```

```fortran
subroutine jacobi_parallel(u, unew, n, niter)
    implicit none
    integer, intent(in) :: n, niter
    real(kind=8), dimension(n, n, n), intent(inout) :: u, unew
    integer :: i, j, k, iter
    do iter = 1, niter
      !$ACC PARALLEL LOOP COLLAPSE(3) PRIVATE(i, j, k)
      do k = 2, n - 1
        do j = 2, n - 1
          do i = 2, n - 1
            unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) &
              + u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k))
          end do
        end do
      end do
      !$ACC END PARALLEL LOOP
      u(:, :, :) = unew(:, :, :)
    end do
  end subroutine jacobi_parallel
```

