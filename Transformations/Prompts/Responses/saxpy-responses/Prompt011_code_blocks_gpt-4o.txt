Code Block 1:
void saxpy_parallel(int n, float a, float *x, float *y) {
    #pragma acc parallel loop present(x[0:n], y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 2:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int i;

    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 3:
void saxpy_parallel(int n, float a, float *x, float *y) {
    // OpenACC directive to parallelize the loop
    #pragma acc parallel loop
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 4:
void saxpy_parallel(int n, float a, float* restrict x, float* restrict y) {
    #pragma acc parallel loop
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 5:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int i;

    // Use OpenACC parallel loop directive
    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 6:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int i;

    // Parallel region with OpenACC
    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 7:
arrays
    for (int i = 0; i < n; i++) {
        x[i] = 1.0f;
        y[i] = 1.0f;
    }

Code Block 8:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int i;

    #pragma acc parallel loop
    for (i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 9:
arrays
    for(int i = 0; i < n; i++) {
        x[i] = 1.0f;
        y[i] = 2.0f;
    }

Code Block 10:
vectors
    for (int i = 0; i < n; ++i) {
        x[i] = (float)i;
        y[i] = 1.0f;
    }

