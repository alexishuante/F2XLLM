PROMPT 001 
Give me a function implemented in C and OpenMP of the next subroutine implemented in Fortran and OpenMP that computes an AXPY operation:
subroutine saxpy_parallel(n, a, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: a
    real, intent(in) :: x(n)
    real, intent(inout) :: y(n)
    integer :: i
    !$OMP PARALLEL DO
    do i = 1, n
        y(i) = a * x(i) + y(i)
    end do
    !$OMP END PARALLEL DO
end subroutine saxpy_parallel

PROMPT 002 
Give me a function implemented in C and OpenMP of the next subroutine implemented in Fortran and OpenACC that computes an AXPY operation:
subroutine saxpy(n, a, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: a
    real, intent(in) :: x(n)
    real, intent(inout) :: y(n)
    integer :: i
    !$acc kernels
    do i = 1, n
        y(i) = a * x(i) + y(i)
    end do
    !$acc end kernels
end subroutine saxpy

PROMPT 011
Give me a function implemented in C and OpenACC of the next subroutine implemented in Fortran and OpenMP that computes an AXPY operation:
subroutine saxpy_parallel(n, a, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: a
    real, intent(in) :: x(n)
    real, intent(inout) :: y(n)
    integer :: i
    !$OMP PARALLEL DO
    do i = 1, n
        y(i) = a * x(i) + y(i)
    end do
    !$OMP END PARALLEL DO
end subroutine saxpy_parallel

PROMPT 012
Give me a function implemented in C and OpenACC of the next subroutine implemented in Fortran and OpenACC code that implements an AXPY operation:
subroutine saxpy(n, a, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: a
    real, intent(in) :: x(n)
    real, intent(inout) :: y(n)
    integer :: i
    !$acc kernels
    do i = 1, n
        y(i) = a * x(i) + y(i)
    end do
    !$acc end kernels
end subroutine saxpy

PROMPT 021
Give me a function implemented in C and HIP of the next subroutine implemented in Fortran and OpenMP that computes an AXPY operation:
subroutine saxpy_parallel(n, a, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: a
    real, intent(in) :: x(n)
    real, intent(inout) :: y(n)
    integer :: i
    !$OMP PARALLEL DO
    do i = 1, n
        y(i) = a * x(i) + y(i)
    end do
    !$OMP END PARALLEL DO
end subroutine saxpy_parallel

PROMPT 022
Give me a function implemented in C and HIP of the next subroutine implemented in Fortran and OpenACC that computes an AXPY operation:
subroutine saxpy(n, a, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: a
    real, intent(in) :: x(n)
    real, intent(inout) :: y(n)
    integer :: i
    !$acc kernels
    do i = 1, n
        y(i) = a * x(i) + y(i)
    end do
    !$acc end kernels
end subroutine saxpy

PROMPT 031
Give me a function implemented in C and CUDA of the next subroutine implemented in Fortran and OpenMP that computes an AXPY operation:
subroutine saxpy_parallel(n, a, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: a
    real, intent(in) :: x(n)
    real, intent(inout) :: y(n)
    integer :: i
    !$OMP PARALLEL DO
    do i = 1, n
        y(i) = a * x(i) + y(i)
    end do
    !$OMP END PARALLEL DO
end subroutine saxpy_parallel

PROMPT 032
Give me a function implemented in C and CUDA of the next subroutine implemented in Fortran and OpenACC that computes an AXPY operation:
subroutine saxpy(n, a, x, y)
    implicit none
    integer, intent(in) :: n
    real, intent(in) :: a
    real, intent(in) :: x(n)
    real, intent(inout) :: y(n)
    integer :: i
    !$acc kernels
    do i = 1, n
        y(i) = a * x(i) + y(i)
    end do
    !$acc end kernels
end subroutine saxpy



 
