Code Block 1:
arrays
    for (int i = 0; i < n; i++) {
        x[i] = i * 1.0f;
        y[i] = i * 2.0f;
    }

__global__ void saxpy_parallel(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n)
        y[i] = a * x[i] + y[i];
}

Code Block 2:
void saxpy_parallel(int n, float a, const float *x, float *y) {
    float *d_x, *d_y;

    // Allocate device memory
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));

    // Copy data to device
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Define block and grid sizes
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    // Launch the SAXPY kernel
    hipLaunchKernelGGL(saxpy_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void saxpy_kernel(int n, float a, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 3:
void saxpy(int n, float a, const float *x, float *y) {
       // Allocate device memory
       float *d_x, *d_y;
       hipMalloc(&d_x, n * sizeof(float));
       hipMalloc(&d_y, n * sizeof(float));

       // Copy data from host to device
       hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
       hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

       // Define grid and block dimensions
       int blockSize = 256;
       int numBlocks = (n + blockSize - 1) / blockSize;

       // Launch the kernel
       hipLaunchKernelGGL(saxpy_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, d_x, d_y);

       // Copy the result back to the host
       hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

       // Free device memory
       hipFree(d_x);
       hipFree(d_y);
   }

__global__ void saxpy_kernel(int n, float a, const float *x, float *y) {
       int i = blockIdx.x * blockDim.x + threadIdx.x;
       if (i < n) {
           y[i] = a * x[i] + y[i];
       }
   }

Code Block 4:
void saxpy_parallel(int n, float a, const float *x, float *y) {
    int i;
    #pragma omp parallel for
    for (i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

__global__ void saxpy_kernel(int n, float a, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 5:
void saxpy_parallel(int n, float a, float *x, float *y) {
    float *d_x, *d_y;

    // Allocate device memory
    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMalloc((void**)&d_y, n * sizeof(float));

    // Copy data from host to device
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Define block and grid dimensions
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    // Launch the HIP kernel
    hipLaunchKernelGGL(saxpy_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 6:
void saxpy_parallel(int n, float a, const float* x, float* y)
{
    // Device pointers
    float *d_x, *d_y;

    // Allocate memory on the device
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data from host to device
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Launch the kernel with appropriate block and grid sizes
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    hipLaunchKernelGGL(saxpy_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, d_x, d_y);

    // Copy the result back from device to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free the device memory
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void saxpy_kernel(int n, float a, const float* x, float* y)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n)
    {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 7:
void saxpy(int n, float a, float *x, float *y) {
    float *d_x, *d_y;

    // Allocate device memory
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy data to device
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Define thread hierarchy
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    // Launch kernel
    hipLaunchKernelGGL(saxpy_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, d_x, d_y);

    // Copy result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
    int i = threadIdx.x + blockDim.x * blockIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 8:
void saxpy_parallel(int n, float a, float* x, float* y) {
    float *d_x, *d_y;

    // Allocate device memory
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copy host memory to device memory
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    // Specify the size of the grid and blocks
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    // Launch kernel
    hipLaunchKernelGGL(saxpy_hip, dim3(numBlocks), dim3(blockSize), 0, 0, n, a, d_x, d_y);

    // Copy result from device memory to host memory
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void saxpy_hip(int n, float a, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 9:
void saxpy_parallel(int n, float a, const float *x, float *y) {
    #pragma omp parallel for
    for (int i = 0; i < n; ++i) {
        y[i] = a * x[i] + y[i];
    }
}

__global__ void saxpy_kernel(int n, float a, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 10:
void saxpy_parallel(int n, float a, float* x, float* y) {
    float *d_x, *d_y;
    size_t size = n * sizeof(float);

    // Allocate device memory
    hipMalloc(&d_x, size);
    hipMalloc(&d_y, size);

    // Copy vectors from host memory to device memory
    hipMemcpy(d_x, x, size, hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, size, hipMemcpyHostToDevice);

    // Launch kernel on the GPU
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    hipLaunchKernelGGL(saxpy_kernel, numBlocks, blockSize, 0, 0, n, a, d_x, d_y);

    // Copy result from device memory to host memory
    hipMemcpy(y, d_y, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void saxpy_kernel(int n, float a, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

