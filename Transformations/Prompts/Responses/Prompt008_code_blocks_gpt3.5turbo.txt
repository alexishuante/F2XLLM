Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma omp parallel for private(i, j, k)
    for(iter = 0; iter < niter; iter++) {
        for(k = 1; k < n - 1; k++) {
            for(j = 1; j < n - 1; j++) {
                for(i = 1; i < n - 1; i++) {
                    unew[i + n*(j + n*k)] = 0.125 * (u[(i-1) + n*(j + n*k)] + u[(i+1) + n*(j + n*k)] + 
                                                      u[i + n*((j-1) + n*k)] + u[i + n*((j+1) + n*k)] + 
                                                      u[i + n*(j + n*(k-1))] + u[i + n*(j + n*(k+1))] + 
                                                      u[i + n*(j + n*k)]);
                }
            }
        }
        memcpy(u, unew, n*n*n*sizeof(double));
    }
}

Code Block 2:
void jacobi_parallel(double u[n][n][n], double unew[n][n][n], int n, int niter) {
    int i, j, k, iter;
    #pragma omp parallel for private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                        u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }

        #pragma omp parallel for collapse(3)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    #pragma omp parallel private(i, j, k)
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] + 
                                                          u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                    }
                }
            }

            #pragma omp for collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                    }
                }
            }
        }
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 0; iter < niter; iter++) {
        #pragma omp parallel for private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n]
                                                    + u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }

        #pragma omp for
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma omp parallel for private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] + 
                                                      u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        #pragma omp parallel for
        for (i = 0; i < n*n*n; i++) {
            u[i] = unew[i];
        }
    }
}

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    #pragma omp parallel for private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                                                      u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }

        // Copy unew to u
        #pragma omp parallel for
        for (int idx = 0; idx < n*n*n; idx++) {
            u[idx] = unew[idx];
        }
    }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    #pragma omp parallel for collapse(3) shared(u, unew, n, niter) private(i, j, k)
    for (int iter = 0; iter < niter; iter++) {
        for (int k = 1; k < n - 1; k++) {
            for (int j = 1; j < n - 1; j++) {
                for (int i = 1; i < n - 1; i++) {
                    int index = k*n*n + j*n + i;
                    unew[index] = 0.125 * (u[(k-1)*n*n + j*n + i] + u[(k+1)*n*n + j*n + i] + u[k*n*n + (j-1)*n + i] +
                                          u[k*n*n + (j+1)*n + i] + u[k*n*n + j*n + (i-1)] + u[k*n*n + j*n + (i+1)] + u[index]);
                }
            }
        }
    }
    #pragma omp parallel for
    for (int i = 0; i < n*n*n; i++) {
        u[i] = unew[i];
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    #pragma omp parallel for private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                      u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                                      u[i + j*n + k*n*n]);
                }
            }
        }

        #pragma omp parallel for
        for (int idx = 0; idx < n*n*n; idx++) {
            u[idx] = unew[idx];
        }
    }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma omp parallel for collapse(3) private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n-1; k++) {
            for (j = 1; j < n-1; j++) {
                for (i = 1; i < n-1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                                                      u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        #pragma omp barrier
        #pragma omp single
        {
            for (int i = 0; i < n*n*n; i++) {
                u[i] = unew[i];
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    #pragma omp parallel shared(u, unew) private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[k*n*n + j*n + i] = 0.125 * (u[(k-1)*n*n + j*n + i] + u[(k+1)*n*n + j*n + i] +
                                                          u[k*n*n + (j-1)*n + i] + u[k*n*n + (j+1)*n + i] +
                                                          u[k*n*n + j*n + (i-1)] + u[k*n*n + j*n + (i+1)] +
                                                          u[k*n*n + j*n + i]);
                    }
                }
            }
        }

        // Copy unew back to u
        #pragma omp for
        for (i = 0; i < n*n*n; i++) {
            u[i] = unew[i];
        }
    }
}

