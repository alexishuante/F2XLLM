Code Block 1:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;
    #pragma omp parallel for private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k]
                        + u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }
        #pragma omp barrier
        #pragma omp parallel for private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    #pragma omp parallel for private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    int index = i + j*n + k*n*n;
                    unew[index] = 0.125 * (u[index - 1] + u[index + 1] + u[index - n] +
                                          u[index + n] + u[index - n*n] + u[index + n*n] + u[index]);
                }
            }
        }
        
        // Copy unew back to u
        for (int index = 0; index < n*n*n; index++) {
            u[index] = unew[index];
        }
    }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    #pragma omp parallel for private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                                                      u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        #pragma omp barrier
        
        #pragma omp for
        for (i = 0; i < n*n*n; i++) {
            u[i] = unew[i];
        }
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    #pragma omp parallel shared(u, unew)
    {
        int i, j, k, iter;
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                            u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] +
                            u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for
            for (int idx = 0; idx < n*n*n; idx++) {
                u[idx] = unew[idx];
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;
    
    #pragma omp parallel for private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                      u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + 
                                                      u[i + j*n + k*n*n]);
                }
            }
        }
        
        #pragma omp parallel for private(i)
        for (i = 0; i < n*n*n; i++) {
            u[i] = unew[i];
        }
    }
}

Code Block 6:
void jacobi_parallel(double u[n][n][n], double unew[n][n][n], int n, int niter) {
    int i, j, k, iter;
    
    for (iter = 0; iter < niter; iter++) {
        #pragma omp parallel for collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                              u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }
        
        #pragma omp barrier
        
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(double u[n][n][n], double unew[n][n][n], int n, int niter) {
    #pragma omp parallel for collapse(3) private(i, j, k)
    for (int iter = 0; iter < niter; iter++) {
        for (int k = 1; k < n - 1; k++) {
            for (int j = 1; j < n - 1; j++) {
                for (int i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }
        #pragma omp barrier
        #pragma omp parallel for collapse(3)
        for (int k = 1; k < n - 1; k++) {
            for (int j = 1; j < n - 1; j++) {
                for (int i = 1; i < n - 1; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    #pragma omp parallel for private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
                        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
                        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
                }
            }
        }

        #pragma omp parallel for
        for (int i = 0; i < n * n * n; i++) {
            u[i] = unew[i];
        }
    }
}

Code Block 9:
void jacobi_parallel(double u[][n][n], double unew[][n][n], int n, int niter) {
    int i, j, k, iter;
    
    #pragma omp parallel for private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }

        // Copy unew back to u
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma omp parallel for private(i, j, k)
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] +
                                                      u[(i+1) + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] +
                                                      u[i + (j+1)*n + k*n*n] +
                                                      u[i + j*n + (k-1)*n*n] +
                                                      u[i + j*n + (k+1)*n*n] +
                                                      u[i + j*n + k*n*n]);
                }
            }
        }
        #pragma omp barrier
        #pragma omp for
        for (int idx = 0; idx < n*n*n; idx++) {
            u[idx] = unew[idx];
        }
    }
}

