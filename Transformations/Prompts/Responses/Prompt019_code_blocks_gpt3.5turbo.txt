Code Block 1:
void saxpy_parallel_c(int n, float a, float *x, float *y) {
    float *d_x, *d_y;
    int size = n * sizeof(float);

    // Allocate memory on device
    hipMalloc(&d_x, size);
    hipMalloc(&d_y, size);

    // Copy input data from host to device
    hipMemcpy(d_x, x, size, hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, size, hipMemcpyHostToDevice);

    // Launch kernel on the GPU
    int numBlocks = (n + BLOCK_SIZE - 1) / BLOCK_SIZE;
    saxpy_parallel<<<numBlocks, BLOCK_SIZE>>>(n, a, d_x, d_y);

    // Copy output data from device to host
    hipMemcpy(y, d_y, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void saxpy_parallel(int n, float a, float *x, float *y) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    if(tid < n) {
        y[tid] = a * x[tid] + y[tid];
    }
}

Code Block 2:
void saxpy_parallel(int n, float a, float* x, float* y) {
    float *d_x, *d_y;
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));
    
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    axpy_kernel<<<numBlocks, blockSize>>>(n, a, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_x);
    hipFree(d_y);
}

__global__ void axpy_kernel(int n, float a, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 3:
void saxpy_parallel(int n, float a, float* x, float* y) {
    float *d_x, *d_y;

    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    saxpy_parallel<<<gridSize, blockSize>>>(n, a, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_x);
    hipFree(d_y);
}

__global__ void saxpy_parallel(int n, float a, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 4:
void saxpy_parallel(int n, float a, float *x, float *y) {
    float *d_x, *d_y;
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);

    int block_size = 256;
    int grid_size = (n + block_size - 1) / block_size;

    saxpy_kernel<<<grid_size, block_size>>>(n, a, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_x);
    hipFree(d_y);
}

__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 5:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    #pragma acc parallel loop present(val, row, col, x, y)
    for (int i = 0; i < n; i++) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 6:
void saxpy_parallel(int n, float a, float *x, float *y) {
    hipLaunchKernelGGL([=](int i) {
        y[i] = a * x[i] + y[i];
    }, dim3((n+255)/256), dim3(256), 0, 0, n);
}

Code Block 7:
void saxpy_parallel(int n, float a, float *x, float *y) {
    hipLaunchKernelGGL([&](int i) {
        y[i] = a * x[i] + y[i];
    }, dim3((n-1)/256 + 1), dim3(256), 0, 0, n);
}

Code Block 8:
void saxpy_parallel_c(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    float *d_x, *d_y;
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));
    
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_y, y, n * sizeof(float), hipMemcpyHostToDevice);
    
    saxpy_parallel<<<numBlocks, blockSize>>>(n, a, d_x, d_y);
    
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void saxpy_parallel(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 9:
void saxpy_parallel(int n, float a, float *x, float *y) {
    hipLaunchKernelGGL([=] HIP_KERNEL() {
        int i = hipThreadIdx_x + hipBlockDim_x * hipBlockIdx_x;
        if(i < n) {
            y[i] = a * x[i] + y[i];
        }
    }, dim3((n+31)/32), dim3(32), 0, 0, n, a, x, y);
}

Code Block 10:
void saxpy_parallel(int n, float a, float *x, float *y) {
    int i;
    hipLaunchKernelGGL([=] __device__ (int i) {
        y[i] = a * x[i] + y[i];
    }, dim3((n+255)/256), dim3(256), 0, 0, n);
}

