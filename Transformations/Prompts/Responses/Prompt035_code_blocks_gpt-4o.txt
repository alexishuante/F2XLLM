Code Block 1:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }

            #pragma omp barrier

            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx-1] + u[idx+1] +
                             u[idx-n] + u[idx+n] +
                             u[idx-n*n] + u[idx+n*n] +
                             u[idx]);
    }
}

Code Block 2:
extern "C" void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *u_d, *unew_d;
    size_t size = n * n * n * sizeof(double);

    // Allocate device memory
    cudaMalloc((void**)&u_d, size);
    cudaMalloc((void**)&unew_d, size);

    // Copy data from host to device
    cudaMemcpy(u_d, u, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for(int iter = 0; iter < niter; ++iter) {
        jacobiKernel<<<numBlocks, threadsPerBlock>>>(u_d, unew_d, n);
        // Swap pointers
        double *temp = u_d;
        u_d = unew_d;
        unew_d = temp;
    }

    // Copy results back to host
    cudaMemcpy(u, u_d, size, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(u_d);
    cudaFree(unew_d);
}

__global__ void jacobiKernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i >= 1 && i < n-1 && j >= 1 && j < n-1 && k >= 1 && k < n-1) {
        unew[IDX(i, j, k, n)] = 0.125 * (
            u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] +
            u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] +
            u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] +
            u[IDX(i, j, k, n)]
        );
    }
}

Code Block 3:
void jacobi_parallel_cpu(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[(k * n + j) * n + i] = 0.125 * (u[((k - 1) * n + j) * n + i] + 
                                                            u[((k + 1) * n + j) * n + i] + 
                                                            u[(k * n + (j - 1)) * n + i] + 
                                                            u[(k * n + (j + 1)) * n + i] + 
                                                            u[(k * n + j) * n + (i - 1)] + 
                                                            u[(k * n + j) * n + (i + 1)] + 
                                                            u[(k * n + j) * n + i]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 0; k < n * n * n; k++) {
                u[k] = unew[k];
            }
        }
    }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[(k * n + j) * n + i] = 0.125 * (u[((k - 1) * n + j) * n + i] + 
                                             u[((k + 1) * n + j) * n + i] + 
                                             u[(k * n + (j - 1)) * n + i] + 
                                             u[(k * n + (j + 1)) * n + i] + 
                                             u[(k * n + j) * n + (i - 1)] + 
                                             u[(k * n + j) * n + (i + 1)] + 
                                             u[(k * n + j) * n + i]);
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u;
    double *d_unew;

    size_t size = n * n * n * sizeof(double);
    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    int blockdim = nthreads;
    int griddim = (n + blockdim - 1) / blockdim;

    dim3 dimBlock(blockdim, blockdim, blockdim);
    dim3 dimGrid(griddim, griddim, griddim);

    jacobi_kernel<<<dimGrid, dimBlock>>>(d_u, d_unew, n, niter);

    cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    int idx_i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int idx_j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int idx_k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (idx_i >= n-1 || idx_j >= n-1 || idx_k >= n-1) return;

    for (iter = 0; iter < niter; iter++) {
        if (idx_i < n-1 && idx_j < n-1 && idx_k < n-1 && idx_i > 0 && idx_j > 0 && idx_k > 0) {
            unew[IDX(idx_i, idx_j, idx_k, n)] = 0.125 * (u[IDX(idx_i-1, idx_j, idx_k, n)] +
                                                         u[IDX(idx_i+1, idx_j, idx_k, n)] +
                                                         u[IDX(idx_i, idx_j-1, idx_k, n)] +
                                                         u[IDX(idx_i, idx_j+1, idx_k, n)] +
                                                         u[IDX(idx_i, idx_j, idx_k-1, n)] +
                                                         u[IDX(idx_i, idx_j, idx_k+1, n)] +
                                                         u[IDX(idx_i, idx_j, idx_k, n)]);
        }
        __syncthreads();
        if (iter < niter - 1) {
            double *temp = u;
            u = unew;
            unew = temp;
        }
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    // Allocate device memory
    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_unew, size);

    // Copy data from host to device
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_unew, unew, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    // Copy data from device to host
    cudaMemcpy(u, d_unew, size, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] +
                              u[idx - n] + u[idx + n] +
                              u[idx - n * n] + u[idx + n * n] + u[idx]);
    }
}

Code Block 6:
void jacobi_parallel(double*** u, double*** unew, int n, int niter, int nthreads) {
    int iter, i, j, k;
    
    omp_set_num_threads(nthreads);
    
    #pragma omp parallel private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; ++iter) {
            #pragma omp for schedule(static)
            for (k = 1; k < n-1; ++k) {
                for (j = 1; j < n-1; ++j) {
                    for (i = 1; i < n-1; ++i) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                                 u[i][j-1][k] + u[i][j+1][k] + 
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 0; k < n; ++k) {
                for (j = 0; j < n; ++j) {
                    for (i = 0; i < n; ++i) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

__global__
void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = i + j*n + k*n*n;
        unew[idx] = 0.125 * (
            u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
            u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
            u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + 
            u[i + j*n + k*n*n]
        );
    }
}

Code Block 7:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    #pragma omp parallel num_threads(nthreads)
    {
        int i, j, k, iter;
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                                 u[i][j-1][k] + u[i][j+1][k] + 
                                                 u[i][j][k-1] + u[i][j][k+1] + 
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n-1 && j >= 1 && j < n-1 && k >= 1 && k < n-1) {
        int index = i + j * n + k * n * n;
        unew[index] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
                               u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] +
                               u[i + j * n + (k-1) * n * n] + u[i + j * n + (k+1) * n * n] +
                               u[i + j * n + k * n * n]);
    }
}

Code Block 8:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp single
            {
                for (k = 0; k < n; k++) {
                    for (j = 0; j < n; j++) {
                        for (i = 0; i < n; i++) {
                            u[i][j][k] = unew[i][j][k];
                        }
                    }
                }
            }
        }
    }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;
    
    if (i < n-1 && j < n-1 && k < n-1) {
        unew[((k * n + j) * n + i)] = 0.125 * (u[((k * n + j) * n + (i-1))] +
                                               u[((k * n + j) * n + (i+1))] +
                                               u[((k * n + (j-1)) * n + i)] +
                                               u[((k * n + (j+1)) * n + i)] +
                                               u[(((k-1) * n + j) * n + i)] +
                                               u[(((k+1) * n + j) * n + i)] +
                                               u[((k * n + j) * n + i)]);
    }
}

Code Block 9:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                                  u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int index = IDX(i, j, k, n);
        unew[index] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] + u[IDX(i, j-1, k, n)] +
                               u[IDX(i, j+1, k, n)] + u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] + u[index]);
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int iter, i, j, k;
    
    omp_set_num_threads(nthreads);

    #pragma omp parallel private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        // Linearize 3D index
                        int idx = i + n * (j + n * k);
                        int idx_im1 = (i-1) + n * (j + n * k);
                        int idx_ip1 = (i+1) + n * (j + n * k);
                        int idx_jm1 = i + n * ((j-1) + n * k);
                        int idx_jp1 = i + n * ((j+1) + n * k);
                        int idx_km1 = i + n * (j + n * (k-1));
                        int idx_kp1 = i + n * (j + n * (k+1));
                        unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] + u[idx_jm1]
                                           + u[idx_jp1] + u[idx_km1] + u[idx_kp1] + u[idx]);
                    }
                }
            }
            #pragma omp barrier
            // Update array
            #pragma omp single
            {
                for (k = 0; k < n*n*n; k++) {
                    u[k] = unew[k];
                }
            }
        }
    }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = i + n * (j + n * k);
        int idx_im1 = (i-1) + n * (j + n * k);
        int idx_ip1 = (i+1) + n * (j + n * k);
        int idx_jm1 = i + n * ((j-1) + n * k);
        int idx_jp1 = i + n * ((j+1) + n * k);
        int idx_km1 = i + n * (j + n * (k-1));
        int idx_kp1 = i + n * (j + n * (k+1));
        unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] + u[idx_jm1]
                           + u[idx_jp1] + u[idx_km1] + u[idx_kp1] + u[idx]);
    }
}

