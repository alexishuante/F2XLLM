Code Block 1:
void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    // Device pointers
    double *d_a, *d_b, *d_c;
    
    // Allocate memory on the GPU
    cudaMalloc((void**)&d_a, m * k * sizeof(double));
    cudaMalloc((void**)&d_b, k * n * sizeof(double));
    cudaMalloc((void**)&d_c, m * n * sizeof(double));
    
    // Copy data to the GPU
    cudaMemcpy(d_a, a, m * k * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, k * n * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, m * n * sizeof(double), cudaMemcpyHostToDevice);
    
    // Define the block and grid size
    dim3 blockDim(16, 16);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x, (m + blockDim.y - 1) / blockDim.y);
    
    // Launch the CUDA kernel
    gemm_kernel<<<gridDim, blockDim>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);
    
    // Copy the result back to the host
    cudaMemcpy(c, d_c, m * n * sizeof(double), cudaMemcpyDeviceToHost);
    
    // Free the device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int i = 0; i < k; i++) {
            temp += a[row * lda + i] * b[i * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 2:
extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    // Define the size of each dimension
    dim3 threadsPerBlock(16, 16);
    dim3 blocksPerGrid((n + threadsPerBlock.x - 1) / threadsPerBlock.x, (m + threadsPerBlock.y - 1) / threadsPerBlock.y);
    
    // Allocate device memory and copy data from host to device
    double* d_a;
    double* d_b;
    double* d_c;
    
    cudaMalloc((void**)&d_a, m * k * sizeof(double));
    cudaMalloc((void**)&d_b, k * n * sizeof(double));
    cudaMalloc((void**)&d_c, m * n * sizeof(double));
    
    cudaMemcpy(d_a, a, m * k * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, k * n * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, m * n * sizeof(double), cudaMemcpyHostToDevice);
    
    // Launch the kernel
    gemm_kernel<<<blocksPerGrid, threadsPerBlock>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);
    
    // Copy the result from device to host
    cudaMemcpy(c, d_c, m * n * sizeof(double), cudaMemcpyDeviceToHost);
    
    // Free device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    
    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 3:
void gemm_parallel(const int m, const int n, const int k, const double alpha,
                   const double *a, const int lda, const double *b, const int ldb,
                   const double beta, double *c, const int ldc) {
    int i, j, l;
    double temp;

    #pragma omp parallel for private(i, j, l, temp) schedule(static)
    for (j = 0; j < n; j++) {
        for (i = 0; i < m; i++) {
            temp = 0.0;
            for (l = 0; l < k; l++) {
                temp += a[i * lda + l] * b[l * ldb + j];
            }
            c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
        }
    }
}

__global__ void gemm_kernel(int m, int n, int k, double alpha,
                            const double *a, int lda,
                            const double *b, int ldb,
                            double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int i = 0; i < k; i++) {
            temp += a[row * lda + i] * b[i * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 4:
void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, 
                   double* b, int ldb, double beta, double* c, int ldc) {
    int i, j, l;
    double temp;
    
    #pragma omp parallel for private(i, j, l, temp) schedule(static)
    for (j = 0; j < n; ++j) {
        for (i = 0; i < m; ++i) {
            temp = 0.0;
            for (l = 0; l < k; ++l) {
                temp += a[i * lda + l] * b[l * ldb + j];
            }
            c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
        }
    }
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, 
                            const double* b, int ldb, double beta, double* c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 5:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    #pragma omp parallel for collapse(2)
    for (int j = 0; j < n; j++) {
        for (int i = 0; i < m; i++) {
            double temp = 0.0;
            for (int l = 0; l < k; l++) {
                temp += a[i * lda + l] * b[l * ldb + j];
            }
            c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
        }
    }
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    int i = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 6:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i, j, l;
    double temp;

    #pragma omp parallel for private(i, j, l, temp) schedule(static)
    for (j = 0; j < n; ++j) {
        for (i = 0; i < m; ++i) {
            temp = 0.0;
            for (l = 0; l < k; ++l) {
                temp += a[i*lda + l] * b[l*ldb + j];
            }
            c[i*ldc + j] = alpha * temp + beta * c[i*ldc + j];
        }
    }
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    int j = blockIdx.x * blockDim.x + threadIdx.x;
  
    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[IDX2C(i, l, lda)] * b[IDX2C(l, j, ldb)];
        }
        c[IDX2C(i, j, ldc)] = alpha * temp + beta * c[IDX2C(i, j, ldc)];
    }
}

Code Block 7:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i, j, l;
    double temp;

    #pragma omp parallel for private(i, j, l, temp) schedule(static)
    for (j = 0; j < n; ++j) {
        for (i = 0; i < m; ++i) {
            temp = 0.0;
            for (l = 0; l < k; ++l) {
                temp += a[i * lda + l] * b[l * ldb + j];
            }
            c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
        }
    }
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 8:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i, j, l;
    #pragma omp parallel for private(i, j, l) schedule(static)
    for (j = 0; j < n; j++) {
        for (i = 0; i < m; i++) {
            double temp = 0.0;
            for (l = 0; l < k; l++) {
                temp += a[i * lda + l] * b[l * ldb + j];
            }
            c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
        }
    }
}

__global__ void gemmKernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 9:
void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    int i, j, l;
    double temp;
    
    #pragma omp parallel for private(i, j, l, temp) schedule(static)
    for (j = 0; j < n; j++) {
        for (i = 0; i < m; i++) {
            temp = 0.0;
            for (l = 0; l < k; l++) {
                temp += a[i * lda + l] * b[l * ldb + j];
            }
            c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
        }
    }
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 10:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int i, j, l;
    double temp;
    #pragma omp parallel for private(i, j, l, temp) schedule(static)
    for (j = 0; j < n; ++j) {
        for (i = 0; i < m; ++i) {
            temp = 0.0;
            for (l = 0; l < k; ++l) {
                temp += a[i + l * lda] * b[l + j * ldb];
            }
            c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
        }
    }
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row + l * lda] * b[l + col * ldb];
        }
        c[row + col * ldc] = alpha * temp + beta * c[row + col * ldc];
    }
}

