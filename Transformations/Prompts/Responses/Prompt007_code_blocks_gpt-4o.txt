Code Block 1:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int iter, i, j, k;

    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) { // loop adjustments to accommodate zero-based indexing in C
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                u[i][j-1][k] + u[i][j+1][k] +
                                                u[i][j][k-1] + u[i][j][k+1] +
                                                u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier

            // Copy unew to u
            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
            #pragma omp barrier
        }
    }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    // OpenMP parallel region
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            // OpenMP for loop parallelization with static scheduling
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        // Convert 3D index to 1D index for C array
                        int idx = i + n * (j + n * k);
                        int idx_im1 = (i-1) + n * (j + n * k);
                        int idx_ip1 = (i+1) + n * (j + n * k);
                        int idx_jm1 = i + n * ((j-1) + n * k);
                        int idx_jp1 = i + n * ((j+1) + n * k);
                        int idx_km1 = i + n * (j + n * (k-1));
                        int idx_kp1 = i + n * (j + n * (k+1));
                        
                        unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] +
                                             u[idx_jm1] + u[idx_jp1] +
                                             u[idx_km1] + u[idx_kp1] +
                                             u[idx]);
                    }
                }
            }
            // Synchronize threads before updating u
            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + n * (j + n * k)] = unew[i + n * (j + n * k)];
                    }
                }
            }
            // Synchronize threads after copying unew to u
            #pragma omp barrier
        }
    }
}

Code Block 3:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp single
            {
                for (k = 0; k < n; k++) {
                    for (j = 0; j < n; j++) {
                        for (i = 0; i < n; i++) {
                            u[i][j][k] = unew[i][j][k];
                        }
                    }
                }
            }
        }
    }
}

Code Block 4:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    // Parallel region with specified number of threads
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            // Distribute work among threads
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }
            // Barrier synchronization to ensure that all threads finish before updating u
            #pragma omp barrier
            #pragma omp single
            {
                for (k = 1; k < n - 1; k++) {
                    for (j = 1; j < n - 1; j++) {
                        for (i = 1; i < n - 1; i++) {
                            u[i][j][k] = unew[i][j][k];
                        }
                    }
                }
            }
            // Barrier to ensure all threads have synchronized before the next iteration
            #pragma omp barrier
        }
    }
}

Code Block 5:
void jacobi_parallel(double*** u, double*** unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    // Set the number of threads
    omp_set_num_threads(nthreads);
    
    #pragma omp parallel private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            // Distribute the computation among threads
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                                  u[i][j-1][k] + u[i][j+1][k] +
                                                  u[i][j][k-1] + u[i][j][k+1] +
                                                  u[i][j][k]);
                    }
                }
            }
            
            // Barrier to ensure all threads have completed the current iteration
            #pragma omp barrier
            
            // Copy unew into u
            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    // Parallel region with OpenMP
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            // Parallel loop with static scheduling
            #pragma omp for schedule(static)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k]
                                               + u[i][j+1][k] + u[i][j][k-1]
                                               + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }

            // Barrier to ensure all threads have completed
            #pragma omp barrier

            // Copy new values to the old array
            #pragma omp for collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int iter, i, j, k;

    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; ++k) {
                for (j = 1; j < n - 1; ++j) {
                    for (i = 1; i < n - 1; ++i) {
                        unew[i][j][k] = 0.125 * (
                            u[i-1][j][k] + 
                            u[i+1][j][k] + 
                            u[i][j-1][k] + 
                            u[i][j+1][k] + 
                            u[i][j][k-1] + 
                            u[i][j][k+1] + 
                            u[i][j][k]
                        );
                    }
                }
            }
            #pragma omp barrier
            
            #pragma omp for schedule(static)
            for (k = 0; k < n; ++k) {
                for (j = 0; j < n; ++j) {
                    for (i = 0; i < n; ++i) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double*** u, double*** unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            
            #pragma omp for schedule(static) collapse(3) nowait
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                                 u[i][j-1][k] + u[i][j+1][k] + 
                                                 u[i][j][k-1] + u[i][j][k+1] + 
                                                 u[i][j][k]);
                    }
                }
            }
            
            #pragma omp barrier
            #pragma omp for collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                                 u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                    }
                }
            }
            #pragma omp barrier
            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    // Setting the number of threads to be used by OpenMP
    omp_set_num_threads(nthreads);

    // Parallel region begins here
    #pragma omp parallel private(i, j, k, iter)
    {
        for (iter = 0; iter < niter; iter++) {
            // Distribute the iterations of the loops among threads (static scheduling)
            #pragma omp for schedule(static)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        // Perform the Jacobi update
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                  u[i][j-1][k] + u[i][j+1][k] +
                                                  u[i][j][k-1] + u[i][j][k+1] +
                                                  u[i][j][k]);
                    }
                }
            }
            // Barrier to synchronize threads before the next iteration
            #pragma omp barrier

            // Copy new values into the old array
            #pragma omp for schedule(static)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

