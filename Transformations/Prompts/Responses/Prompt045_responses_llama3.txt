--------------- Output 1 ---------------
Here is the equivalent function in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), 
    KOKKOS_LAMBDA(const int j) {
      for (int i = 0; i < m; ++i) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
          temp += a[i + l * lda] * b[l + j * ldb];
        }
        c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
      }
    });
}
Note that in Kokkos, we use the Kokkos::parallel_for construct to parallelize the outer loop, and the inner loops are executed sequentially. Also, we use the Kokkos::RangePolicy to specify the range of the parallel iteration, and the KOKKOS_LAMBDA macro to define the lambda function that will be executed in parallel.
Please note that you need to include the Kokkos header file and link against the Kokkos library to use this code. Also, the memory layout of the matrices a, b, and c should be consistent with the Fortran code, i.e., column-major order.

--------------- Output 2 ---------------
Here is the equivalent function implemented in C++ with Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}),
                       KOKKOS_LAMBDA(const int i, const int j) {
                         double temp = 0.0;
                         for (int l = 0; l < k; l++) {
                           temp += a[i + l * lda] * b[l + j * ldb];
                         }
                         c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
                       });
}
Note that in Kokkos, we use Kokkos::parallel_for to create a parallel loop, and Kokkos::MDRangePolicy to specify the range of the loop. The lambda function inside Kokkos::parallel_for is executed in parallel for each element in the range. We also use KOKKOS_LAMBDA to define the lambda function.
Also, note that in C++ we use const to specify that the function does not modify the input arrays a and b, and we use const int for the loop indices to match the intent of the Fortran subroutine.
You can adjust the memory layout and data types to match your specific use case.

--------------- Output 3 ---------------
Here is the equivalent function implemented in C++ with Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}), 
  [=](const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; l++) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}
Note that in Kokkos, we use the Kokkos::parallel_for construct to parallelize the loop, and the Kokkos::MDRangePolicy to specify the range of the loop. The lambda function [=](const int i, const int j){...} is the equivalent of the OpenMP parallel region, where we perform the same operations as in the original Fortran subroutine.
Also, note that in C++ we use const to specify that the input matrices a and b are not modified, and we use const int to specify that the input integers m, n, k, lda, ldb, and ldc are not modified.

--------------- Output 4 ---------------
Here is the equivalent function in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
  [=](const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; l++) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}
Note that in Kokkos, we use Kokkos::parallel_for to parallelize the loop, and Kokkos::MDRangePolicy to specify the range of the loop. The lambda function [=](const int i, const int j) {...} is executed in parallel for each pair of indices (i, j) in the specified range.
Also, note that in C++, we use const to specify that the function does not modify the input arrays a and b, and we use const int for the integer parameters to specify that they are not modified by the function.
You can adjust the memory layout and data types according to your specific use case.

--------------- Output 5 ---------------
Here is a possible implementation of the GEMM operation in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const A, const int lda, 
                   const double* const B, const int ldb, 
                   const double beta, double* const C, const int ldc) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), 
                       [=](const int j) {
                         for (int i = 0; i < m; ++i) {
                           double temp = 0.0;
                           for (int l = 0; l < k; ++l) {
                             temp += A[i + l * lda] * B[l + j * ldb];
                           }
                           C[i + j * ldc] = alpha * temp + beta * C[i + j * ldc];
                         }
                       });
}
Note that this implementation assumes a column-major storage format, similar to the Fortran implementation. Also, the Kokkos parallel_for is used to parallelize the outer loop, and the inner loops are executed sequentially.
You can adjust the memory layout and the parallelization strategy to fit your specific use case. Additionally, you may need to provide a custom execution space and a memory space for the arrays, depending on your specific Kokkos setup.

--------------- Output 6 ---------------
Here is the equivalent function in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
                                             Kokkos::IndexType()(0), 
                                             Kokkos::IndexType()(0)), 
                      KOKKOS_LAMBDA(const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}
Note that Kokkos provides a more expressive way of parallelizing the loop using Kokkos::parallel_for and Kokkos::MDRangePolicy. The lambda function captures the essence of the loop body, and Kokkos takes care of parallelizing it. Also, note that Kokkos uses 0-based indexing, unlike Fortran which uses 1-based indexing.

--------------- Output 7 ---------------
Here is a possible implementation of the GEMM operation in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}), 
  [&](const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}
Note that this implementation uses the Kokkos parallel_for function to parallelize the loop, and the MDRangePolicy to specify a 2D iteration space. The lambda function passed to parallel_for performs the same operations as the original Fortran subroutine.
Also, note that in C++ we need to specify the type of the variables, and we use const to indicate that the variables are not modified inside the function. The lda, ldb, and ldc parameters are assumed to be the leading dimensions of the matrices a, b, and c, respectively.
You will need to include the Kokkos header file and link against the Kokkos library to compile this code.

--------------- Output 8 ---------------
Here is a C++ function using Kokkos that performs a Generalized Matrix multiplication (GEMM) operation, equivalent to the provided Fortran subroutine with OpenMP:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
                                         Kokkos::IndexType()(0), 
                                         Kokkos::IndexType()(0)), 
                   KOKKOS_LAMBDA(const int i, const int j) {
                     double temp = 0.0;
                     for (int l = 0; l < k; ++l) {
                       temp += a[i + l * lda] * b[l + j * ldb];
                     }
                     c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
                   });
}
Note that in Kokkos, we use Kokkos::parallel to specify the parallel execution, and Kokkos::MDRangePolicy to define the iteration space. The lambda function inside Kokkos::parallel represents the computation to be performed in parallel. Also, Kokkos uses 0-based indexing, so we adjust the indexing accordingly.

--------------- Output 9 ---------------
Here is a possible implementation of the GEMM operation in C++ with Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}),
                       KOKKOS_LAMBDA(const int i, const int j) {
                         double temp = 0.0;
                         for (int l = 0; l < k; l++) {
                           temp += a[i + l * lda] * b[l + j * ldb];
                         }
                         c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
                       });
}
Note that this implementation assumes that the input matrices a and b are stored in row-major format, and the output matrix c is also stored in row-major format. Also, the Kokkos::parallel_for loop is used to parallelize the computation over the elements of the output matrix c.
You can adjust the memory layout and the parallelization strategy according to your specific needs and the requirements of the Kokkos library.

--------------- Output 10 ---------------
Here is the equivalent function in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::ParallelFor("GEMM", Kokkos::RangePolicy<>(0, n), 
                      KOKKOS_LAMBDA(const int& j) {
    for (int i = 0; i < m; ++i) {
      double temp = 0.0;
      for (int l = 0; l < k; ++l) {
        temp += a[i + l * lda] * b[l + j * ldb];
      }
      c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
    }
  });
}
Note that in Kokkos, we use the ParallelFor construct to parallelize the outer loop, and the inner loops are sequential. Also, we use the KOKKOS_LAMBDA macro to define a lambda function that captures the necessary variables and performs the computation.
Also, note that in C++ we use 0-based indexing, whereas in Fortran it's 1-based, so we adjust the indexing accordingly.
Please note that you need to have a Kokkos implementation that supports a C++ compiler, such as Kokkos with the Serial or OpenMP backend.

