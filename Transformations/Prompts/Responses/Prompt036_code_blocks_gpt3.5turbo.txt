Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 block(8, 8, 8);
    dim3 grid((n + block.x - 1) / block.x, (n + block.y - 1) / block.y, (n + block.z - 1) / block.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<grid, block>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        int idx = k * n * n + j * n + i;
        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - 1] +
                             u[idx + 1] + u[idx - n * n] + u[idx + n * n] +
                             u[idx]);
    }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    for(iter = 0; iter < niter; iter++) {
        for(k = 1; k < n-1; k++) {
            for(j = 1; j < n-1; j++) {
                for(i = 1; i < n-1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                                                        u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        // Copy unew to u
        for (int idx = 0; idx < n*n*n; idx++) {
            u[idx] = unew[idx];
        }
    }
}

__global__ void jacobi_parallel_cuda(double *u, double *unew, int n, int niter) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    int j = threadIdx.y + blockIdx.y * blockDim.y;
    int k = threadIdx.z + blockIdx.z * blockDim.z;
    
    if (i < n && j < n && k < n) {
        for(int iter = 0; iter < niter; iter++) {
            if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
                unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                                                  u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter){
    double *d_u, *d_unew;
    int size = sizeof(double) * n * n * n;
    
    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);
    
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    
    dim3 block_size(8, 8, 8);
    dim3 grid_size((n-2+block_size.x-1)/block_size.x, (n-2+block_size.y-1)/block_size.y, (n-2+block_size.z-1)/block_size.z);
    
    for(int iter = 0; iter < niter; iter++){
        jacobi_kernel<<<grid_size, block_size>>>(d_u, d_unew, n);
        
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }
    
    cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    
    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n){
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;
    
    if(i < n-1 && j < n-1 && k < n-1){
        int idx = k*n*n + j*n + i;
        unew[idx] = 0.125 * (u[idx - n*n] + u[idx + n*n] + u[idx - n] + u[idx + n] + u[idx - 1] + u[idx + 1] + u[idx]);
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[i-1 + j*n + k*n*n] + 
                                                      u[i+1 + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] + 
                                                      u[i + (j+1)*n + k*n*n] + 
                                                      u[i + j*n + (k-1)*n*n] + 
                                                      u[i + j*n + (k+1)*n*n] + 
                                                      u[i + j*n + k*n*n]);
                }
            }
        }
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                }
            }
        }
    }
}

__global__ void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[i-1 + j*n + k*n*n] + 
                                          u[i+1 + j*n + k*n*n] +
                                          u[i + (j-1)*n + k*n*n] + 
                                          u[i + (j+1)*n + k*n*n] + 
                                          u[i + j*n + (k-1)*n*n] + 
                                          u[i + j*n + (k+1)*n*n] + 
                                          u[i + j*n + k*n*n]);
        u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);
    
    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_unew, size);
    
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    
    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, (n + blockSize.z - 1) / blockSize.z);
    
    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaDeviceSynchronize();
        
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    }
    
    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_parallel_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    
    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        int idx = i + j*n + k*n*n;
        unew[idx] = 0.125 * (u[idx-n] + u[idx+n] + u[idx-n*n] + u[idx+n*n] + u[idx-1] + u[idx+1] + u[idx]);
    }
}

Code Block 6:
void jacobi_parallel_c(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blocksPerGrid(n/8, n/8, n/8);
    dim3 threadsPerBlock(8, 8, 8);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_cuda<<<blocksPerGrid, threadsPerBlock>>>(d_u, d_unew, n);
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_parallel_cuda(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n-1 && j >= 1 && j < n-1 && k >= 1 && k < n-1) {
        int idx = (k * n * n) + (j * n) + i;
        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - 1] + u[idx + 1] + u[idx - n*n] + u[idx + n*n] + u[idx]);
    }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = N * N * N * sizeof(double);
    
    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);
    
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    
    dim3 blockSize(256);
    dim3 gridSize((N * N * N + blockSize.x - 1) / blockSize.x);
    
    for(int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew);
        
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    }
    
    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew) {
    int i, j, k;
    int index = threadIdx.x + blockIdx.x * blockDim.x;
    
    if(index < N * N * N) {
        k = index / (N * N);
        j = (index % (N * N)) / N;
        i = index % N;
        
        if (i > 0 && i < N - 1 && j > 0 && j < N - 1 && k > 0 && k < N - 1) {
            unew[k * N * N + j * N + i] = 0.125 * (u[(k-1) * N * N + j * N + i] + u[(k+1) * N * N + j * N + i] + 
                                                    u[k * N * N + (j-1) * N + i] + u[k * N * N + (j+1) * N + i] + 
                                                    u[k * N * N + j * N + (i-1)] + u[k * N * N + j * N + (i+1)] + 
                                                    u[k * N * N + j * N + i]);
        }
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockDim(8, 8, 8);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x, (n + blockDim.y - 1) / blockDim.y, (n + blockDim.z - 1) / blockDim.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_kernel<<<gridDim, blockDim>>>(d_u, d_unew, n);
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);

        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_parallel_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                                          u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
    }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                      u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                                      u[i + j*n + k*n*n]);
                }
            }
        }
        for(int i = 0; i < n*n*n; i++) {
            u[i] = unew[i];
        }
    }
}

__global__ void jacobi_parallel_cuda(double *u, double *unew, int n, int niter) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    int j = threadIdx.y + blockIdx.y * blockDim.y;
    int k = threadIdx.z + blockIdx.z * blockDim.z;
    
    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                          u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                          u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                          u[i + j*n + k*n*n]);
    }
    
    __syncthreads();
    
    if (i == 0 && j == 0 && k == 0) {
        for(int i = 0; i < n*n*n; i++) {
            u[i] = unew[i];
        }
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int size = n*n*n*sizeof(double);
    double *d_u, *d_unew;

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + 7) / 8, (n + 7) / 8, (n + 7) / 8);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, unew, size, cudaMemcpyHostToDevice);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n-1 && j >= 1 && j < n-1 && k >= 1 && k < n-1) {
        int idx = i + j*n + k*n*n;
        unew[idx] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                            u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                            u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                            u[i + j*n + k*n*n]);
    }
}

