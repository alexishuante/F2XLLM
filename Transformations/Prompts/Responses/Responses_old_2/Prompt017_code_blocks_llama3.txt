Code Block 1:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma acc parallel num_gangs(nthreads) private(i, j, k, iter)
  {
    #pragma acc loop gang
    for (iter = 1; iter <= niter; iter++) {
      #pragma acc loop gang collapse(3)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
              u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
          }
        }
      }
      #pragma acc barrier
      #pragma acc loop gang collapse(3)
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            u[i][j][k] = unew[i][j][k];
          }
        }
      }
    }
  }
}

Code Block 2:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma acc parallel num_gangs(nthreads) vector_length(1) private(i, j, k, iter)
  {
    #pragma acc loop gang
    for (iter = 1; iter <= niter; iter++) {
      #pragma acc loop gang collapse(3)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] +
              (*u)[i][j-1][k] + (*u)[i][j+1][k] + (*u)[i][j][k-1] +
              (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma acc wait
      #pragma acc loop gang collapse(3)
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

Code Block 3:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma acc parallel num_gangs(nthreads) private(i, j, k, iter)
  {
    #pragma acc loop gang
    for (iter = 1; iter <= niter; iter++) {
      #pragma acc loop gang collapse(3)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[k][j][i] = 0.125 * (u[k][j][i-1] + u[k][j][i+1] + u[k][j-1][i] +
              u[k][j+1][i] + u[k-1][j][i] + u[k+1][j][i] + u[k][j][i]);
          }
        }
      }
      #pragma acc barrier
      #pragma acc loop gang collapse(3)
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            u[k][j][i] = unew[k][j][i];
          }
        }
      }
    }
  }
}

Code Block 4:
void jacobi_parallel(double *****u, double *****unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 1; iter <= niter; iter++) {
    #pragma acc parallel loop gang vector
    for (k = 2; k < n - 1; k++) {
      #pragma acc loop vector
      for (j = 2; j < n - 1; j++) {
        #pragma acc loop vector
        for (i = 2; i < n - 1; i++) {
          (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + 
            (*u)[i][j-1][k] + (*u)[i][j+1][k] + (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
        }
      }
    }
    #pragma acc wait
    #pragma acc copyout(u[:n][:n][:n])
    *u = *unew;
  }
}

Code Block 5:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma acc parallel num_gangs(nthreads) private(i, j, k, iter)
  {
    #pragma acc loop gang
    for (iter = 1; iter <= niter; iter++) {
      #pragma acc loop gang collapse(3)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[k][j][i] = 0.125 * (u[k][j][i-1] + u[k][j][i+1] + u[k][j-1][i] +
                                       u[k][j+1][i] + u[k-1][j][i] + u[k+1][j][i] + u[k][j][i]);
          }
        }
      }
      #pragma acc loop gang
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            u[k][j][i] = unew[k][j][i];
          }
        }
      }
    }
  }
}

Code Block 6:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma acc init device
  #pragma acc parallel num_gangs(nthreads) vector_length(1) \
    private(i, j, k, iter)
  {
    #pragma acc loop gang
    for (iter = 1; iter <= niter; iter++) {
      #pragma acc loop gang collapse(3)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + 
                                          (*u)[i][j-1][k] + (*u)[i][j+1][k] + 
                                          (*u)[i][j][k-1] + (*u)[i][j][k+1] + 
                                          (*u)[i][j][k]);
          }
        }
      }
      #pragma acc wait
      #pragma acc loop gang collapse(3)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

Code Block 7:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma acc data copy(u[:n][n][n], unew[:n][n][n])
  {
    #pragma acc parallel num_gangs(nthreads) vector_length(1)
    {
      #pragma acc loop gang
      for (iter = 1; iter <= niter; iter++) {
        #pragma acc loop gang
        for (k = 2; k < n - 1; k++) {
          #pragma acc loop vector
          for (j = 2; j < n - 1; j++) {
            #pragma acc loop vector
            for (i = 2; i < n - 1; i++) {
              (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + (*u)[i][j-1][k] +
                (*u)[i][j+1][k] + (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
            }
          }
        }
        #pragma acc wait
        #pragma acc loop gang
        for (k = 0; k < n; k++) {
          #pragma acc loop vector
          for (j = 0; j < n; j++) {
            #pragma acc loop vector
            for (i = 0; i < n; i++) {
              (*u)[i][j][k] = (*unew)[i][j][k];
            }
          }
        }
      }
    }
  }
}

Code Block 8:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;
 #pragma acc parallel num_gangs(n) vector_length(32) copy(u, unew)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma acc loop gang
      for (k = 2; k < n - 1; k++) {
        #pragma acc loop vector
        for (j = 2; j < n - 1; j++) {
          #pragma acc loop vector
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] +
              (*u)[i][j-1][k] + (*u)[i][j+1][k] + (*u)[i][j][k-1] +
              (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma acc wait
      #pragma acc loop gang
      for (k = 2; k < n - 1; k++) {
        #pragma acc loop vector
        for (j = 2; j < n - 1; j++) {
          #pragma acc loop vector
          for (i = 2; i < n - 1; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 0; iter < niter; iter++) {
    #pragma acc parallel loop gang vector
    for (k = 1; k < n - 1; k++) {
      #pragma acc loop vector
      for (j = 1; j < n - 1; j++) {
        #pragma acc loop vector
        for (i = 1; i < n - 1; i++) {
          unew[i*n*n + j*n + k] = 0.125 * (u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] +
            u[i*n*n + (j-1)*n + k] + u[i*n*n + (j+1)*n + k] +
            u[i*n*n + j*n + (k-1)] + u[i*n*n + j*n + (k+1)] + u[i*n*n + j*n + k]);
        }
      }
    }
    #pragma acc wait
    #pragma acc memcpy(u, unew, n*n*n*sizeof(double))
  }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 1; iter <= niter; iter++) {
    #pragma acc parallel loop gang vector
    for (k = 2; k < n - 1; k++) {
      #pragma acc loop vector
      for (j = 2; j < n - 1; j++) {
        #pragma acc loop vector
        for (i = 2; i < n - 1; i++) {
          unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
            u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] +
            u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
        }
      }
    }
    #pragma acc wait
    #pragma acc copyout(u[0:n*n*n], unew[0:n*n*n])
  }
}

