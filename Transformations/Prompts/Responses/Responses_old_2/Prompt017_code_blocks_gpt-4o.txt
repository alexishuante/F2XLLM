Code Block 1:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copyin(u[0:n*n*n]), copy(unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i + n*j + n*n*k] = 0.125 * (
                            u[(i-1) + n*j + n*n*k] + 
                            u[(i+1) + n*j + n*n*k] +
                            u[i + n*(j-1) + n*n*k] +
                            u[i + n*(j+1) + n*n*k] +
                            u[i + n*j + n*n*(k-1)] +
                            u[i + n*j + n*n*(k+1)] +
                            u[i + n*j + n*n*k]
                        );
                    }
                }
            }
    
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + n*j + n*n*k] = unew[i + n*j + n*n*k];
                    }
                }
            }
        }
    }
}

Code Block 2:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copy(u[0:n*n*n]) create(unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] +
                                                               u[(i+1) + j * n + k * n * n] +
                                                               u[i + (j-1) * n + k * n * n] +
                                                               u[i + (j+1) * n + k * n * n] +
                                                               u[i + j * n + (k-1) * n * n] +
                                                               u[i + j * n + (k+1) * n * n] +
                                                               u[i + j * n + k * n * n]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
                    }
                }
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;
    
    #pragma acc data copy(u[0:n*n*n]) create(unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + 
                                                         u[(i+1) + j*n + k*n*n] + 
                                                         u[i + (j-1)*n + k*n*n] + 
                                                         u[i + (j+1)*n + k*n*n] + 
                                                         u[i + j*n + (k-1)*n*n] + 
                                                         u[i + j*n + (k+1)*n*n] + 
                                                         u[i + j*n + k*n*n]);
                    }
                }
            }

            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                    }
                }
            }
        }
    }
}

Code Block 4:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copyin(u[0:n][0:n][0:n]) copyout(unew[0:n][0:n][0:n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) 
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }

            // Swap pointers
            double ***temp = u;
            u = unew;
            unew = temp;
        }
    }
}

Code Block 5:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma acc data copy(u[0:n][0:n][0:n], unew[0:n][0:n][0:n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) num_workers(nthreads) vector_length(n)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                                 u[i][j - 1][k] + u[i][j + 1][k] +
                                                 u[i][j][k - 1] + u[i][j][k + 1] +
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int iter, i, j, k;
    int size = n * n * n;

    #pragma acc data copy(u[0:size]) create(unew[0:size])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        int idx = i + n * (j + n * k);
                        unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] + 
                                            u[idx - n] + u[idx + n] + 
                                            u[idx - n*n] + u[idx + n*n] + 
                                            u[idx]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        int idx = i + n * (j + n * k);
                        u[idx] = unew[idx];
                    }
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    size_t size = n * n * n * sizeof(double);

    // Set up OpenACC environment
    #pragma acc data copyin(u[0:n*n*n]), create(unew[0:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k) 
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j * n + k * n * n] = 0.125 * (
                            u[(i - 1) + j * n + k * n * n] + 
                            u[(i + 1) + j * n + k * n * n] + 
                            u[i + (j - 1) * n + k * n * n] + 
                            u[i + (j + 1) * n + k * n * n] + 
                            u[i + j * n + (k - 1) * n * n] + 
                            u[i + j * n + (k + 1) * n * n] + 
                            u[i + j * n + k * n * n]
                        );
                    }
                }
            }

            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
                    }
                }
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int iter, i, j, k;

    for (iter = 0; iter < niter; iter++) {

        #pragma acc parallel loop collapse(3) private(i, j, k) present(u, unew)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] + 
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }

        #pragma acc parallel loop collapse(3) private(i, j, k) present(u, unew)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    // Main iteration loop
    #pragma acc data copyin(u[0:n][0:n][0:n]) copyout(unew[0:n][0:n][0:n])
    {
        for (iter = 1; iter <= niter; iter++) {
            
            // Apply Jacobi operation
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }

            // Barrier for synchronization (implicitly handled by `acc update` directive)
            #pragma acc update self(u[0:n][0:n][0:n])
            
            // Swap pointers for next iteration
            double ***temp = u;
            u = unew;
            unew = temp;
        }
    }
}

Code Block 10:
void jacobi_parallel(double*** u, double*** unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma acc data copy(u[0:n][0:n][0:n], unew[0:n][0:n][0:n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) num_workers(nthreads)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i][j][k] = 0.125 * (
                            u[i-1][j][k] + u[i+1][j][k] + 
                            u[i][j-1][k] + u[i][j+1][k] + 
                            u[i][j][k-1] + u[i][j][k+1] + 
                            u[i][j][k]);
                    }
                }
            }
            #pragma acc parallel loop
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

