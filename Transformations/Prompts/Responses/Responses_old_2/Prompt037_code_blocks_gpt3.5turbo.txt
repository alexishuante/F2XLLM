Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc((void **)&d_u, size);
    cudaMalloc((void **)&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
    dim3 gridSize((n - 2 + BLOCK_SIZE - 1) / BLOCK_SIZE, (n - 2 + BLOCK_SIZE - 1) / BLOCK_SIZE, (n - 2 + BLOCK_SIZE - 1) / BLOCK_SIZE);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int index = i + j * n + k * n * n;
        unew[index] = 0.125 * (u[index - n] + u[index + n] + u[index - n * n] + u[index + n * n] + u[index - 1] + u[index + 1] + u[index]);
    }
}

Code Block 2:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
    float *d_u, *d_unew;
    int size = n * n * n * sizeof(float);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaDeviceSynchronize();
        cudaMemcpy(u, d_unew, size, cudaMemcpyDeviceToHost);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(float *u, float *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    
    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        int index = i + j*n + k*n*n;
        unew[index] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                              u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                              u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + 
                              u[i + j*n + k*n*n]);
    }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew) {
    int i, j, k, iter;
    double *d_u, *d_unew;

    cudaMalloc(&d_u, N * N * N * sizeof(double));
    cudaMalloc(&d_unew, N * N * N * sizeof(double));

    cudaMemcpy(d_u, u, N * N * N * sizeof(double), cudaMemcpyHostToDevice);

    dim3 grid((N + 8 - 1) / 8, (N + 8 - 1) / 8, (N + 8 - 1) / 8);
    dim3 block(8, 8, 8);

    for(iter = 0; iter < NITER; iter++) {
        jacobi_kernel<<<grid, block>>>(d_u, d_unew);
        cudaDeviceSynchronize();
        cudaMemcpy(u, d_unew, N * N * N * sizeof(double), cudaMemcpyDeviceToHost);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < N - 1 && j < N - 1 && k < N - 1) {
        unew[i + j*N + k*N*N] = 0.125 * (u[(i-1) + j*N + k*N*N] + u[(i+1) + j*N + k*N*N] +
                                         u[i + (j-1)*N + k*N*N] + u[i + (j+1)*N + k*N*N] +
                                         u[i + j*N + (k-1)*N*N] + u[i + j*N + (k+1)*N*N] + u[i + j*N + k*N*N]);
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_cuda<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
        cudaDeviceSynchronize();

        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_parallel_cuda(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[k*n*n + j*n + i] = 0.125 * (u[(k-1)*n*n + j*n + i] + u[(k+1)*n*n + j*n + i] 
                                        + u[k*n*n + (j-1)*n + i] + u[k*n*n + (j+1)*n + i]
                                        + u[k*n*n + j*n + i-1] + u[k*n*n + j*n + i+1] 
                                        + u[k*n*n + j*n + i]);
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;

    cudaMalloc(&d_u, n * n * n * sizeof(double));
    cudaMalloc(&d_unew, n * n * n * sizeof(double));

    cudaMemcpy(d_u, u, n * n * n * sizeof(double), cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(16, 16, 16);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);

        cudaMemcpy(unew, d_unew, n * n * n * sizeof(double), cudaMemcpyDeviceToHost);

        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    int j = threadIdx.y + blockIdx.y * blockDim.y;
    int k = threadIdx.z + blockIdx.z * blockDim.z;

    if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        unew[i + n * (j + n * k)] = 0.125 * (u[i-1 + n * (j + n * k)]
                                              + u[i+1 + n * (j + n * k)]
                                              + u[i + n * (j-1 + n * k)]
                                              + u[i + n * (j+1 + n * k)]
                                              + u[i + n * (j + n * (k-1))]
                                              + u[i + n * (j + n * (k+1))]
                                              + u[i + n * (j + n * k)]);
    }
}

Code Block 6:
host
    for (int i = 0; i < N*N*N; i++) {
        u[i] = 1.0;
        unew[i] = 0.0;
    }

__global__ void jacobi_parallel(double *u, double *unew) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    
    if (i < N && j < N) {
        for (int k = 1; k < N - 1; k++) {
            unew[i + j*N + k*N*N] = 0.125 * (u[(i-1) + j*N + k*N*N] + u[(i+1) + j*N + k*N*N] + 
                                             u[i + (j-1)*N + k*N*N] + u[i + (j+1)*N + k*N*N] + 
                                             u[i + j*N + (k-1)*N*N] + u[i + j*N + (k+1)*N*N] + 
                                             u[i + j*N + k*N*N]); 
        }
    }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);
    
    cudaMalloc((void**)&d_u, size);
    cudaMalloc((void**)&d_unew, size);
    
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    
    dim3 blockDim(8, 8, 8);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x, (n + blockDim.y - 1) / blockDim.y, (n + blockDim.z - 1) / blockDim.z);
    
    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridDim, blockDim>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }
    
    cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
    
    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    
    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125f * (u[idx - n] + u[idx + n] + u[idx - 1] + u[idx + 1] + u[idx - n * n] + u[idx + n * n] + u[idx]);
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int size = n * n * n * sizeof(double);
    double *d_u, *d_unew;
    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);
    
    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
    
    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n-2)/blockSize.x + 1, (n-2)/blockSize.y + 1, (n-2)/blockSize.z + 1);
    
    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        
        cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);
        cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToDevice);
    }
    
    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = threadIdx.x + blockIdx.x * blockDim.x + 1;
    int j = threadIdx.y + blockIdx.y * blockDim.y + 1;
    int k = threadIdx.z + blockIdx.z * blockDim.z + 1;
    
    if (i < n-1 && j < n-1 && k < n-1) {
        int index = i + j * n + k * n * n;
        unew[index] = 0.125 * (u[index - n] + u[index + n] + u[index - n * n] +
                               u[index + n * n] + u[index - 1] + u[index + 1] + u[index]);
    }
}

Code Block 9:
void jacobi_parallel_c(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    cudaMalloc(&d_u, size);
    cudaMalloc(&d_unew, size);

    cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + 7) / 8, (n + 7) / 8, (n + 7) / 8);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_cuda<<<gridSize, blockSize>>>(d_u, d_unew, n);
        cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
    }

    cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_parallel_cuda(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    
    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - n * n] 
                            + u[idx + n * n] + u[idx - 1] + u[idx + 1] 
                            + u[idx]);
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    double *d_u, *d_unew;
    int iter;

    cudaMalloc(&d_u, sizeof(double) * n * n * n);
    cudaMalloc(&d_unew, sizeof(double) * n * n * n);
    
    cudaMemcpy(d_u, u, sizeof(double) * n * n * n, cudaMemcpyHostToDevice);
    
    dim3 grid((n-2)/8 + 1, (n-2)/8 + 1, (n-2)/8 + 1);
    dim3 block(8, 8, 8);

    for(iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<grid, block>>>(d_u, d_unew);
        cudaMemcpy(u, d_u, sizeof(double) * n * n * n, cudaMemcpyDeviceToHost);
    }

    cudaFree(d_u);
    cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if(i < N - 1 && j < N - 1 && k < N - 1) {
        unew[i + j*N + k*N*N] = 0.125 * (u[(i-1) + j*N + k*N*N] + u[(i+1) + j*N + k*N*N] + u[i + (j-1)*N + k*N*N]
                    + u[i + (j+1)*N + k*N*N] + u[i + j*N + (k-1)*N*N] + u[i + j*N + (k+1)*N*N] + u[i + j*N + k*N*N]);
    }
}

