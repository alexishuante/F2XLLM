Code Block 1:
void jacobi_parallel_c(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + 
                                                    u[(i+1) * n * n + j * n + k] + 
                                                    u[i * n * n + (j-1) * n + k] + 
                                                    u[i * n * n + (j+1) * n + k] + 
                                                    u[i * n * n + j * n + (k-1)] + 
                                                    u[i * n * n + j * n + (k+1)] + 
                                                    u[i * n * n + j * n + k]);
          }
        }
      }
      #pragma omp barrier
      for (i = 0; i < n * n * n; i++) {
        u[i] = unew[i];
      }
    }
  }
}

__global__ void jacobi_parallel_cuda(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int iter;
  for (iter = 1; iter <= niter; iter++) {
    if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + 
                                              u[(i+1) * n * n + j * n + k] + 
                                              u[i * n * n + (j-1) * n + k] + 
                                              u[i * n * n + (j+1) * n + k] + 
                                              u[i * n * n + j * n + (k-1)] + 
                                              u[i * n * n + j * n + (k+1)] + 
                                              u[i * n * n + j * n + k]);
    }
    __syncthreads();
    if (i >= 0 && i < n && j >= 0 && j < n && k >= 0 && k < n) {
      u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
    }
  }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i + j * n + k * n * n] = 0.125 * (u[(i - 1) + j * n + k * n * n] +
                                                    u[(i + 1) + j * n + k * n * n] +
                                                    u[i + (j - 1) * n + k * n * n] +
                                                    u[i + (j + 1) * n + k * n * n] +
                                                    u[i + j * n + (k - 1) * n * n] +
                                                    u[i + j * n + (k + 1) * n * n] +
                                                    u[i + j * n + k * n * n]);
          }
        }
      }
      #pragma omp barrier
      for (i = 0; i < n * n * n; i++) {
        u[i] = unew[i];
      }
    }
  }
}

__global__ void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int idx = i + j * n + k * n * n;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[idx] = 0.125 * (u[(i - 1) + j * n + k * n * n] +
                           u[(i + 1) + j * n + k * n * n] +
                           u[i + (j - 1) * n + k * n * n] +
                           u[i + (j + 1) * n + k * n * n] +
                           u[i + j * n + (k - 1) * n * n] +
                           u[i + j * n + (k + 1) * n * n] +
                           u[i + j * n + k * n * n]);
      __syncthreads();
      if (iter < niter) {
        u[idx] = unew[idx];
      }
    }
  }
}

Code Block 3:
void jacobi_parallel_c(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 0; iter < niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 1; k < n - 1; k++) {
        for (j = 1; j < n - 1; j++) {
          for (i = 1; i < n - 1; i++) {
            int idx = i + j * n + k * n * n;
            unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] + u[idx - n] + u[idx + n] +
                                  u[idx - n * n] + u[idx + n * n] + u[idx]);
          }
        }
      }
      #pragma omp barrier
      double *tmp = u;
      u = unew;
      unew = tmp;
    }
  }
}

__global__ void jacobi_parallel_cuda(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    int idx = i + j * n + k * n * n;
    for (int iter = 0; iter < niter; iter++) {
      unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] + u[idx - n] + u[idx + n] +
                            u[idx - n * n] + u[idx + n * n] + u[idx]);
      __syncthreads();
      double *tmp = u;
      u = unew;
      unew = tmp;
    }
  }
}

Code Block 4:
void jacobi_parallel(float ***u, float ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;

  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] +
                                         (*u)[i][j-1][k] + (*u)[i][j+1][k] +
                                         (*u)[i][j][k-1] + (*u)[i][j][k+1] +
                                         (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] +
                                              u[(i+1) + j * n + k * n * n] +
                                              u[i + (j-1) * n + k * n * n] +
                                              u[i + (j+1) * n + k * n * n] +
                                              u[i + j * n + (k-1) * n * n] +
                                              u[i + j * n + (k+1) * n * n] +
                                              u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 5:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 0; iter < niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 1; k < n - 1; k++) {
        for (j = 1; j < n - 1; j++) {
          for (i = 1; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + (*u)[i][j-1][k] +
              (*u)[i][j+1][k] + (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int iter;

  for (iter = 0; iter < niter; iter++) {
    if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
      unew[i + j * n + k * n * n] = 0.125 * (u[i-1 + j * n + k * n * n] + u[i+1 + j * n + k * n * n] +
        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
    }
    __syncthreads();
    if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 6:
void jacobi_parallel_c(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
              u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
              u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n * n * n; k++) {
        u[k] = unew[k];
      }
    }
  }
}

__global__ void jacobi_parallel_cuda(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      if (i == 2 && j == 2 && k == 2) {
        for (int idx = 0; idx < n * n * n; idx++) {
          u[idx] = unew[idx];
        }
      }
    }
  }
}

Code Block 7:
void jacobi_parallel(float ***u, float ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + (*u)[i][j-1][k] +
              (*u)[i][j+1][k] + (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 8:
void jacobi_host(float *u, float *unew, int n, int niter) {
  int iter, i, j, k;
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
              u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
              u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
              u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
        }
      }
    }
    float *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_device(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    for (int iter = 0; iter < niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
          u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
          u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
          u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, iter;
  double *u_d, *unew_d;
  cudaMalloc((void **)&u_d, n * n * n * sizeof(double));
  cudaMalloc((void **)&unew_d, n * n * n * sizeof(double));
  cudaMemcpy(u_d, u, n * n * n * sizeof(double), cudaMemcpyHostToDevice);
  for (iter = 0; iter < niter; iter++) {
    dim3 block(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
    dim3 grid((n + BLOCK_SIZE - 1) / BLOCK_SIZE, (n + BLOCK_SIZE - 1) / BLOCK_SIZE, (n + BLOCK_SIZE - 1) / BLOCK_SIZE);
    jacobi_kernel<<<grid, block>>>(u_d, unew_d, n);
    cudaDeviceSynchronize();
    cudaMemcpy(u_d, unew_d, n * n * n * sizeof(double), cudaMemcpyDeviceToDevice);
  }
  cudaMemcpy(u, u_d, n * n * n * sizeof(double), cudaMemcpyDeviceToHost);
  cudaFree(u_d);
  cudaFree(unew_d);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * BLOCK_SIZE + threadIdx.x;
  int j = blockIdx.y * BLOCK_SIZE + threadIdx.y;
  int k = blockIdx.z * BLOCK_SIZE + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (
      u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
      u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] +
      u[i * n * n + j * n + (k-1)] + u[i * n * n + j * n + (k+1)] +
      u[i * n * n + j * n + k]);
  }
}

Code Block 10:
void jacobi_parallel(float ***u, float ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 0; iter < niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 1; k < n - 1; k++) {
        for (j = 1; j < n - 1; j++) {
          for (i = 1; i < n - 1; i++) {
            unew[k][j][i] = 0.125 * (u[k][j][i-1] + u[k][j][i+1] + u[k][j-1][i] +
              u[k][j+1][i] + u[k-1][j][i] + u[k+1][j][i] + u[k][j][i]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            u[k][j][i] = unew[k][j][i];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= n || j >= n || k >= n) return;
  for (int iter = 0; iter < niter; iter++) {
    unew[k * n * n + j * n + i] = 0.125 * (u[k * n * n + j * n + (i-1)] +
      u[k * n * n + j * n + (i+1)] + u[k * n * n + (j-1) * n + i] +
      u[k * n * n + (j+1) * n + i] + u[(k-1) * n * n + j * n + i] +
      u[(k+1) * n * n + j * n + i] + u[k * n * n + j * n + i]);
  }
  __syncthreads();
  u[k * n * n + j * n + i] = unew[k * n * n + j * n + i];
}

