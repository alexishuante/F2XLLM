Code Block 1:
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc kernels
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
    #pragma acc end kernels
}

Code Block 2:
arrays
    for (int i = 0; i < n; i++) {
        x[i] = (float)i;
        y[i] = (float)i * 2;
    }

Code Block 3:
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc kernels
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
    #pragma acc end kernels
}

Code Block 4:
void saxpy(int n, float a, float *restrict x, float *restrict y) {
    #pragma acc kernels
    {
        for (int i = 0; i < n; ++i) {
            y[i] = a * x[i] + y[i];
        }
    }
    #pragma acc end kernels
}

Code Block 5:
void saxpy(int n, float a, float *x, float *y) {
    // OpenACC parallel region
    #pragma acc kernels
    for (int i = 0; i < n; ++i) {
        y[i] = a * x[i] + y[i];
    }
    #pragma acc end kernels
}

Code Block 6:
void saxpy(int n, float a, float* x, float* y) {
    int i;

    #pragma acc parallel loop present(x[0:n], y[0:n])
    for (i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
}

Code Block 7:
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc kernels
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
    #pragma acc end kernels
}

Code Block 8:
void saxpy(int n, float a, float *x, float *y) {
    int i;

    #pragma acc kernels
    for (i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
    #pragma acc end kernels
}

Code Block 9:
void saxpy(int n, float a, float * restrict x, float * restrict y) {
    // OpenACC directive to parallelize the following loop
    #pragma acc kernels
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
    #pragma acc end kernels
}

Code Block 10:
void saxpy(int n, float a, float *x, float *y) {
    int i;
    
    #pragma acc kernels
    for (i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
    #pragma acc end kernels
}

