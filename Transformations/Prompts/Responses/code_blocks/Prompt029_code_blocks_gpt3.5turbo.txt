Code Block 1:
void spmv_parallel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    // Allocate memory on the GPU
    hipMalloc(&d_val, nnz * sizeof(float));
    hipMalloc(&d_row, (n+1) * sizeof(int));
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    // Copying data from host to device
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n+1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    // Launching kernel
    dim3 blocks((n + 255) / 256, 1, 1);
    dim3 threads(256, 1, 1);
    spmv_kernel<<<blocks, threads>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);

    // Copying result back to host
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    // Freeing memory
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void spmv_kernel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        y[i] = 0.0f;
        
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 2:
void spmv_parallel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    
    hipMalloc(&d_val, nnz * sizeof(float));
    hipMalloc(&d_row, (n+1) * sizeof(int));
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));
    
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n+1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    
    int block_size = 256;
    int num_blocks = (n + block_size - 1) / block_size;
    
    spmv_kernel<<<num_blocks, block_size>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void spmv_kernel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        y[i] = 0.0f;
        
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 3:
void spmv(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    int i, j;
    #pragma omp parallel for shared(n, nnz, val, row, col, x, y) private(i, j)
    for(i = 0; i < n; i++) {
        y[i] = 0.0;
        for(j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 4:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y)
{
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    
    hipMalloc(&d_val, nnz * sizeof(float));
    hipMalloc(&d_row, (n+1) * sizeof(int));
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));
    
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_row, row, (n+1) * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    spmv_kernel<<<numBlocks, blockSize>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y)
{
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    
    if(idx < n)
    {
        y[idx] = 0.0;
        for(int j = row[idx]; j < row[idx+1]; j++)
        {
            y[idx] += val[j] * x[col[j]];
        }
    }
}

Code Block 5:
void spmv(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i, j;
    
    #pragma acc parallel loop present(val, row, col, x, y)
    for(i = 0; i < n; i++) {
        y[i] = 0.0;
        for(j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 6:
void spmv(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    for (int i = 0; i < n; i++) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 7:
void spmv_parallel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    hipMalloc((void**)&d_val, nnz * sizeof(float));
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);

    hipMalloc((void**)&d_row, (n+1) * sizeof(int));
    hipMemcpy(d_row, row, (n+1) * sizeof(int), hipMemcpyHostToDevice);

    hipMalloc((void**)&d_col, nnz * sizeof(int));
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);

    hipMalloc((void**)&d_x, n * sizeof(float));
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    hipMalloc((void**)&d_y, n * sizeof(float);

    dim3 grid((n-1)/256 + 1, 1, 1);
    dim3 block(256, 1, 1);

    spmv_kernel<<<grid, block>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void spmv_kernel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    if (i < n) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 8:
void spmv_parallel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    hipLaunchKernelGGL(spmv_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, nnz, val, row, col, x, y);
}

__global__
void spmv_kernel(int n, int nnz, float* __restrict__ val, int* __restrict__ row, int* __restrict__ col, float* __restrict__ x, float* __restrict__ y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 9:
void spmv_parallel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    
    hipMalloc(&d_val, nnz * sizeof(float));
    hipMemcpy(d_val, val, nnz * sizeof(float), hipMemcpyHostToDevice);
    
    hipMalloc(&d_row, (n + 1) * sizeof(int));
    hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
    
    hipMalloc(&d_col, nnz * sizeof(int));
    hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);
    
    hipMalloc(&d_x, n * sizeof(float));
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    
    hipMalloc(&d_y, n * sizeof(float));
    
    int block_size = 256;
    int grid_size = (n + block_size - 1) / block_size;
    
    hipLaunchKernelGGL(spmv_kernel, grid_size, block_size, 0, 0, n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(d_val);
    hipFree(d_row);
    hipFree(d_col);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void spmv_kernel(int n, int nnz, float* val, int* row, int* col, float* x, float* y) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (tid < n) {
        y[tid] = 0.0f;
        for (int j = row[tid]; j < row[tid + 1]; j++) {
            y[tid] += val[j] * x[col[j]];
        }
    }
}

Code Block 10:
void spmv_hip(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i, j;
    
    // Initialize output vector y to 0
    for(i = 0; i < n; i++) {
        y[i] = 0.0f;
    }
    
    hipLaunchKernelGGL(spmv_kernel, dim3(1), dim3(n), 0, 0, n, nnz, val, row, col, x, y);
}

__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if(i < n) {
        // Perform SpMV operation for row i
        for(int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

