Code Block 1:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n], y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0;
        #pragma acc loop reduction(+:y[i])
        for (int j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 2:
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i, j;

    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n], y[0:n])
    for (i = 0; i < n; i++) {
        y[i] = 0.0f;
        #pragma acc loop seq
        for (j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 3:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i, j;
    
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n], y[0:n])
    for (i = 0; i < n; ++i) {
        y[i] = 0.0;
        #pragma acc loop seq
        for (j = row[i]; j < row[i + 1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 4:
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i, j;

    // Ensure that the arrays val, row, col, and x are data regions
    #pragma acc data copyin(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
    {
        // Parallelize the outer loop with OpenACC
        #pragma acc parallel loop 
        for (i = 0; i < n; i++) {
            y[i] = 0.0f;
            for (j = row[i]; j < row[i+1]; j++) {
                y[i] += val[j] * x[col[j]];
            }
        }
    }
}

Code Block 5:
void spmv_parallel(int n, int nnz, const float* restrict val, const int* restrict row, const int* restrict col, const float* restrict x, float* restrict y) {
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n], y[0:n])
    for (int i = 0; i < n; ++i) {
        y[i] = 0.0f;
        
        #pragma acc loop seq
        for (int j = row[i]; j < row[i+1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 6:
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i, j;

    #pragma acc parallel loop gang vector present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n], y[0:n])
    for (i = 0; i < n; i++) {
        y[i] = 0.0f;
        #pragma acc loop vector
        for (j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 7:
void spmv_parallel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y) {
    // Initialize the result vector y to zero
    #pragma acc parallel loop present(y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0f;
    }

    // Perform SpMV operation
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n], y[0:n])
    for (int i = 0; i < n; i++) {
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 8:
void spmv_parallel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y) {
    int i, j;

    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n], y[0:n])
    for (i = 0; i < n; i++) {
        y[i] = 0.0f;
        #pragma acc loop
        for (j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 9:
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    #pragma acc parallel loop present(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n], y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0f;
        #pragma acc loop seq
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 10:
void spmv_parallel(int n, int nnz, float val[], int row[], int col[], float x[], float y[]) {
    int i, j;

    #pragma acc parallel loop present(val[:nnz], row[:n+1], col[:nnz], x[:n], y[:n])
    for (i = 0; i < n; i++) {
        y[i] = 0.0;
        #pragma acc loop
        for (j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

