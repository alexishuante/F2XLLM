Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int size = n * n * n * sizeof(double);
  double *d_u, *d_unew;

  cudaMalloc((void **)&d_u, size);
  cudaMalloc((void **)&d_unew, size);

  cudaMemcpy(d_u, u, size, cudaMemcpyHostToDevice);
  cudaMemcpy(d_unew, unew, size, cudaMemcpyHostToDevice);

  dim3 block(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
  dim3 grid((n + BLOCK_SIZE - 1) / BLOCK_SIZE, (n + BLOCK_SIZE - 1) / BLOCK_SIZE, (n + BLOCK_SIZE - 1) / BLOCK_SIZE);

  for (int iter = 0; iter < niter; iter++) {
    jacobi_kernel<<<grid, block>>>(d_u, d_unew, n);
    cudaMemcpy(d_u, d_unew, size, cudaMemcpyDeviceToDevice);
  }

  cudaMemcpy(u, d_u, size, cudaMemcpyDeviceToHost);
  cudaMemcpy(unew, d_unew, size, cudaMemcpyDeviceToHost);

  cudaFree(d_u);
  cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (
      u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
      u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] +
      u[i * n * n + j * n + (k-1)] + u[i * n * n + j * n + (k+1)] +
      u[i * n * n + j * n + k]);
  }
}

Code Block 2:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  int blockSize = 16;
  int numBlocks = (n + blockSize - 1) / blockSize;

  for (int iter = 0; iter < niter; iter++) {
    jacobi_kernel<<<dim3(numBlocks, numBlocks, numBlocks), dim3(blockSize, blockSize, blockSize)>>>(
      u, unew, n
    );
    cudaDeviceSynchronize();
    float *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_kernel(float *u, float *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125f * (
      u[(i - 1) * n * n + j * n + k] +
      u[(i + 1) * n * n + j * n + k] +
      u[i * n * n + (j - 1) * n + k] +
      u[i * n * n + (j + 1) * n + k] +
      u[i * n * n + j * n + (k - 1)] +
      u[i * n * n + j * n + (k + 1)] +
      u[i * n * n + j * n + k]
    );
  }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int blockSize = 16;
  int numBlocks = (n + blockSize - 1) / blockSize;

  dim3 block(blockSize, blockSize, blockSize);
  dim3 grid(numBlocks, numBlocks, numBlocks);

  for (int iter = 0; iter < niter; iter++) {
    jacobi_kernel<<<grid, block>>>(u, unew, n);
    cudaDeviceSynchronize();
    std::swap(u, unew);
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (
      u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
      u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] +
      u[i * n * n + j * n + (k-1)] + u[i * n * n + j * n + (k+1)] +
      u[i * n * n + j * n + k]
    );
  }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int blockSize = 16;
  int numBlocks = (n + blockSize - 1) / blockSize;

  dim3 block(blockSize, blockSize, blockSize);
  dim3 grid(numBlocks, numBlocks, numBlocks);

  for (int iter = 0; iter < niter; iter++) {
    jacobi_kernel<<<grid, block>>>(u, unew, n);
    cudaDeviceSynchronize();
    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] +
                                           u[(i+1) * n * n + j * n + k] +
                                           u[i * n * n + (j-1) * n + k] +
                                           u[i * n * n + (j+1) * n + k] +
                                           u[i * n * n + j * n + (k-1)] +
                                           u[i * n * n + j * n + (k+1)] +
                                           u[i * n * n + j * n + k]);
  }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int blockSize = 16;
  int numBlocks = (n + blockSize - 1) / blockSize;

  dim3 block(blockSize, blockSize, blockSize);
  dim3 grid(numBlocks, numBlocks, numBlocks);

  for (int iter = 0; iter < niter; iter++) {
    jacobi_kernel<<<grid, block>>>(u, unew, n);
    cudaDeviceSynchronize();
    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (
      u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
      u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] +
      u[i * n * n + j * n + (k-1)] + u[i * n * n + j * n + (k+1)] +
      u[i * n * n + j * n + k]);
  }
}

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int size = SIZE;
  double *d_u, *d_unew;

  cudaMalloc((void **)&d_u, size * sizeof(double));
  cudaMalloc((void **)&d_unew, size * sizeof(double));

  cudaMemcpy(d_u, u, size * sizeof(double), cudaMemcpyHostToDevice);
  cudaMemcpy(d_unew, unew, size * sizeof(double), cudaMemcpyHostToDevice);

  int blockSize = 256;
  int numBlocks = (size + blockSize - 1) / blockSize;

  for (int iter = 0; iter < niter; iter++) {
    jacobi_kernel<<<numBlocks, blockSize>>>(d_u, d_unew, n);
    cudaDeviceSynchronize();
    cudaMemcpy(d_u, d_unew, size * sizeof(double), cudaMemcpyDeviceToDevice);
  }

  cudaMemcpy(u, d_u, size * sizeof(double), cudaMemcpyDeviceToHost);

  cudaFree(d_u);
  cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  int i = idx / (n * n);
  int j = (idx / n) % n;
  int k = idx % n;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[idx] = 0.125 * (u[idx - n * n - n - 1] + u[idx - n * n - n + 1] +
                         u[idx - n * n - 1] + u[idx - n * n + 1] +
                         u[idx - n - 1] + u[idx - n + 1] + u[idx] + u[idx + 1]);
  }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int blockSize = 16;
  int numBlocks = (n + blockSize - 1) / blockSize;

  dim3 block(blockSize, blockSize, blockSize);
  dim3 grid(numBlocks, numBlocks, numBlocks);

  for (int iter = 0; iter < niter; iter++) {
    jacobi_kernel<<<grid, block>>>(u, unew, n);
    cudaDeviceSynchronize();
    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (
      u[(i - 1) * n * n + j * n + k] +
      u[(i + 1) * n * n + j * n + k] +
      u[i * n * n + (j - 1) * n + k] +
      u[i * n * n + (j + 1) * n + k] +
      u[i * n * n + j * n + (k - 1)] +
      u[i * n * n + j * n + (k + 1)] +
      u[i * n * n + j * n + k]
    );
  }
}

Code Block 8:
host
  for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
      for (int k = 0; k < n; k++) {
        u[i * n * n + j * n + k] = (double)(i + j + k);
      }
    }
  }

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
                                            u[(i + 1) * n * n + j * n + k] +
                                            u[i * n * n + (j - 1) * n + k] +
                                            u[i * n * n + (j + 1) * n + k] +
                                            u[i * n * n + j * n + (k - 1)] +
                                            u[i * n * n + j * n + (k + 1)] +
                                            u[i * n * n + j * n + k]);
  }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int blockSize = 16;
  int numBlocks = (n + blockSize - 1) / blockSize;

  dim3 block(blockSize, blockSize, blockSize);
  dim3 grid(numBlocks, numBlocks, numBlocks);

  for (int iter = 0; iter < niter; iter++) {
    jacobi_kernel<<<grid, block>>>(u, unew, n);
    cudaDeviceSynchronize();
    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
                                           u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] +
                                           u[i * n * n + j * n + (k-1)] + u[i * n * n + j * n + (k+1)] +
                                           u[i * n * n + j * n + k]);
  }
}

Code Block 10:
void jacobi_cuda(float *u, float *unew, int n, int niter) {
  int i, j, k, iter;
  float *d_u, *d_unew;

  // Allocate memory on the GPU
  cudaMalloc((void **)&d_u, n * n * n * sizeof(float));
  cudaMalloc((void **)&d_unew, n * n * n * sizeof(float));

  // Copy data from host to device
  cudaMemcpy(d_u, u, n * n * n * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_unew, unew, n * n * n * sizeof(float), cudaMemcpyHostToDevice);

  // Define the CUDA kernel
  __global__ void jacobi_kernel(float *u, float *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
      unew[i + j * n + k * n * n] = 0.125f * (
        u[(i - 1) + j * n + k * n * n] +
        u[(i + 1) + j * n + k * n * n] +
        u[i + (j - 1) * n + k * n * n] +
        u[i + (j + 1) * n + k * n * n] +
        u[i + j * n + (k - 1) * n * n] +
        u[i + j * n + (k + 1) * n * n] +
        u[i + j * n + k * n * n]);
    }
  }

  // Launch the CUDA kernel
  dim3 blockSize(16, 16, 16);
  dim3 gridSize((n + blockSize.x - 1) / blockSize.x,
                (n + blockSize.y - 1) / blockSize.y,
                (n + blockSize.z - 1) / blockSize.z);

  for (iter = 1; iter <= niter; iter++) {
    jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
    cudaDeviceSynchronize();
    float *tmp = d_u;
    d_u = d_unew;
    d_unew = tmp;
  }

  // Copy result back to host
  cudaMemcpy(u, d_u, n * n * n * sizeof(float), cudaMemcpyDeviceToHost);

  // Free GPU memory
  cudaFree(d_u);
  cudaFree(d_unew);
}

__global__ void jacobi_kernel(float *u, float *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
      unew[i + j * n + k * n * n] = 0.125f * (
        u[(i - 1) + j * n + k * n * n] +
        u[(i + 1) + j * n + k * n * n] +
        u[i + (j - 1) * n + k * n * n] +
        u[i + (j + 1) * n + k * n * n] +
        u[i + j * n + (k - 1) * n * n] +
        u[i + j * n + (k + 1) * n * n] +
        u[i + j * n + k * n * n]);
    }
  }

