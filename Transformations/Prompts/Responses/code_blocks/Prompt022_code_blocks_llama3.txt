Code Block 1:
void saxpy(int n, float a, float *x, float *y) {
  hipLaunchKernel(GPU_saxpy, dim3(n), dim3(1), 0, 0, n, a, x, y);
}

__global__ void GPU_saxpy(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 2:
void saxpy(int n, float a, float *x, float *y) {
  hipLaunchKernel(saxpy_kernel, dim3(1), dim3(n), 0, 0, n, a, x, y);
}

__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 3:
void saxpy(int n, float a, float *x, float *y) {
  hipLaunchKernel(saxpy_kernel, dim3(1), dim3(n), 0, 0, n, a, x, y);
}

__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 4:
void saxpy(int n, float a, float *x, float *y) {
  int i;
  hipLaunchKernel(GLOBAL_KERNEL, dim3(n), dim3(1), 0, 0, 
                   (void *)axpy_kernel, n, a, x, y);
}

__global__ void axpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 5:
void saxpy(int n, float a, float *x, float *y) {
  hipLaunchKernel(GPU_saxpy, dim3(1), dim3(n), 0, 0, n, a, x, y);
}

__global__ void GPU_saxpy(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 6:
void saxpy(int n, float a, float *x, float *y) {
  hipLaunchKernelGGL(HIP_KERNEL_NAME(saxpy_kernel), dim3(n), dim3(1), 0, 0, n, a, x, y);
}

__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 7:
void saxpy(int n, float a, float *x, float *y) {
  hipLaunchKernel(GPU_saxpy, dim3(1), dim3(n), 0, 0, n, a, x, y);
}

__global__ void GPU_saxpy(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 8:
void saxpy(int n, float a, float *x, float *y) {
  hipLaunchKernel(saxpy_kernel, dim3(n), dim3(1), 0, 0, n, a, x, y);
}

__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 9:
void saxpy(int n, float a, float *x, float *y) {
  hipLaunchKernel(GPU_saxpy, dim3(1), dim3(n), 0, 0, n, a, x, y);
}

__global__ void GPU_saxpy(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 10:
void saxpy(int n, float a, float *x, float *y) {
  hipLaunchKernel(saxpy_kernel, dim3(n), dim3(1), 0, 0, n, a, x, y);
}

__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

