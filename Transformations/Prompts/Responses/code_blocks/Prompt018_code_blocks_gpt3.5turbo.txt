Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + n*j + n*n*k] = 0.125 * (u[(i-1) + n*j + n*n*k] + u[(i+1) + n*j + n*n*k] + u[i + n*(j-1) + n*n*k] +
                        u[i + n*(j+1) + n*n*k] + u[i + n*j + n*n*(k-1)] + u[i + n*j + n*n*(k+1)] + u[i + n*j + n*n*k]);
                }
            }
        }
        #pragma acc update host(u[:n*n*n])
        memcpy(u, unew, n*n*n*sizeof(double));
    }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    for(iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for(k = 1; k < n - 1; k++) {
            for(j = 1; j < n - 1; j++) {
                for(i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                      u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                                      u[i + j*n + k*n*n]);
                }
            }
        }
        #pragma acc update self(u[0:n*n*n])
    }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma acc data copyin(u[0:n*n*n]) copyout(unew[0:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                         u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                         u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                                         u[i + j*n + k*n*n]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                    }
                }
            }
        }
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma acc data copyin(u[:n*n*n]) copy(unew[:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                            u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] +
                            u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n]);
                    }
                }
            }
            #pragma acc update device(u[:n*n*n])
        }
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter)
{
    int i, j, k, iter;
    #pragma acc data copyin(u[0:n*n*n]) copy(unew[0:n*n*n])
    {
        for(iter = 1; iter <= niter; iter++)
        {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for(k = 1; k < n - 1; k++)
            {
                for(j = 1; j < n - 1; j++)
                {
                    for(i = 1; i < n - 1; i++)
                    {
                        unew[i + n*(j + n*k)] = 0.125 * (u[i - 1 + n*(j + n*k)] + u[i + 1 + n*(j + n*k)] + u[i + n*(j - 1 + n*k)] +
                            u[i + n*(j + 1 + n*k)] + u[i + n*(j + n*(k - 1))] + u[i + n*(j + n*(k + 1))] + u[i + n*(j + n*k)]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for(k = 1; k < n - 1; k++)
            {
                for(j = 1; j < n - 1; j++)
                {
                    for(i = 1; i < n - 1; i++)
                    {
                        u[i + n*(j + n*k)] = unew[i + n*(j + n*k)];
                    }
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + n*(j + n*k)] = 0.125 * (u[i-1 + n*(j + n*k)] + u[i+1 + n*(j + n*k)] 
                                                        + u[i + n*(j-1 + n*k)] + u[i + n*(j+1 + n*k)] 
                                                        + u[i + n*(j + n*(k-1))] + u[i + n*(j + n*(k+1))] 
                                                        + u[i + n*(j + n*k)]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        u[i + n*(j + n*k)] = unew[i + n*(j + n*k)];
                    }
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + n*j + n*n*k] = 0.125 * (u[(i-1) + n*j + n*n*k] 
                            + u[(i+1) + n*j + n*n*k] + u[i + n*(j-1) + n*n*k] 
                            + u[i + n*(j+1) + n*n*k] + u[i + n*j + n*n*(k-1)] 
                            + u[i + n*j + n*n*(k+1)] + u[i + n*j + n*n*k]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        u[i + n*j + n*n*k] = unew[i + n*j + n*n*k];
                    }
                }
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                          u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                          u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                                          u[i + j*n + k*n*n]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for (int i = 0; i < n*n*n; i++) {
                u[i] = unew[i];
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    for(iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for(k = 1; k < n - 1; k++) {
            for(j = 1; j < n - 1; j++) {
                for(i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] 
                                                      + u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        #pragma acc update self(u[0:n*n*n], unew[0:n*n*n])
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    #pragma acc data copyin(u[0:n*n*n]) copyout(unew[0:n*n*n])
    {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for(iter = 0; iter < niter; iter++) {
            for(k = 1; k < n - 1; k++) {
                for(j = 1; j < n - 1; j++) {
                    for(i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                          u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                          u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for(k = 1; k < n - 1; k++) {
                for(j = 1; j < n - 1; j++) {
                    for(i = 1; i < n - 1; i++) {
                        u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                    }
                }
            }
        }
    }
}

