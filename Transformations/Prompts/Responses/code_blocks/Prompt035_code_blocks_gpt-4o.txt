Code Block 1:
bounds
    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }

__global__ void gemm_kernel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    // Calculate the row index of the d_element and col index
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    // Perform the computation if within bounds
    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 2:
accumulation
        for (int j = 0; j < k; j++) {
            temp += a[row + j * lda] * b[j + col * ldb];
        }

__global__ void gemm_kernel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc)
{
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n)
    {
        double temp = 0.0;

        // Perform the multiplication and accumulation
        for (int j = 0; j < k; j++) {
            temp += a[row + j * lda] * b[j + col * ldb];
        }

        // Update the value in the output matrix
        c[row + col * ldc] = alpha * temp + beta * c[row + col * ldc];
    }
}

Code Block 3:
void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    double *d_a, *d_b, *d_c;
    size_t size_a = lda * k * sizeof(double);
    size_t size_b = ldb * n * sizeof(double);
    size_t size_c = ldc * n * sizeof(double);

    cudaMalloc((void**)&d_a, size_a);
    cudaMalloc((void**)&d_b, size_b);
    cudaMalloc((void**)&d_c, size_c);

    cudaMemcpy(d_a, a, size_a, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, size_b, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, size_c, cudaMemcpyHostToDevice);

    dim3 threadsPerBlock(16, 16);
    dim3 blocksPerGrid((n + threadsPerBlock.x - 1) / threadsPerBlock.x, (m + threadsPerBlock.y - 1) / threadsPerBlock.y);

    gemm_kernel<<<blocksPerGrid, threadsPerBlock>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    cudaMemcpy(c, d_c, size_c, cudaMemcpyDeviceToHost);

    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if(row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 4:
void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    // Device pointers
    double *d_a, *d_b, *d_c;

    // Allocate device memory
    cudaMalloc((void**)&d_a, m * k * sizeof(double));
    cudaMalloc((void**)&d_b, k * n * sizeof(double));
    cudaMalloc((void**)&d_c, m * n * sizeof(double));

    // Copy data from host to device
    cudaMemcpy(d_a, a, m * k * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, k * n * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, m * n * sizeof(double), cudaMemcpyHostToDevice);

    // Define block and grid sizes
    dim3 block(BLOCK_SIZE, BLOCK_SIZE);
    dim3 grid((n + BLOCK_SIZE - 1) / BLOCK_SIZE, (m + BLOCK_SIZE - 1) / BLOCK_SIZE);

    // Launch kernel
    gemm_kernel<<<grid, block>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back to host
    cudaMemcpy(c, d_c, m * n * sizeof(double), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 5:
extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda,
                              const double *b, int ldb, double beta, double *c, int ldc) {
    double *d_a, *d_b, *d_c;
    size_t size_a = m * k * sizeof(double);
    size_t size_b = k * n * sizeof(double);
    size_t size_c = m * n * sizeof(double);

    cudaMalloc((void**)&d_a, size_a);
    cudaMalloc((void**)&d_b, size_b);
    cudaMalloc((void**)&d_c, size_c);

    cudaMemcpy(d_a, a, size_a, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, size_b, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, size_c, cudaMemcpyHostToDevice);

    // Define block and grid sizes
    dim3 blockDim(16, 16);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x, (m + blockDim.y - 1) / blockDim.y);

    // Launch kernel
    gemm_kernel<<<gridDim, blockDim>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back to host
    cudaMemcpy(c, d_c, size_c, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda,
                            const double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 6:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    double *d_a, *d_b, *d_c;
    size_t sizeA = m * k * sizeof(double);
    size_t sizeB = k * n * sizeof(double);
    size_t sizeC = m * n * sizeof(double);

    // Allocate device memory
    cudaMalloc(&d_a, sizeA);
    cudaMalloc(&d_b, sizeB);
    cudaMalloc(&d_c, sizeC);

    // Copy data from host to device
    cudaMemcpy(d_a, a, sizeA, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, sizeB, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, sizeC, cudaMemcpyHostToDevice);

    // Define block size and grid size
    dim3 blockDim(16, 16);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x, (m + blockDim.y - 1) / blockDim.y);

    // Launch CUDA kernel
    gemm_kernel<<<gridDim, blockDim>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back from device to host
    cudaMemcpy(c, d_c, sizeC, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 7:
void gemm_parallel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    double *d_a, *d_b, *d_c;
    size_t size_a = lda * k * sizeof(double);
    size_t size_b = ldb * n * sizeof(double);
    size_t size_c = ldc * n * sizeof(double);

    // Allocate device memory
    cudaMalloc((void **)&d_a, size_a);
    cudaMalloc((void **)&d_b, size_b);
    cudaMalloc((void **)&d_c, size_c);

    // Copy data from host to device
    cudaMemcpy(d_a, a, size_a, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, size_b, cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, size_c, cudaMemcpyHostToDevice);

    // Define block and grid sizes
    dim3 threadsPerBlock(BLOCK_SIZE, BLOCK_SIZE);
    dim3 numBlocks((n + BLOCK_SIZE - 1) / BLOCK_SIZE, (m + BLOCK_SIZE - 1) / BLOCK_SIZE);

    // Launch the GEMM kernel on the GPU
    gemm_kernel<<<numBlocks, threadsPerBlock>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy the result from device to host
    cudaMemcpy(c, d_c, size_c, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 8:
void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb,
                   double beta, double *c, int ldc) {
    // Allocate device memory
    double *d_a, *d_b, *d_c;
    cudaMalloc(&d_a, m * k * sizeof(double));
    cudaMalloc(&d_b, k * n * sizeof(double));
    cudaMalloc(&d_c, m * n * sizeof(double));

    // Copy data from host to device
    cudaMemcpy(d_a, a, m * k * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, k * n * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, m * n * sizeof(double), cudaMemcpyHostToDevice);

    // Define block size and grid size
    dim3 blockSize(16, 16); // You can change this based on your GPU capabilities
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (m + blockSize.y - 1) / blockSize.y);

    // Launch kernel
    gemm_kernel<<<gridSize, blockSize>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result from device to host
    cudaMemcpy(c, d_c, m * n * sizeof(double), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, 
                            double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 9:
void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    // Allocate device memory
    double *d_a, *d_b, *d_c;
    cudaMalloc((void**)&d_a, m * k * sizeof(double));
    cudaMalloc((void**)&d_b, k * n * sizeof(double));
    cudaMalloc((void**)&d_c, m * n * sizeof(double));

    // Copy data to device
    cudaMemcpy(d_a, a, m * k * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, k * n * sizeof(double), cudaMemcpyHostToDevice);
    cudaMemcpy(d_c, c, m * n * sizeof(double), cudaMemcpyHostToDevice);

    // Kernel launch parameters
    dim3 threadsPerBlock(16, 16); // 16x16 thread blocks
    dim3 blocksPerGrid((n + threadsPerBlock.x - 1) / threadsPerBlock.x, (m + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Launch the GEMM kernel
    gemm_kernel<<<blocksPerGrid, threadsPerBlock>>>(m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Wait for the CUDA to finish
    cudaDeviceSynchronize();

    // Copy result back to host
    cudaMemcpy(c, d_c, m * n * sizeof(double), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[row + l * lda] * b[l + col * ldb];
        }
        c[row + col * ldc] = alpha * temp + beta * c[row + col * ldc];
    }
}

Code Block 10:
matrix
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }

__global__ void gemmKernel(int m, int n, int k, double alpha, double *a, int lda, double *b, int ldb, double beta, double *c, int ldc) {
    // Get the row and column index of the element
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    double temp = 0.0;
    if (row < m && col < n) {
        // Compute element of the resulting matrix
        for (int l = 0; l < k; ++l) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

