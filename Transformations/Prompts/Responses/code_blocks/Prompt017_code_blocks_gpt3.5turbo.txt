Code Block 1:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;

  #pragma acc parallel loop collapse(3) num_gangs(nthreads) num_workers(1)
  for (iter = 0; iter < niter; iter++) {
    #pragma acc loop independent
    for (k = 1; k < n - 1; k++) {
      #pragma acc loop independent
      for (j = 1; j < n - 1; j++) {
        #pragma acc loop independent
        for (i = 1; i < n - 1; i++) {
          unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
            u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
        }
      }
    }

    #pragma acc update host(u[0:n][0:n][0:n])
    #pragma acc update device(unew[0:n][0:n][0:n])
    #pragma acc parallel loop collapse(3) independent
    for (k = 1; k < n - 1; k++) {
      #pragma acc loop independent
      for (j = 1; j < n - 1; j++) {
        #pragma acc loop independent
        for (i = 1; i < n - 1; i++) {
          u[i][j][k] = unew[i][j][k];
        }
      }
    }
  }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) present(u, unew)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + n * j + n * n * k] = 0.125 * (u[i-1 + n * j + n * n * k] + u[i+1 + n * j + n * n * k] + u[i + n * (j-1) + n * n * k] +
                                                               u[i + n * (j+1) + n * n * k] + u[i + n * j + n * n * (k-1)] + u[i + n * j + n * n * (k+1)] + u[i + n * j + n * n * k]);
                    }
                }
            }
            #pragma acc update self(u[0:n*n*n])
        }
    }
}

Code Block 3:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma acc data copy(u[0:n][0:n][0:n], unew[0:n][0:n][0:n])
  {
    #pragma acc parallel loop collapse(3) num_gangs(n) num_workers(128) vector_length(128)
    for(iter = 0; iter < niter; iter++) {
      #pragma acc loop independent
      for(k = 1; k < n-1; k++) {
        for(j = 1; j < n-1; j++) {
          for(i = 1; i < n-1; i++) {
            unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] + u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
          }
        }
      }
      #pragma acc parallel loop collapse(3)
      for(k = 1; k < n-1; k++) {
        for(j = 1; j < n-1; j++) {
          for(i = 1; i < n-1; i++) {
            u[i][j][k] = unew[i][j][k];
          }
        }
      }
    }
  }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    #pragma acc data copyin(u[0:n*n*n]) copy(unew[0:n*n*n])
    {
        #pragma acc parallel loop collapse(3) num_gangs(n) num_workers(n) vector_length(nthreads)
        for(iter = 0; iter < niter; iter++) {
            #pragma acc loop independent
            for(k = 1; k < n - 1; k++) {
                for(j = 1; j < n - 1; j++) {
                    for(i = 1; i < n - 1; i++) {
                        unew[i + n*(j + k*n)] = 0.125 * (u[(i-1) + n*(j + k*n)] + u[(i+1) + n*(j + k*n)] +
                                                          u[i + n*((j-1) + k*n)] + u[i + n*((j+1) + k*n)] +
                                                          u[i + n*(j + (k-1)*n)] + u[i + n*(j + (k+1)*n)] +
                                                          u[i + n*(j + k*n)]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3) num_gangs(n) num_workers(n) vector_length(nthreads)
            for(k = 1; k < n - 1; k++) {
                for(j = 1; j < n - 1; j++) {
                    for(i = 1; i < n - 1; i++) {
                        u[i + n*(j + k*n)] = unew[i + n*(j + k*n)];
                    }
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double **u, double **unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma acc data copy(u[0:n][0:n], unew[0:n][0:n])
  {
    for (iter = 0; iter < niter; iter++) {
      #pragma acc parallel loop collapse(3) present(u, unew)
      for (k = 1; k < n-1; k++) {
        for (j = 1; j < n-1; j++) {
          for (i = 1; i < n-1; i++) {
            unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k]
              + u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
          }
        }
      }
      #pragma acc parallel loop collapse(3) present(u, unew)
      for (k = 1; k < n-1; k++) {
        for (j = 1; j < n-1; j++) {
          for (i = 1; i < n-1; i++) {
            u[i][j][k] = unew[i][j][k];
          }
        }
      }
    }
  }
}

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        #pragma acc parallel loop collapse(3) num_gangs(n) num_workers(n) vector_length(n) num_threads(nthreads)
        for (iter = 0; iter < niter; iter++) {
            #pragma acc loop independent collapse(3) 
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                                                        u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                    }
                }
            }
            #pragma acc parallel loop collapse(2)
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    for (k = 0; k < n; k++) {
                        u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                    }
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    #pragma acc data copyin(u[0:n*n*n]) copy(unew[0:n*n*n])
    {
        #pragma acc parallel loop num_gangs(n) num_workers(n) vector_length(nthreads)
        for(iter = 0; iter < niter; iter++) {
            #pragma acc loop gang
            for(k = 1; k < n - 1; k++) {
                #pragma acc loop worker
                for(j = 1; j < n - 1; j++) {
                    #pragma acc loop vector
                    for(i = 1; i < n - 1; i++) {
                        unew[i + n*(j + n*k)] = 0.125 * (u[i-1 + n*(j + n*k)] + u[i+1 + n*(j + n*k)] + u[i + n*(j-1 + n*k)] +
                                                         u[i + n*(j+1 + n*k)] + u[i + n*(j + n*(k-1))] + u[i + n*(j + n*(k+1))] +
                                                         u[i + n*(j + n*k)]);
                    }
                }
            }
            #pragma acc parallel loop num_gangs(n) num_workers(n) vector_length(nthreads)
            for(i = 0; i < n*n*n; i++) {
                u[i] = unew[i];
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  
  #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
  {
    for(iter = 0; iter < niter; iter++) {
      #pragma acc parallel loop collapse(3)
      for(k = 1; k < n-1; k++) {
        for(j = 1; j < n-1; j++) {
          for(i = 1; i < n-1; i++) {
            unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                              u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                              u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                              u[i + j*n + k*n*n]);
          }
        }
      }

      #pragma acc parallel loop collapse(3)
      for(k = 1; k < n-1; k++) {
        for(j = 1; j < n-1; j++) {
          for(i = 1; i < n-1; i++) {
            u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
          }
        }
      }
    }
  }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    #pragma acc parallel loop collapse(2) present(u[0:n*n*n], unew[0:n*n*n])
    for (int iter = 0; iter < niter; iter++) {
        #pragma acc loop collapse(3)
        for (int k = 1; k < n-1; k++) {
            for (int j = 1; j < n-1; j++) {
                for (int i = 1; i < n-1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n]
                                                      + u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        #pragma acc update device(u[0:n*n*n])
        #pragma acc update host(unew[0:n*n*n])
        for (int i = 0; i < n*n*n; i++) {
            u[i] = unew[i];
        }
        #pragma acc update device(u[0:n*n*n])
        #pragma acc wait
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma acc parallel loop collapse(3) num_gangs(n) num_workers(nthreads)
    for (iter = 0; iter < niter; iter++) {
        #pragma acc loop independent
        for (k = 1; k < n - 1; k++) {
            #pragma acc loop independent
            for (j = 1; j < n - 1; j++) {
                #pragma acc loop independent
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                      u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                                      u[i + j*n + k*n*n]);
                }
            }
        }
        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                }
            }
        }
    }
}

