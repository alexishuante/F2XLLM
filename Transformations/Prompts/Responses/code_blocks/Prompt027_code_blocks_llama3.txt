Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int iter;

  for (iter = 1; iter <= niter; iter++) {
    if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
        u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
        u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
    __syncthreads();
    if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
      u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
    }
  }
}

Code Block 2:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int iter;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125f * (u[(i-1) * n * n + j * n + k] +
        u[(i+1) * n * n + j * n + k] + u[i * n * n + (j-1) * n + k] +
        u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
        u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
        u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
        u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernel(
    jacobi_kernel, 
    dim3(nthreads), 
    dim3(1), 
    0, 
    0, 
    u, unew, n, niter
  );
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int iter;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (
        u[(i - 1) * n * n + j * n + k] + 
        u[(i + 1) * n * n + j * n + k] + 
        u[i * n * n + (j - 1) * n + k] + 
        u[i * n * n + (j + 1) * n + k] + 
        u[i * n * n + j * n + (k - 1)] + 
        u[i * n * n + j * n + (k + 1)] + 
        u[i * n * n + j * n + k]
      );
      __syncthreads();
      u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
    }
  }
}

Code Block 5:
void jacobi_parallel_hip(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  int num_blocks = (n + 255) / 256;
  hipLaunchKernel(jacobi_kernel, dim3(num_blocks, num_blocks, num_blocks), dim3(256, 1, 1), 0, 0, u, unew, n, niter, nthreads);
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter, int nthreads) {
  int i = blockIdx.x * 256 + threadIdx.x;
  int j = blockIdx.y * 256 + threadIdx.y;
  int k = blockIdx.z * 256 + threadIdx.z;
  if (i < n && j < n && k < n) {
    for (int iter = 0; iter < niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] + u[i * n * n + (j-1) * n + k] +
        u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] + u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
    __syncthreads();
    u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
  }
}

Code Block 6:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  int idx, idy, idz, idx_n;

  hipLaunchKernel(
    (void*)jacobi_kernel, 
    dim3(nthreads), dim3(1), 0, 0, 
    n, niter, u, unew
  );

  hipDeviceSynchronize();
}

__global__ void jacobi_kernel(int n, int niter, float *u, float *unew) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  int idy = blockIdx.y * blockDim.y + threadIdx.y;
  int idz = blockIdx.z * blockDim.z + threadIdx.z;

  if (idx >= n || idy >= n || idz >= n) return;

  int idx_n = idx * n * n + idy * n + idz;

  for (int iter = 0; iter < niter; iter++) {
    if (idx > 1 && idx < n - 1 && idy > 1 && idy < n - 1 && idz > 1 && idz < n - 1) {
      unew[idx_n] = 0.125f * (
        u[idx_n - n * n - n - 1] + u[idx_n - n * n - n + 1] + 
        u[idx_n - n * n - 1] + u[idx_n - n * n + 1] + 
        u[idx_n - n - n - 1] + u[idx_n - n - n + 1] + 
        u[idx_n - n - 1] + u[idx_n - n + 1] + 
        u[idx_n - n + n - 1] + u[idx_n - n + n + 1] + 
        u[idx_n - 1] + u[idx_n + 1] + 
        u[idx_n + n - n - 1] + u[idx_n + n - n + 1] + 
        u[idx_n + n - 1] + u[idx_n + n + 1] + 
        u[idx_n + n * n - n - 1] + u[idx_n + n * n - n + 1] + 
        u[idx_n + n * n - 1] + u[idx_n + n * n + 1] + 
        u[idx_n + n * n + n - 1] + u[idx_n + n * n + n + 1]
      );
    }
    __syncthreads();
    u[idx_n] = unew[idx_n];
  }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  int stride = blockDim.x * gridDim.x;
  for (int iter = 0; iter < niter; iter++) {
    for (int k = 2 + idx; k < n - 1; k += stride) {
      for (int j = 2; j < n - 1; j++) {
        for (int i = 2; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
            u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
            u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
        }
      }
    }
    __syncthreads();
    if (idx == 0) {
      for (int i = 0; i < n * n * n; i++) {
        u[i] = unew[i];
      }
    }
  }
}

Code Block 8:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  int idx, idy, idz;

  hipLaunchKernel(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);

  hipDeviceSynchronize();
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  int idy = blockIdx.y * blockDim.y + threadIdx.y;
  int idz = blockIdx.z * blockDim.z + threadIdx.z;

  if (idx >= 2 && idx < n - 1 && idy >= 2 && idy < n - 1 && idz >= 2 && idz < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[idx + idy * n + idz * n * n] = 0.125f * (
        u[(idx - 1) + idy * n + idz * n * n] +
        u[(idx + 1) + idy * n + idz * n * n] +
        u[idx + (idy - 1) * n + idz * n * n] +
        u[idx + (idy + 1) * n + idz * n * n] +
        u[idx + idy * n + (idz - 1) * n * n] +
        u[idx + idy * n + (idz + 1) * n * n] +
        u[idx + idy * n + idz * n * n]
      );
    }
  }
}

Code Block 9:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125f * (u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
        u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
        u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 10:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernel(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int iter;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125f * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
        u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
        u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
  }
}

