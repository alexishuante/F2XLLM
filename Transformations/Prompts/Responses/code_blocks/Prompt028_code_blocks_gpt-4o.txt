Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);
    
    // Allocate memory on the GPU
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    // Copy initial data to the GPU
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    // Define the grid and block dimensions
    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; ++iter) {
        // Launch the Jacobi kernel
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);

        // Swap the pointers
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy the results back to the host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Free GPU memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;
    
    if (i < n-1 && j < n-1 && k < n-1) {
        unew[IDX(i, j, k, n)] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] + 
                                          u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] + 
                                          u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] +
                                          u[IDX(i, j, k, n)]);
    }
}

Code Block 2:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    // Allocate device memory
    hipMalloc((void**)&d_u, size);
    hipMalloc((void**)&d_unew, size);

    // Copy data from host to device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();

        // Swap the pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy result back to host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);
    hipMemcpy(unew, d_unew, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i >= 1 && i <= n - 2 && j >= 1 && j <= n - 2 && k >= 1 && k <= n - 2) {
        unew[i + n * (j + n * k)] = 0.125 * (
            u[(i - 1) + n * (j + n * k)] +
            u[(i + 1) + n * (j + n * k)] +
            u[i + n * ((j - 1) + n * k)] +
            u[i + n * ((j + 1) + n * k)] +
            u[i + n * (j + n * (k - 1))] +
            u[i + n * (j + n * (k + 1))] +
            u[i + n * (j + n * k)]);
    }
}

Code Block 3:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    // Allocate memory on GPU
    hipMalloc((void**)&d_u, size);
    hipMalloc((void**)&d_unew, size);

    // Copy data to GPU
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        // Launch kernel
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);

        // Swap pointers for next iteration
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy result back to host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Free memory on GPU
    hipFree(d_u);
    hipFree(d_unew);
}

__global__
void jacobi_kernel(double* u, double* unew, int n) {
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;

    if (k < n - 1 && j < n - 1 && i < n - 1) {
        unew[IDX(i, j, k, n)] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] +
                                          u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] +
                                          u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] +
                                          u[IDX(i, j, k, n)]);
    }
}

Code Block 4:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;

    // Allocate device memory
    hipMalloc((void**)&d_u, n * n * n * sizeof(double));
    hipMalloc((void**)&d_unew, n * n * n * sizeof(double));

    // Copy data from host to device
    hipMemcpy(d_u, u, n * n * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, n * n * n * sizeof(double), hipMemcpyHostToDevice);

    // Define grid and block dimensions
    dim3 block(16, 16, 16);
    dim3 grid((n + block.x - 1) / block.x, (n + block.y - 1) / block.y, (n + block.z - 1) / block.z);

    for (int iter = 0; iter < niter; ++iter) {
        // Launch the kernel
        hipLaunchKernelGGL(jacobi_kernel, grid, block, 0, 0, d_u, d_unew, n);

        // Swap pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy result back to host
    hipMemcpy(u, d_u, n * n * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__
void jacobi_kernel(double* u, double* unew, int n) {
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i*n*n + j*n + k] = 0.125 * (u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] +
                                         u[i*n*n + (j-1)*n + k] + u[i*n*n + (j+1)*n + k] +
                                         u[i*n*n + j*n + (k-1)] + u[i*n*n + j*n + (k+1)] +
                                         u[i*n*n + j*n + k]);
    }
}

Code Block 5:
extern "C" void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;

    // Allocate memory on the GPU
    hipMalloc(&d_u, n * n * n * sizeof(double));
    hipMalloc(&d_unew, n * n * n * sizeof(double));

    // Copy data to the GPU
    hipMemcpy(d_u, u, n * n * n * sizeof(double), hipMemcpyHostToDevice);

    // Define block and grid dimensions
    dim3 blockDim(8, 8, 8);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x, 
                 (n + blockDim.y - 1) / blockDim.y, 
                 (n + blockDim.z - 1) / blockDim.z);

    for(int iter = 0; iter < niter; iter++) {
        // Launch the kernel
        hipLaunchKernelGGL(jacobi_kernel, gridDim, blockDim, 0, 0, d_u, d_unew, n);

        // Swap pointers
        double *tmp = d_u;
        d_u = d_unew;
        d_unew = tmp;
    }

    // Copy the result back to the host
    hipMemcpy(u, d_u, n * n * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free allocated memory on the GPU
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = IDX(i, j, k, n);
        int idx_im1 = IDX(i-1, j, k, n);
        int idx_ip1 = IDX(i+1, j, k, n);
        int idx_jm1 = IDX(i, j-1, k, n);
        int idx_jp1 = IDX(i, j+1, k, n);
        int idx_km1 = IDX(i, j, k-1, n);
        int idx_kp1 = IDX(i, j, k+1, n);

        unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] + u[idx_jm1] + u[idx_jp1] + u[idx_km1] + u[idx_kp1] + u[idx]);
    }
}

Code Block 6:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    // Allocate memory on the device
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    // Copy the initial arrays to the device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    // Define the grid and block dimensions
    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);

    for (int iter = 0; iter < niter; iter++) {
        // Launch the HIP kernel
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);

        // Swap d_u and d_unew pointers
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy the result back to the host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int index = i + j * n + k * n * n;
        unew[index] = 0.125 * (
            u[(i-1) + j * n + k * n * n] +
            u[(i+1) + j * n + k * n * n] +
            u[i + (j-1) * n + k * n * n] +
            u[i + (j+1) * n + k * n * n] +
            u[i + j * n + (k-1) * n * n] +
            u[i + j * n + (k+1) * n * n] +
            u[index]);
    }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc((void**)&d_u, size);
    hipMalloc((void**)&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    dim3 blockDim(8, 8, 8);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x, (n + blockDim.y - 1) / blockDim.y, (n + blockDim.z - 1) / blockDim.z);

    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL(jacobi_kernel, gridDim, blockDim, 0, 0, d_u, d_unew, n);
        hipDeviceSynchronize();

        // Swap pointers for the next iteration
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy the result back to the host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n-1 && j >= 1 && j < n-1 && k >= 1 && k < n-1) {
        int idx = i + n * (j + n * k);
        unew[idx] = 0.125 * (u[idx - 1] + u[idx + 1] + u[idx - n] + u[idx + n] + u[idx - n*n] + u[idx + n*n] + u[idx]);
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);
    
    // Allocate device memory
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);
    
    // Copy data from host to device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);
    
    // Define grid and block dimensions
    dim3 threadsPerBlock(8, 8, 8);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (n + threadsPerBlock.y - 1) / threadsPerBlock.y,
                   (n + threadsPerBlock.z - 1) / threadsPerBlock.z);
    
    // Perform iterations
    for (int iter = 0; iter < niter; ++iter) {
        // Launch kernel
        hipLaunchKernelGGL(jacobi_kernel, numBlocks, threadsPerBlock, 0, 0, d_u, d_unew, n);
        
        // Swap pointers for next iteration
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }
    
    // Copy the result from device to host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);
    
    // Free device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        int idx = i * n * n + j * n + k;
        int idx_im1 = (i-1) * n * n + j * n + k;
        int idx_ip1 = (i+1) * n * n + j * n + k;
        int idx_jm1 = i * n * n + (j-1) * n + k;
        int idx_jp1 = i * n * n + (j+1) * n + k;
        int idx_km1 = i * n * n + j * n + (k-1);
        int idx_kp1 = i * n * n + j * n + (k+1);
        
        unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] + u[idx_jm1] + u[idx_jp1] +
                             u[idx_km1] + u[idx_kp1] + u[idx]);
    }
}

Code Block 9:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    // Allocate device memory
    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    // Copy input data to device
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);
    hipMemcpy(d_unew, unew, size, hipMemcpyHostToDevice);

    // Define the block and grid dimensions
    dim3 blockDim(8, 8, 8);
    dim3 gridDim((n + blockDim.x - 3) / blockDim.x, 
                 (n + blockDim.y - 3) / blockDim.y, 
                 (n + blockDim.z - 3) / blockDim.z);

    // Perform the Jacobi iterations
    for (int iter = 0; iter < niter; ++iter) {
        // Launch the kernel
        hipLaunchKernelGGL(jacobi_kernel, gridDim, blockDim, 0, 0, d_u, d_unew, n);

        // Swap the pointers for the next iteration
        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    // Copy the result back to the host
    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    // Clean up device memory
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i, j, k;

    // Calculate 3D index from 1D block and thread indices
    k = blockIdx.z * blockDim.z + threadIdx.z + 1;
    j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    i = blockIdx.x * blockDim.x + threadIdx.x + 1;

    if (i < n-1 && j < n-1 && k < n-1) {
        unew[i + n * (j + n * k)] = 0.125 * (
                                   u[(i-1) + n * (j + n * k)] +
                                   u[(i+1) + n * (j + n * k)] +
                                   u[i + n * ((j-1) + n * k)] +
                                   u[i + n * ((j+1) + n * k)] +
                                   u[i + n * (j + n * (k-1))] +
                                   u[i + n * (j + n * (k+1))] +
                                   u[i + n * (j + n * k)]);
    }
}

Code Block 10:
define CUDA_CHECK(call) {                                         \
    const hipError_t error = call;                                 \
    if (error != hipSuccess) {                                     \
        printf("Error: %s:%d, ", __FILE__, __LINE__);              \
        printf("code: %d, reason: %s\n", error,                    \
                hipGetErrorString(error));                         \
        exit(1);                                                   \
    }                                                              \
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        unew[(i * n + j) * n + k] = 0.125 * (u[((i-1) * n + j) * n + k] +
                                             u[((i+1) * n + j) * n + k] +
                                             u[(i * n + (j-1)) * n + k] +
                                             u[(i * n + (j+1)) * n + k] +
                                             u[(i * n + j) * n + (k-1)] +
                                             u[(i * n + j) * n + (k+1)] +
                                             u[(i * n + j) * n + k]);
    }
}

