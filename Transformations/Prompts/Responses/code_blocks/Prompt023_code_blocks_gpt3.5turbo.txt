Code Block 1:
void gemv_parallel(int n, float *d_A, float *d_x, float *d_y) {
    int block_size = 256;
    int grid_size = (n + block_size - 1) / block_size;
    
    hipLaunchKernelGGL(gemv_kernel, dim3(grid_size), dim3(block_size), 0, 0, n, d_A, d_x, d_y);
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 2:
void gemv(int n, float* A, float* x, float* y) {
    float* d_A, *d_x, *d_y;

    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    int blocks = (n + THREADS_PER_BLOCK - 1) / THREADS_PER_BLOCK;
    gemv_kernel<<<blocks, THREADS_PER_BLOCK>>>(n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 3:
void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;

    hipMalloc(&d_A, n*n*sizeof(float));
    hipMalloc(&d_x, n*sizeof(float));
    hipMalloc(&d_y, n*sizeof(float));

    hipMemcpy(d_A, A, n*n*sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n*sizeof(float), hipMemcpyHostToDevice);

    hipLaunchKernelGGL(gemv, dim3((n+255)/256), dim3(256), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n*sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv(int n, float *A, float *x, float *y) {
    int i = threadIdx.x + blockIdx.x * blockDim.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i*n+j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 4:
void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    int threadsPerBlock = 256;
    int blocksPerGrid = (n + threadsPerBlock - 1) / threadsPerBlock;

    gemv_kernel<<<blocksPerGrid, threadsPerBlock>>>(n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 5:
void gemv_hip(int n, float *A, float *x, float *y) {
    float sum;
    hipLaunchKernelGGL([=] __global__ (int n, float *A, float *x, float *y) {
        int i = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;
        if (i < n) {
            sum = 0.0;
            for (int j = 0; j < n; j++) {
                sum += A[i*n + j] * x[j];
            }
            y[i] = sum;
        }
    }, dim3((n+255)/256), dim3(256), 0, 0, n, A, x, y);
}

Code Block 6:
void gemv_parallel(int n, float* A, float* x, float* y) {
    float *d_A, *d_x, *d_y;
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMalloc(&d_x, n * sizeof(float));
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);
    hipMalloc(&d_y, n * sizeof(float);

    int numBlocks = (n + 256 - 1) / 256;
    gemv_kernel<<<numBlocks, 256>>>(n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 7:
void gemv_hip(int n, float* A_h, float* x_h, float* y_h) {
    float* A_d, *x_d, *y_d;
    
    hipMalloc(&A_d, n * n * sizeof(float));
    hipMalloc(&x_d, n * sizeof(float));
    hipMalloc(&y_d, n * sizeof(float));
    
    hipMemcpy(A_d, A_h, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(x_d, x_h, n * sizeof(float), hipMemcpyHostToDevice);
    
    hipLaunchKernelGGL((gemv_kernel), dim3(1), dim3(n), 0, 0, n, A_d, x_d, y_d);
    
    hipMemcpy(y_h, y_d, n * sizeof(float), hipMemcpyDeviceToHost);
    
    hipFree(A_d);
    hipFree(x_d);
    hipFree(y_d);
}

Code Block 8:
void gemv_parallel(int n, float* A, float* x, float* y) {
    float *d_A, *d_x, *d_y;
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMalloc(&d_x, n * sizeof(float));
    hipMalloc(&d_y, n * sizeof(float));

    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    hipLaunchKernelGGL(gemv_kernel, dim3(1, 1, 1), dim3(n, 1, 1), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

Code Block 9:
void gemv_parallel(int n, float* A, float* x, float* y){
    int i, j;
    float sum;

    hipLaunchKernelGGL([=] __global__ (int n, float* A, float* x, float* y){
        int i = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;
        if (i < n){
            sum = 0.0;
            for (int j = 0; j < n; j++){
                sum += A[i*n+j] * x[j];
            }
            y[i] = sum;
        }
    }, dim3((n + 255)/256), dim3(256), 0, 0, n, A, x, y);
}

Code Block 10:
void gemv_parallel(int n, float* A, float* x, float* y) {
    float *d_A, *d_x, *d_y;
    hipMalloc(&d_A, n * n * sizeof(float));
    hipMemcpy(d_A, A, n * n * sizeof(float), hipMemcpyHostToDevice);

    hipMalloc(&d_x, n * sizeof(float));
    hipMemcpy(d_x, x, n * sizeof(float), hipMemcpyHostToDevice);

    hipMalloc(&d_y, n * sizeof(float);

    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;

    hipLaunchKernelGGL(gemv_kernel, dim3(numBlocks), dim3(blockSize), 0, 0, n, d_A, d_x, d_y);

    hipMemcpy(y, d_y, n * sizeof(float), hipMemcpyDeviceToHost);

    hipFree(d_A);
    hipFree(d_x);
    hipFree(d_y);
}

__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

