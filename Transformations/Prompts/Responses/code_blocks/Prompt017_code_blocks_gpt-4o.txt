Code Block 1:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copyin(u[0:n][0:n][0:n]) copyout(unew[0:n][0:n][0:n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) independent
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] + 
                                                 u[i][j][k]);
                    }
                }
            }

            #pragma acc parallel loop collapse(3) independent
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 2:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    #pragma acc data copyin(u[0:n][0:n][0:n]) copy(unew[0:n][0:n][0:n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) num_gangs(nthreads)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                                  u[i][j-1][k] + u[i][j+1][k] + 
                                                  u[i][j][k-1] + u[i][j][k+1] + 
                                                  u[i][j][k]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3) num_gangs(nthreads)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;
    int size = n * n * n;
    
    #pragma acc data copyin(u[0:size]) copy(unew[0:size])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i + n * (j + n * k)] = 0.125 * (
                            u[(i - 1) + n * (j + n * k)] +
                            u[(i + 1) + n * (j + n * k)] +
                            u[i + n * ((j - 1) + n * k)] +
                            u[i + n * ((j + 1) + n * k)] +
                            u[i + n * (j + n * (k - 1))] +
                            u[i + n * (j + n * (k + 1))] +
                            u[i + n * (j + n * k)]
                        );
                    }
                }
            }

            #pragma acc parallel loop collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + n * (j + n * k)] = unew[i + n * (j + n * k)];
                    }
                }
            }

            #pragma acc wait
        }
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    // Set the number of OpenACC threads (if applicable)
    acc_set_num_threads(nthreads);

    // Main iteration loop for Jacobi computation
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k) present(u, unew)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i * n * n + j * n + k] = 0.125 * (
                        u[(i-1) * n * n + j * n + k] + 
                        u[(i+1) * n * n + j * n + k] + 
                        u[i * n * n + (j-1) * n + k] + 
                        u[i * n * n + (j+1) * n + k] + 
                        u[i * n * n + j * n + (k-1)] + 
                        u[i * n * n + j * n + (k+1)] + 
                        u[i * n * n + j * n + k]
                    );
                }
            }
        }
        
        #pragma acc parallel loop collapse(3) private(i, j, k) present(u, unew)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int iter, i, j, k;

    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i,j,k)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i + n*(j + n*k)] = 0.125 * (u[(i-1) + n*(j + n*k)] + 
                                                         u[(i+1) + n*(j + n*k)] + 
                                                         u[i + n*((j-1) + n*k)] + 
                                                         u[i + n*((j+1) + n*k)] + 
                                                         u[i + n*(j + n*(k-1))] + 
                                                         u[i + n*(j + n*(k+1))] + 
                                                         u[i + n*(j + n*k)]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + n*(j + n*k)] = unew[i + n*(j + n*k)];
                    }
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copyin(u[0:n][0:n][0:n]) copyout(unew[0:n][0:n][0:n])
    {
        for (iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3) private(i,j,k)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    #pragma acc data copyin(u[0:n][0:n][0:n]), copyout(unew[0:n][0:n][0:n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) num_gangs(nthreads)
            // loop collapsing allows multiple loops to be parallelized together
            for (k = 1; k < n - 1; k++) {
                for (j = 1; j < n - 1; j++) {
                    for (i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }

            #pragma acc parallel loop collapse(3) num_gangs(nthreads)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int iter, i, j, k;

    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k) copyin(u[0:n][0:n][0:n]) copy(unew[0:n][0:n][0:n])
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }

        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
    int i, j, k, iter;

    // Loop over the number of iterations
    for (iter = 1; iter <= niter; iter++) {
        // Use OpenACC parallel directive
        #pragma acc parallel loop collapse(2) num_gangs(nthreads) vector_length(256)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                             u[i][j-1][k] + u[i][j+1][k] + 
                                             u[i][j][k-1] + u[i][j][k+1] + 
                                             u[i][j][k]);
                }
            }
        }

        // Wait for all kernels to complete
        #pragma acc wait

        // Update u with unew
        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;
    int size = n * n * n;

    // OpenACC parallel region
    #pragma acc data copyin(u[0:size]) copy(unew[0:size])
    {
        for (iter = 1; iter <= niter; iter++) {
            // Perform the Jacobi operation in parallel
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i + n * (j + n * k)] = 0.125 * (
                            u[(i-1) + n * (j + n * k)] +
                            u[(i+1) + n * (j + n * k)] +
                            u[i + n * (j-1 + n * k)] +
                            u[i + n * (j+1 + n * k)] +
                            u[i + n * (j + n * (k-1))] +
                            u[i + n * (j + n * (k+1))] +
                            u[i + n * (j + n * k)]
                        );
                    }
                }
            }

            // Synchronize the data between the arrays
            #pragma acc parallel loop collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + n * (j + n * k)] = unew[i + n * (j + n * k)];
                    }
                }
            }
        }
    }
}

