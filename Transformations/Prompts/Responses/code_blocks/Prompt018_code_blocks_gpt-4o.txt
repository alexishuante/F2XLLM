Code Block 1:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    // Main iteration loop
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n-1; k++) {
            for (j = 1; j < n-1; j++) {
                for (i = 1; i < n-1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                            u[i][j-1][k] + u[i][j+1][k] +
                                            u[i][j][k-1] + u[i][j][k+1] +
                                            u[i][j][k]);
                }
            }
        }

        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 2:
void jacobi_parallel(int n, int niter, double u[n][n][n], double unew[n][n][n]) {
    int i, j, k, iter;

    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                            u[i][j - 1][k] + u[i][j + 1][k] +
                                            u[i][j][k - 1] + u[i][j][k + 1] +
                                            u[i][j][k]);
                }
            }
        }
        // Copy the new results back to the original array
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int iter, i, j, k;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    int nx = n, ny = n, nz = n;

    for (iter = 0; iter < niter; ++iter) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < nz - 1; ++k) {
            for (j = 1; j < ny - 1; ++j) {
                for (i = 1; i < nx - 1; ++i) {
                    int idx = i + nx * (j + ny * k);
                    int idx_im1 = (i-1) + nx * (j + ny * k);
                    int idx_ip1 = (i+1) + nx * (j + ny * k);
                    int idx_jm1 = i + nx * ((j-1) + ny * k);
                    int idx_jp1 = i + nx * ((j+1) + ny * k);
                    int idx_km1 = i + nx * (j + ny * (k-1));
                    int idx_kp1 = i + nx * (j + ny * (k+1));

                    unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] +
                                         u[idx_jm1] + u[idx_jp1] +
                                         u[idx_km1] + u[idx_kp1] +
                                         u[idx]);
                }
            }
        }

        #pragma acc parallel loop collapse(3)
        for (k = 0; k < nz; ++k) {
            for (j = 0; j < ny; ++j) {
                for (i = 0; i < nx; ++i) {
                    int idx = i + nx * (j + ny * k);
                    u[idx] = unew[idx];
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k) present(u[0:n*n*n], unew[0:n*n*n])
        for (k = 1; k < n-1; k++) {
            for (j = 1; j < n-1; j++) {
                for (i = 1; i < n-1; i++) {
                    unew[i + n*(j + n*k)] = 0.125 * (u[(i-1) + n*(j + n*k)] + u[(i+1) + n*(j + n*k)] +
                                                    u[i + n*((j-1) + n*k)] + u[i + n*((j+1) + n*k)] +
                                                    u[i + n*(j + n*(k-1))] + u[i + n*(j + n*(k+1))] +
                                                    u[i + n*(j + n*k)]);
                }
            }
        }
        #pragma acc parallel loop collapse(3) present(u[0:n*n*n], unew[0:n*n*n])
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i + n*(j + n*k)] = unew[i + n*(j + n*k)];
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter)
{
    int i, j, k, iter;
    
    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    // Note that arrays in C are typically accessed in row-major order.
                    // The index calculation is adjusted accordingly.
                    int idx = i + n * j + n * n * k;
                    int idx_im1 = (i-1) + n * j + n * n * k;
                    int idx_ip1 = (i+1) + n * j + n * n * k;
                    int idx_jm1 = i + n * (j-1) + n * n * k;
                    int idx_jp1 = i + n * (j+1) + n * n * k;
                    int idx_km1 = i + n * j + n * n * (k-1);
                    int idx_kp1 = i + n * j + n * n * (k+1);
                    
                    unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] + u[idx_jm1] +
                                         u[idx_jp1] + u[idx_km1] + u[idx_kp1] + u[idx]);
                }
            }
        }
        
        // Copy unew to u
        #pragma acc parallel loop collapse(3) private(i, j, k) 
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    int idx = i + n * j + n * n * k;
                    u[idx] = unew[idx];
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    int index = i + j * n + k * n * n;
                    int im1jk = (i - 1) + j * n + k * n * n;
                    int ip1jk = (i + 1) + j * n + k * n * n;
                    int ijm1k = i + (j - 1) * n + k * n * n;
                    int ijp1k = i + (j + 1) * n + k * n * n;
                    int ijkm1 = i + j * n + (k - 1) * n * n;
                    int ijkp1 = i + j * n + (k + 1) * n * n;

                    unew[index] = 0.125 * (u[im1jk] + u[ip1jk] + u[ijm1k] +
                                           u[ijp1k] + u[ijkm1] + u[ijkp1] +
                                           u[index]);
                }
            }
        }

        // Swap u and unew
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    int index = i + j * n + k * n * n;
                    u[index] = unew[index];
                }
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    for (int iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (int k = 1; k < n - 1; k++) {
            for (int j = 1; j < n - 1; j++) {
                for (int i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] +
                                             u[i][j][k]);
                }
            }
        }
        #pragma acc parallel loop collapse(3)
        for (int k = 0; k < n; k++) {
            for (int j = 0; j < n; j++) {
                for (int i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    // Loop over the number of iterations
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    int idx = i + n * (j + n * k);
                    int idx_im1 = (i-1) + n * (j + n * k);
                    int idx_ip1 = (i+1) + n * (j + n * k);
                    int idx_jm1 = i + n * ((j-1) + n * k);
                    int idx_jp1 = i + n * ((j+1) + n * k);
                    int idx_km1 = i + n * (j + n * (k-1));
                    int idx_kp1 = i + n * (j + n * (k+1));

                    // Perform the Jacobi update
                    unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] +
                                         u[idx_jm1] + u[idx_jp1] +
                                         u[idx_km1] + u[idx_kp1] +
                                         u[idx]);
                }
            }
        }

        // Update `u` array with values of `unew`
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    int idx = i + n * (j + n * k);
                    u[idx] = unew[idx];
                }
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k) 
        for (k = 1; k < n-1; k++) {
            for (j = 1; j < n-1; j++) {
                for (i = 1; i < n-1; i++) {
                    unew[IDX(i, j, k, n)] = 0.125 * (u[IDX(i-1, j, k, n)] + u[IDX(i+1, j, k, n)] + 
                                                     u[IDX(i, j-1, k, n)] + u[IDX(i, j+1, k, n)] +
                                                     u[IDX(i, j, k-1, n)] + u[IDX(i, j, k+1, n)] +
                                                     u[IDX(i, j, k, n)]);
                }
            }
        }
        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[IDX(i, j, k, n)] = unew[IDX(i, j, k, n)];
                }
            }
        }
    }
}

