Code Block 1:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  int i, j, k, iter;
  hipLaunchKernelGGL((jacobi_kernel), dim3(n, n, n), dim3(1, 1, 1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125f * (u[(i - 1) * n * n + j * n + k] +
        u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
        u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
        u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 2:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  int i, j, k, iter;
  hipLaunchKernel(GPU_jacobi, dim3(n, n, n), dim3(1, 1, 1), 0, 0, u, unew, n, niter);
}

__global__ void GPU_jacobi(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int iter;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125f * (u[(i - 1) + j * n + k * n * n] +
        u[(i + 1) + j * n + k * n * n] + u[i + (j - 1) * n + k * n * n] +
        u[i + (j + 1) * n + k * n * n] + u[i + j * n + (k - 1) * n * n] +
        u[i + j * n + (k + 1) * n * n] + u[i + j * n + k * n * n]);
    }
  }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  hipLaunchKernel(GPU_jacobi_kernel, dim3(n, n, n), dim3(1, 1, 1), 0, 0, u, unew, n, niter);
}

__global__ void GPU_jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int iter;

  for (iter = 1; iter <= niter; iter++) {
    if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
        u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
        u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
    __syncthreads();
  }
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
  }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(n, n, n), dim3(1, 1, 1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
        u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
        u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(n, n, n), dim3(1, 1, 1), 0, 0, 
                     u, unew, n, niter);
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + 
        u[(i+1) * n * n + j * n + k] + u[i * n * n + (j-1) * n + k] + 
        u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] + 
        u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 6:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  int i, j, k, iter;
  hipLaunchKernel(jacobi_kernel, dim3(n, n, n), dim3(1, 1, 1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125f * (u[(i - 1) * n * n + j * n + k] +
        u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
        u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
        u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int iter, i, j, k;
  hipLaunchKernel(GPU_jacobi_kernel, dim3(n-2), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void GPU_jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x + 1;
  int j = blockIdx.y + 1;
  int k = blockIdx.z + 1;
  int iter;
  for (iter = 1; iter <= niter; iter++) {
    if (i < n-1 && j < n-1 && k < n-1) {
      unew[(i-1)*n*n + (j-1)*n + (k-1)] = 0.125 * (u[(i-2)*n*n + (j-1)*n + (k-1)] + 
        u[i*n*n + (j-1)*n + (k-1)] + u[(i-1)*n*n + (j-2)*n + (k-1)] + 
        u[(i-1)*n*n + j*n + (k-1)] + u[(i-1)*n*n + (j-1)*n + (k-2)] + 
        u[(i-1)*n*n + (j-1)*n + k] + u[(i-1)*n*n + (j-1)*n + (k-1)]);
    }
    __syncthreads();
  }
  if (i < n-1 && j < n-1 && k < n-1) {
    u[(i-1)*n*n + (j-1)*n + (k-1)] = unew[(i-1)*n*n + (j-1)*n + (k-1)];
  }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(n, n, n), dim3(1, 1, 1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
        u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
        u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  hipLaunchKernel(GPU_jacobi, dim3(n, n, n), dim3(1, 1, 1), 0, 0, u, unew, n, niter);
}

__global__ void GPU_jacobi(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
        u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
        u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 1; iter <= niter; iter++) {
    hipLaunchKernelGGL(HIP_KERNEL_NAME(jacobi_kernel), dim3(n-2), dim3(1), 0, 0, u, unew, n);
    hipDeviceSynchronize();
    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x + 1;
  int j = blockIdx.y + 1;
  int k = blockIdx.z + 1;
  if (i < n-1 && j < n-1 && k < n-1) {
    unew[i*n*n + j*n + k] = 0.125 * (u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] +
      u[i*n*n + (j-1)*n + k] + u[i*n*n + (j+1)*n + k] + u[i*n*n + j*n + (k-1)] +
      u[i*n*n + j*n + (k+1)] + u[i*n*n + j*n + k]);
  }
}

