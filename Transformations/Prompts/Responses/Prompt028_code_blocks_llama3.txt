Code Block 1:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
  int iter, i, j, k;
  for (iter = 0; iter < niter; iter++) {
    hipLaunchKernelGGL(jacobi_kernel, dim3(n, n, n), dim3(1, 1, 1), 0, 0, u, unew, n);
    float *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_kernel(float *u, float *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125f * (u[(i - 1) * n * n + j * n + k] +
                                             u[(i + 1) * n * n + j * n + k] +
                                             u[i * n * n + (j - 1) * n + k] +
                                             u[i * n * n + (j + 1) * n + k] +
                                             u[i * n * n + j * n + (k - 1)] +
                                             u[i * n * n + j * n + (k + 1)] +
                                             u[i * n * n + j * n + k]);
  }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 1; iter <= niter; iter++) {
    hipLaunchKernelGGL(jacobi_kernel, dim3(n-2, n-2, n-2), dim3(1, 1, 1), 0, 0,
                       u, unew, n);
    double *tmp = u; u = unew; unew = tmp;  // swap pointers
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
  int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
  int k = blockIdx.z * blockDim.z + threadIdx.z + 1;
  if (i < n-1 && j < n-1 && k < n-1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] +
                                            u[(i+1) * n * n + j * n + k] +
                                            u[i * n * n + (j-1) * n + k] +
                                            u[i * n * n + (j+1) * n + k] +
                                            u[i * n * n + j * n + (k-1)] +
                                            u[i * n * n + j * n + (k+1)] +
                                            u[i * n * n + j * n + k]);
  }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 0; iter < niter; iter++) {
    #pragma omp parallel for collapse(3) private(i, j, k)
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
              u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
              u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
              u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
        }
      }
    }
    for (k = 0; k < n * n * n; k++) {
      u[k] = unew[k];
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
        u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
        u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
        u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
  }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
 #pragma omp parallel for collapse(3) private(i, j, k)
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
              u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
              u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
              u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
        }
      }
    }
  }
  for (i = 0; i < n * n * n; i++) {
    u[i] = unew[i];
  }
}

__global__ void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= n || j >= n || k >= n) return;
  int idx = i * n * n + j * n + k;
  for (int iter = 0; iter < niter; iter++) {
    unew[idx] = 0.125 * (u[idx - n * n - n - 1] + u[idx - n * n - n + 1] +
        u[idx - n * n - 1] + u[idx - n * n + 1] + u[idx - n - n] +
        u[idx - n + n] + u[idx - n] + u[idx + n] + u[idx]);
  }
  u[idx] = unew[idx];
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
 #pragma omp parallel for collapse(3) private(i, j, k)
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (
            u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
            u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
            u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
            u[i * n * n + j * n + k]);
        }
      }
    }
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
        }
      }
    }
  }
}

__global__ void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    for (int iter = 0; iter < niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (
        u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
        u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
        u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
        u[i * n * n + j * n + k]);
    }
    u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
  }
}

Code Block 6:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;
  #pragma omp parallel for collapse(3) private(i, j, k)
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                    u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
        }
      }
    }
  }
  for (k = 0; k < n; k++) {
    for (j = 0; j < n; j++) {
      for (i = 0; i < n; i++) {
        u[i][j][k] = unew[i][j][k];
      }
    }
  }
}

__global__ void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= n || j >= n || k >= n) return;
  int iter;
  for (iter = 0; iter < niter; iter++) {
    unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] +
                                        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] +
                                        u[i + j * n + (k-1) * n * n] + u[i + j * n + (k+1) * n * n] +
                                        u[i + j * n + k * n * n]);
  }
  u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
}

Code Block 7:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                     u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
        }
      }
    }
    for (k = 0; k < n; k++) {
      for (j = 0; j < n; j++) {
        for (i = 0; i < n; i++) {
          u[i][j][k] = unew[i][j][k];
        }
      }
    }
  }
}

__global__ void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
                                           u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] +
                                           u[i * n * n + j * n + (k-1)] + u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
  }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 0; iter < niter; iter++) {
    #pragma omp parallel for collapse(3) private(i, j, k)
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (
            u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
            u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
            u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
            u[i * n * n + j * n + k]);
        }
      }
    }
    for (k = 0; k < n * n * n; k++) {
      u[k] = unew[k];
    }
  }
}

__global__ void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    for (int iter = 0; iter < niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (
        u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
        u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
        u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
        u[i * n * n + j * n + k]);
    }
  }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
 #pragma omp parallel for collapse(3) private(i, j, k)
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
              u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
              u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
              u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
        }
      }
    }
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
        }
      }
    }
  }
}

__global__ void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    for (int iter = 0; iter < niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
          u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
          u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
          u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
    }
    u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
  }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  #pragma omp parallel for collapse(3) private(i, j, k)
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
              u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
              u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
              u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
        }
      }
    }
    for (k = 0; k < n * n * n; k++) {
      u[k] = unew[k];
    }
  }
}

__global__ void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= n || j >= n || k >= n) return;
  int idx = i * n * n + j * n + k;
  for (int iter = 0; iter < niter; iter++) {
    unew[idx] = 0.125 * (u[idx - n * n - n - 1] + u[idx - n * n - n + 1] +
        u[idx - n * n - 1] + u[idx - n * n + 1] + u[idx - n - 1] +
        u[idx - n + 1] + u[idx - 1] + u[idx + 1] + u[idx + n - 1] +
        u[idx + n + 1] + u[idx + n * n - n - 1] + u[idx + n * n - n + 1] +
        u[idx + n * n - 1] + u[idx + n * n + 1] + u[idx + n * n + n - 1] +
        u[idx + n * n + n + 1]);
  }
  u[idx] = unew[idx];
}

