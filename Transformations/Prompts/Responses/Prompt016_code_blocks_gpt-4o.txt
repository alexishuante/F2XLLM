Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int iter, i, j, k;

    // Main iteration loop
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k) present(u[0:n*n*n], unew[0:n*n*n])
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + n * (j + n * k)] = 0.125 * (u[(i-1) + n * (j + n * k)] 
                                          + u[(i+1) + n * (j + n * k)] 
                                          + u[i + n * ((j-1) + n * k)] 
                                          + u[i + n * ((j+1) + n * k)] 
                                          + u[i + n * (j + n * (k-1))] 
                                          + u[i + n * (j + n * (k+1))] 
                                          + u[i + n * (j + n * k)]);
                }
            }
        }

        // Barrier synchronization is implicit in OpenACC after parallel loops
        #pragma acc parallel loop collapse(3) present(u[0:n*n*n], unew[0:n*n*n])
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i + n * (j + n * k)] = unew[i + n * (j + n * k)];
                }
            }
        }
    }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    // Loop over the number of iterations for the Jacobi method
    for (iter = 1; iter <= niter; iter++) {
        // Use OpenACC parallelization
        #pragma acc parallel loop collapse(3) private(i, j, k) present(u[0:n*n*n], unew[0:n*n*n])
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    // Update the new value based on the Jacobi operation
                    unew[(i * n + j) * n + k] = 0.125 * (u[((i-1) * n + j) * n + k] + 
                                                       u[((i+1) * n + j) * n + k] + 
                                                       u[(i * n + (j-1)) * n + k] +
                                                       u[(i * n + (j+1)) * n + k] + 
                                                       u[(i * n + j) * n + (k-1)] +
                                                       u[(i * n + j) * n + (k+1)] +
                                                       u[(i * n + j) * n + k]);
                }
            }
        }

        // Sync point for OpenACC
        #pragma acc update self(unew[0:n*n*n])
        
        // Copy the new array `unew` into `u`, we assume memory is already allocated.
        #pragma acc parallel loop collapse(3) present(u[0:n*n*n], unew[0:n*n*n])
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[(i * n + j) * n + k] = unew[(i * n + j) * n + k];
                }
            }
        }
    }
}

Code Block 3:
void jacobi_parallel(int n, int niter, double u[n][n][n], double unew[n][n][n]) {
  int iter, i, j, k;

  #pragma acc data copy(u[0:n][0:n][0:n]), create(unew[0:n][0:n][0:n])
  {
    for (iter = 0; iter < niter; iter++) {
      #pragma acc parallel loop collapse(3) private(i, j, k)
      for (k = 1; k < n-1; k++) {
        for (j = 1; j < n-1; j++) {
          for (i = 1; i < n-1; i++) {
            unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                      u[i][j-1][k] + u[i][j+1][k] + 
                                      u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
          }
        }
      }

      #pragma acc parallel loop collapse(3)
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            u[i][j][k] = unew[i][j][k];
          }
        }
      }
    }
  }
}

Code Block 4:
void jacobi_parallel(int n, int niter, double u[n][n][n], double unew[n][n][n]) {
    int iter, i, j, k;
  
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                             u[i][j-1][k] + u[i][j+1][k] + 
                                             u[i][j][k-1] + u[i][j][k+1] +
                                             u[i][j][k]);
                }
            }
        }
      
        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int iter, i, j, k;

    #pragma acc data copyin(u[0:n*n*n]) copyout(unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(2) private(i, j, k)
            for (k = 1; k < n - 1; ++k) {
                for (j = 1; j < n - 1; ++j) {
                    for (i = 1; i < n - 1; ++i) {
                        unew[(i * n + j) * n + k] = 0.125 * (u[((i-1) * n + j) * n + k] + u[((i+1) * n + j) * n + k] +
                                                             u[(i * n + (j-1)) * n + k] + u[(i * n + (j+1)) * n + k] +
                                                             u[(i * n + j) * n + (k-1)] + u[(i * n + j) * n + (k+1)] +
                                                             u[(i * n + j) * n + k]);
                    }
                }
            }
            #pragma acc parallel loop
            for (k = 0; k < n; ++k) {
                for (j = 0; j < n; ++j) {
                    for (i = 0; i < n; ++i) {
                        u[(i * n + j) * n + k] = unew[(i * n + j) * n + k];
                    }
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(int n, int niter, double u[n][n][n], double unew[n][n][n]) {
    int iter, i, j, k;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i,j,k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                             u[i][j-1][k] + u[i][j+1][k] +
                                             u[i][j][k-1] + u[i][j][k+1] + 
                                             u[i][j][k]);
                }
            }
        }
        
        // Update u with the new values
        #pragma acc parallel loop collapse(3) private(i,j,k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(int n, int niter, double ***u, double ***unew) {
    int i, j, k, iter;

    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) copyin(u[0:n][0:n][0:n]), copy(unew[0:n][0:n][0:n])
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                             u[i][j-1][k] + u[i][j+1][k] +
                                             u[i][j][k-1] + u[i][j][k+1] +
                                             u[i][j][k]);
                }
            }
        }
        #pragma acc parallel loop collapse(3) copyin(unew[0:n][0:n][0:n]), copyout(u[0:n][0:n][0:n])
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copyin(u[0:n*n*n]) copyout(unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; ++iter) {
            #pragma acc parallel loop collapse(3) private(i,j,k)
            for (k = 1; k < n-1; ++k) {
                for (j = 1; j < n-1; ++j) {
                    for (i = 1; i < n-1; ++i) {
                        unew[i + j*n + k*n*n] = 0.125 * (
                            u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                            u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                            u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                            u[i + j*n + k*n*n]
                        );
                    }
                }
            }
            
            #pragma acc parallel loop collapse(3) private(i,j,k)
            for (k = 0; k < n; ++k) {
                for (j = 0; j < n; ++j) {
                    for (i = 0; i < n; ++i) {
                        u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                    }
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[(i*n + j)*n + k] = 0.125 * (
                            u[((i-1)*n + j)*n + k] + u[((i+1)*n + j)*n + k] +
                            u[(i*n + (j-1))*n + k] + u[(i*n + (j+1))*n + k] +
                            u[(i*n + j)*n + (k-1)] + u[(i*n + j)*n + (k+1)] +
                            u[(i*n + j)*n + k]);
                    }
                }
            }
            
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[(i*n + j)*n + k] = unew[(i*n + j)*n + k];
                    }
                }
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc parallel loop collapse(3) private(i, j, k, iter)
    for (iter = 1; iter <= niter; iter++) {
        #pragma acc loop independent
        for (k = 1; k < n - 1; k++) {
            #pragma acc loop independent
            for (j = 1; j < n - 1; j++) {
                #pragma acc loop independent
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                             u[i][j-1][k] + u[i][j+1][k] +
                                             u[i][j][k-1] + u[i][j][k+1] +
                                             u[i][j][k]);
                }
            }
        }
        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

