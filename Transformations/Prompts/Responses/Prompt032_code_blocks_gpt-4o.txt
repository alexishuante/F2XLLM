Code Block 1:
void gemv_parallel(int n, float *A, float *x, float *y) {
       float *d_A, *d_x, *d_y;

       // Allocate device memory
       cudaMalloc((void **)&d_A, n * n * sizeof(float));
       cudaMalloc((void **)&d_x, n * sizeof(float));
       cudaMalloc((void **)&d_y, n * sizeof(float));

       // Copy data from host to device
       cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
       cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

       // Define block size and number of blocks
       int blockSize = 256;
       int numBlocks = (n + blockSize - 1) / blockSize;

       // Launch the kernel
       gemv_kernel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);

       // Copy result from device to host
       cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

       // Free device memory
       cudaFree(d_A);
       cudaFree(d_x);
       cudaFree(d_y);
   }

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
       int i = blockIdx.x * blockDim.x + threadIdx.x;
       if (i < n) {
           float sum = 0.0f;
           for (int j = 0; j < n; j++) {
               sum += A[i * n + j] * x[j];
           }
           y[i] = sum;
       }
   }

Code Block 2:
void gemv_parallel(int n, const float *A, const float *x, float *y) {
    // Allocate device memory
    float *d_A, *d_x, *d_y;
    cudaMalloc((void **)&d_A, n * n * sizeof(float));
    cudaMalloc((void **)&d_x, n * sizeof(float));
    cudaMalloc((void **)&d_y, n * sizeof(float));

    // Copy data to device
    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    // Define block size and grid size
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;
    
    // Launch the kernel
    gemv_kernel<<<gridSize, blockSize>>>(n, d_A, d_x, d_y);
    
    // Copy result back to host
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

__global__ void gemv_kernel(int n, const float *A, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 3:
void gemv_parallel(int n, float* A, float* x, float* y) {
    float *d_A, *d_x, *d_y;

    // Allocate device memory
    cudaMalloc((void**)&d_A, n * n * sizeof(float));
    cudaMalloc((void**)&d_x, n * sizeof(float));
    cudaMalloc((void**)&d_y, n * sizeof(float));

    // Copy data to device
    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    // Launch the kernel
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    gemv_kernel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);

    // Copy the result back to host
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    // Free the device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 4:
void gemv_parallel(int n, const float *A, const float *x, float *y) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        y[i] = 0.0f;
        for (int j = 0; j < n; j++) {
            y[i] += A[i * n + j] * x[j];
        }
    }
}

__global__ void gemv_kernel(int n, const float *A, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 5:
void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    
    // Allocate device memory
    cudaMalloc((void**)&d_A, n * n * sizeof(float));
    cudaMalloc((void**)&d_x, n * sizeof(float));
    cudaMalloc((void**)&d_y, n * sizeof(float));
    
    // Copy data to device
    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);
    
    // Launch kernel with enough blocks to cover all rows
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;
    gemv_kernel<<<gridSize, blockSize>>>(n, d_A, d_x, d_y);
    
    // Copy result back to host
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);
    
    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int row = blockIdx.x * blockDim.x + threadIdx.x;
    if (row < n) {
        float sum = 0.0f;
        for (int col = 0; col < n; col++) {
            sum += A[row * n + col] * x[col];
        }
        y[row] = sum;
    }
}

Code Block 6:
void gemv_parallel(int n, float* A, float* x, float* y) {
    for (int i = 0; i < n; ++i) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j]; // Accessing matrix in row-major order
        }
        y[i] = sum;
    }
}

__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockDim.x * blockIdx.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 7:
void gemv_parallel(int n, float A[n][n], float x[n], float y[n]) {
    #pragma omp parallel for
    for (int i = 0; i < n; ++i) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

__global__
void gemv_parallel_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 8:
void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    size_t size_matrix = n * n * sizeof(float);
    size_t size_vector = n * sizeof(float);

    // Allocate device memory
    cudaMalloc((void **) &d_A, size_matrix);
    cudaMalloc((void **) &d_x, size_vector);
    cudaMalloc((void **) &d_y, size_vector);

    // Copy data to device memory
    cudaMemcpy(d_A, A, size_matrix, cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, size_vector, cudaMemcpyHostToDevice);

    // Execution configuration
    int block_size = 256;
    int grid_size = (n + block_size - 1) / block_size;

    // Launch kernel
    gemv_kernel<<<grid_size, block_size>>>(n, d_A, d_x, d_y);

    // Copy result to host memory
    cudaMemcpy(y, d_y, size_vector, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 9:
void gemv_parallel(int n, const float *A, const float *x, float *y) {
    for (int i = 0; i < n; ++i) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_kernel(int n, const float *A, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 10:
void gemv_parallel(int n, const float *A, const float *x, float *y) {
    // Device pointers
    float *d_A = nullptr, *d_x = nullptr, *d_y = nullptr;

    // Allocate memory on the device
    cudaMalloc((void**)&d_A, n * n * sizeof(float));
    cudaMalloc((void**)&d_x, n * sizeof(float));
    cudaMalloc((void**)&d_y, n * sizeof(float));

    // Copy data from host to device
    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    // Define the grid and block sizes
    dim3 blockDim(256);
    dim3 gridDim((n + blockDim.x - 1) / blockDim.x);

    // Launch the kernel
    gemv_kernel<<<gridDim, blockDim>>>(n, d_A, d_x, d_y);

    // Copy the result back to the host
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

__global__ void gemv_kernel(int n, const float *A, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

