Code Block 1:
void jacobi_parallel(int n, int niter, double ***u, double ***unew) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }
        /* Update u with the new values from unew */
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 2:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;
    
    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                             u[i][j-1][k] + u[i][j+1][k] + 
                                             u[i][j][k-1] + u[i][j][k+1] + 
                                             u[i][j][k]);
                }
            }
        }
        #pragma acc end parallel

        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
        #pragma acc end parallel
    }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int iter, i, j, k;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + 
                                                     u[(i+1) + j*n + k*n*n] + 
                                                     u[i + (j-1)*n + k*n*n] +
                                                     u[i + (j+1)*n + k*n*n] +
                                                     u[i + j*n + (k-1)*n*n] +
                                                     u[i + j*n + (k+1)*n*n] +
                                                     u[i + j*n + k*n*n]);
                }
            }
        }

        // Swap pointers u and unew
        double *temp = u;
        u = unew;
        unew = temp;
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copy(u[0:n*n*n]), create(unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (
                            u[(i-1) + j*n + k*n*n] + 
                            u[(i+1) + j*n + k*n*n] + 
                            u[i + (j-1)*n + k*n*n] + 
                            u[i + (j+1)*n + k*n*n] + 
                            u[i + j*n + (k-1)*n*n] + 
                            u[i + j*n + (k+1)*n*n] + 
                            u[i + j*n + k*n*n]
                        );
                    }
                }
            }

            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                    }
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    int idx, idx_p1, idx_m1, idx_pn, idx_mn, idx_pk, idx_mk;

    for (iter = 1; iter <= niter; ++iter) {
        #pragma acc parallel loop collapse(3) private(i, j, k, idx, idx_p1, idx_m1, idx_pn, idx_mn, idx_pk, idx_mk)
        for (k = 1; k < n - 1; ++k) {
            for (j = 1; j < n - 1; ++j) {
                for (i = 1; i < n - 1; ++i) {
                    idx = i + n * (j + n * k);
                    idx_p1 = (i + 1) + n * (j + n * k);
                    idx_m1 = (i - 1) + n * (j + n * k);
                    idx_pn = i + n * ((j + 1) + n * k);
                    idx_mn = i + n * ((j - 1) + n * k);
                    idx_pk = i + n * (j + n * (k + 1));
                    idx_mk = i + n * (j + n * (k - 1));

                    unew[idx] = 0.125 * (u[idx_m1] + u[idx_p1] + u[idx_mn] + u[idx_pn] + u[idx_mk] + u[idx_pk] + u[idx]);
                }
            }
        }
        #pragma acc parallel loop collapse(3)
        for (k = 0; k < n; ++k) {
            for (j = 0; j < n; ++j) {
                for (i = 0; i < n; ++i) {
                    idx = i + n * (j + n * k);
                    u[idx] = unew[idx];
                }
            }
        }
    }
}

Code Block 6:
void jacobi_parallel(double*** u, double*** unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                             u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] +
                                             u[i][j][k]);
                }
            }
        }
        
        // Update u with the values from unew
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n; k++) {
            for (j = 1; j < n; j++) {
                for (i = 1; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 7:
void jacobi_parallel(int n, int niter, double u[n][n][n], double unew[n][n][n]) {
    int i, j, k, iter;

    for (iter = 0; iter < niter; iter++) {
        // Begin parallel region with loop collapsing and private clauses
        #pragma acc parallel loop collapse(3) private(i, j, k) \
                              present(u, unew)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                            u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
                }
            }
        }
        // Synchronize the work within the parallel region
        #pragma acc parallel loop collapse(3) private(i, j, k) \
                              present(u, unew)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    u[i][j][k] = unew[i][j][k];
                }
            }
        }
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k) 
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    int idx = i + n * (j + n * k);
                    unew[idx] = 0.125 * (u[(i - 1) + n * (j + n * k)] + u[(i + 1) + n * (j + n * k)] +
                                         u[i + n * ((j - 1) + n * k)] + u[i + n * ((j + 1) + n * k)] +
                                         u[i + n * (j + n * (k - 1))] + u[i + n * (j + n * (k + 1))] +
                                         u[idx]);
                }
            }
        }
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 0; k < n; k++) {
            for (j = 0; j < n; j++) {
                for (i = 0; i < n; i++) {
                    int idx = i + n * (j + n * k);
                    u[idx] = unew[idx];
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;
    
    for (iter = 1; iter <= niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 2; k < n - 1; k++) {
            for (j = 2; j < n - 1; j++) {
                for (i = 2; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                             u[i][j-1][k] + u[i][j+1][k] +
                                             u[i][j][k-1] + u[i][j][k+1] +
                                             u[i][j][k]);
                }
            }
        }

        // Swap the pointers to avoid deep copy and reuse the memory
        double ***temp = u;
        u = unew;
        unew = temp;
    }
}

Code Block 10:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
    int i, j, k, iter;
    
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k) present(u[0:n][0:n][0:n], unew[0:n][0:n][0:n])
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                             u[i][j-1][k] + u[i][j+1][k] + 
                                             u[i][j][k-1] + u[i][j][k+1] + 
                                             u[i][j][k]);
                }
            }
        }
        // Swap pointers u and unew
        double ***temp = u;
        u = unew;
        unew = temp;
    }
}

