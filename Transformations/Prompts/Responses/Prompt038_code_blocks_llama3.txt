Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i;
  dim3 blockSize(8, 8, 8);
  dim3 gridSize((n + blockSize.x - 1) / blockSize.x,
                (n + blockSize.y - 1) / blockSize.y,
                (n + blockSize.z - 1) / blockSize.z);

  for (i = 0; i < niter; i++) {
    jacobi_kernel<<<gridSize, blockSize>>>(u, unew, n);
    cudaDeviceSynchronize();
    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
                                            u[(i + 1) * n * n + j * n + k] +
                                            u[i * n * n + (j - 1) * n + k] +
                                            u[i * n * n + (j + 1) * n + k] +
                                            u[i * n * n + j * n + (k - 1)] +
                                            u[i * n * n + j * n + (k + 1)] +
                                            u[i * n * n + j * n + k]);
  }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int size = n * n * n;
  double *d_u, *d_unew;
  cudaMalloc((void **)&d_u, size * sizeof(double));
  cudaMalloc((void **)&d_unew, size * sizeof(double));
  cudaMemcpy(d_u, u, size * sizeof(double), cudaMemcpyHostToDevice);
  cudaMemcpy(d_unew, unew, size * sizeof(double), cudaMemcpyHostToDevice);
  dim3 block(16, 16, 16);
  dim3 grid((n + block.x - 1) / block.x, (n + block.y - 1) / block.y, (n + block.z - 1) / block.z);
  for (int iter = 0; iter < niter; iter++) {
    jacobi_kernel<<<grid, block>>>(d_u, d_unew, n);
    cudaMemcpy(d_u, d_unew, size * sizeof(double), cudaMemcpyDeviceToDevice);
  }
  cudaMemcpy(u, d_u, size * sizeof(double), cudaMemcpyDeviceToHost);
  cudaFree(d_u);
  cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] +
      u[(i+1) * n * n + j * n + k] + u[i * n * n + (j-1) * n + k] +
      u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
      u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
  }
}

Code Block 3:
void jacobi_parallel_c(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
              u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
              u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
              u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
        }
      }
    }
    for (k = 0; k < n * n * n; k++) {
      u[k] = unew[k];
    }
  }
}

__global__ void jacobi_parallel_cuda(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
        u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
        u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
        u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
  }
}

Code Block 4:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                     u[i][j - 1][k] + u[i][j + 1][k] +
                                     u[i][j][k - 1] + u[i][j][k + 1] +
                                     u[i][j][k]);
        }
      }
    }
    for (k = 0; k < n; k++) {
      for (j = 0; j < n; j++) {
        for (i = 0; i < n; i++) {
          u[i][j][k] = unew[i][j][k];
        }
      }
    }
  }
}

__global__ void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    for (int iter = 0; iter < niter; iter++) {
      unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                 u[i][j - 1][k] + u[i][j + 1][k] +
                                 u[i][j][k - 1] + u[i][j][k + 1] +
                                 u[i][j][k]);
    }
  }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i;
  cudaError_t err;

  dim3 block(16, 16, 16);
  dim3 grid((n + block.x - 1) / block.x, (n + block.y - 1) / block.y, (n + block.z - 1) / block.z);

  for (i = 0; i < niter; i++) {
    jacobi_kernel<<<grid, block>>>(u, unew, n);
    err = cudaGetLastError();
    if (err != cudaSuccess) {
      printf("Error: %s\n", cudaGetErrorString(err));
      exit(1);
    }
    cudaMemcpy(u, unew, n * n * n * sizeof(double), cudaMemcpyDeviceToDevice);
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] +
                                            u[(i+1) * n * n + j * n + k] +
                                            u[i * n * n + (j-1) * n + k] +
                                            u[i * n * n + (j+1) * n + k] +
                                            u[i * n * n + j * n + (k-1)] +
                                            u[i * n * n + j * n + (k+1)] +
                                            u[i * n * n + j * n + k]);
  }
}

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (
            u[(i - 1) * n * n + j * n + k] +
            u[(i + 1) * n * n + j * n + k] +
            u[i * n * n + (j - 1) * n + k] +
            u[i * n * n + (j + 1) * n + k] +
            u[i * n * n + j * n + (k - 1)] +
            u[i * n * n + j * n + (k + 1)] +
            u[i * n * n + j * n + k]
          );
        }
      }
    }
    double *temp = u;
    u = unew;
    unew = temp;
  }
}

__global__ void jacobi_parallel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (
      u[(i - 1) * n * n + j * n + k] +
      u[(i + 1) * n * n + j * n + k] +
      u[i * n * n + (j - 1) * n + k] +
      u[i * n * n + (j + 1) * n + k] +
      u[i * n * n + j * n + (k - 1)] +
      u[i * n * n + j * n + (k + 1)] +
      u[i * n * n + j * n + k]
    );
  }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int blockSize = 16;
  int numBlocks = (n + blockSize - 1) / blockSize;

  for (int iter = 0; iter < niter; iter++) {
    jacobi_kernel<<<dim3(numBlocks, numBlocks, numBlocks), dim3(blockSize, blockSize, blockSize)>>>(
      u, unew, n
    );
    cudaDeviceSynchronize();
    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (
      u[(i - 1) * n * n + j * n + k] +
      u[(i + 1) * n * n + j * n + k] +
      u[i * n * n + (j - 1) * n + k] +
      u[i * n * n + (j + 1) * n + k] +
      u[i * n * n + j * n + (k - 1)] +
      u[i * n * n + j * n + (k + 1)] +
      u[i * n * n + j * n + k]
    );
  }
}

Code Block 8:
void jacobi_parallel_c(double *u, double *unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (
            u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
            u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
            u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
            u[i * n * n + j * n + k]);
        }
      }
    }
    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_parallel_cuda(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (
      u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
      u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
      u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
      u[i * n * n + j * n + k]);
  }
}

Code Block 9:
void jacobi_parallel(double ***u, double ***unew, int n, int niter) {
  int i, j, k, iter;
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + 
                                        (*u)[i][j-1][k] + (*u)[i][j+1][k] + 
                                        (*u)[i][j][k-1] + (*u)[i][j][k+1] + 
                                        (*u)[i][j][k]);
        }
      }
    }
    for (k = 0; k < n; k++) {
      for (j = 0; j < n; j++) {
        for (i = 0; i < n; i++) {
          (*u)[i][j][k] = (*unew)[i][j][k];
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    unew[i + j * n + k * n * n] = 0.125 * (u[i-1 + j * n + k * n * n] + 
                                            u[i+1 + j * n + k * n * n] + 
                                            u[i + (j-1) * n + k * n * n] + 
                                            u[i + (j+1) * n + k * n * n] + 
                                            u[i + j * n + (k-1) * n * n] + 
                                            u[i + j * n + (k+1) * n * n] + 
                                            u[i + j * n + k * n * n]);
  }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
  int iter, i, j, k;
  for (iter = 0; iter < niter; iter++) {
    for (k = 1; k < n - 1; k++) {
      for (j = 1; j < n - 1; j++) {
        for (i = 1; i < n - 1; i++) {
          unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
              u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
              u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
              u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
        }
      }
    }
    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
        u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] +
        u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] +
        u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
  }
}

