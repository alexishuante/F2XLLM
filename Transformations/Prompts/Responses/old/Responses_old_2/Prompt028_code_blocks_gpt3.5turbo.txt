Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                      u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                                      u[i + j*n + k*n*n]);
                }
            }
        }
        for (i = 0; i < n*n*n; i++) {
            u[i] = unew[i];
        }
    }
}

__global__ void jacobi_parallel_hip(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    
    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                          u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                          u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                          u[i + j*n + k*n*n]);
    }
}

Code Block 2:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    double *d_u, *d_unew;

    size_t size = n * n * n * sizeof(double);
    CHECK_HIP_ERROR(hipMalloc(&d_u, size));
    CHECK_HIP_ERROR(hipMalloc(&d_unew, size));

    CHECK_HIP_ERROR(hipMemcpy(d_u, u, size, hipMemcpyHostToDevice));

    dim3 blockSize(32, 32, 1);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, n);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        CHECK_HIP_ERROR(hipGetLastError());
        CHECK_HIP_ERROR(hipDeviceSynchronize());

        double* temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    CHECK_HIP_ERROR(hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost));

    CHECK_HIP_ERROR(hipFree(d_u));
    CHECK_HIP_ERROR(hipFree(d_unew));
}

__global__ void jacobi_kernel(double* u, double* unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z;

    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        int idx = k * n * n + j * n + i;
        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - 1] + u[idx + 1] + u[idx - n * n] + u[idx + n * n] + u[idx]);
    }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    hipMalloc(&d_u, sizeof(double) * n * n * n);
    hipMalloc(&d_unew, sizeof(double) * n * n * n);
    
    hipMemcpy(d_u, u, sizeof(double) * n * n * n, hipMemcpyHostToDevice);
    
    dim3 block(16, 16, 16);
    dim3 grid((n + block.x - 1) / block.x, (n + block.y - 1) / block.y, (n + block.z - 1) / block.z);
    
    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_kernel<<<grid, block>>>(d_u, d_unew, n);
        hipDeviceSynchronize();
        
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }
    
    hipMemcpy(unew, d_u, sizeof(double) * n * n * n, hipMemcpyDeviceToHost);
    
    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_parallel_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;
    
    if (i < n && j < n && k < n && i > 0 && j > 0 && k > 0 && i < n-1 && j < n-1 && k < n-1) {
        int idx = i + j*n + k*n*n;
        unew[idx] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                             u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                             u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[idx]);
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL([=] __global__ (double *u, double *unew) {
            int i = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;
            int j = hipBlockIdx_y * hipBlockDim_y + hipThreadIdx_y;
            int k = hipBlockIdx_z * hipBlockDim_z + hipThreadIdx_z;

            if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
                unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                 u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                 u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] +
                                                 u[i + j*n + k*n*n]);
            }
        }, dim3(n/256, n/256, n/256), dim3(256, 256, 1), 0, 0, u, unew);
        
        hipDeviceSynchronize();

        // Copy unew to u
        hipMemcpy(u, unew, n * n * n * sizeof(double), hipMemcpyDeviceToDevice);
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    
    for (iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL([&](hipLaunchParm lp) {
            int i = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;
            int j = hipBlockIdx_y * hipBlockDim_y + hipThreadIdx_y;
            int k = hipBlockIdx_z * hipBlockDim_z + hipThreadIdx_z;

            if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
                unew[i + n*j + n*n*k] = 0.125 * (u[(i-1) + n*j + n*n*k] + u[(i+1) + n*j + n*n*k] +
                                                  u[i + n*(j-1) + n*n*k] + u[i + n*(j+1) + n*n*k] +
                                                  u[i + n*j + n*n*(k-1)] + u[i + n*j + n*n*(k+1)] +
                                                  u[i + n*j + n*n*k]);
            }
        }, dim3(n/8, n/8, n/8), dim3(8, 8, 8), 0, 0, n, n, n, u, unew);

        hipDeviceSynchronize();

        // Copy unew back to u
        hipMemcpy(u, unew, sizeof(double) * n * n * n, hipMemcpyDeviceToDevice);
    }
}

Code Block 6:
void jacobi_parallel(double* u, double* unew, int n, int niter){
    for (int iter = 0; iter < niter; iter++){
        hipLaunchKernelGGL(update_kernel, dim3((n-2), (n-2), (n-2)), dim3(1, 1, 1), 0, 0, u, unew, n);
        hipDeviceSynchronize();

        // Copy unew back to u
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                for (int k = 0; k < n; k++){
                    u[i*n*n + j*n + k] = unew[i*n*n + j*n + k];
                }
            }
        }
    }
}

__global__ void update_kernel(double* u, double* unew, int n){
    int i = threadIdx.x + 1;
    int j = blockIdx.x + 1;
    int k = blockIdx.y + 1;

    if (i < n-1 && j < n-1 && k < n-1){
        unew[i*n*n + j*n + k] = 0.125 * (u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] + u[i*n*n + (j-1)*n + k] +
                                         u[i*n*n + (j+1)*n + k] + u[i*n*n + j*n + k-1] + u[i*n*n + j*n + k+1] + u[i*n*n + j*n + k]);
    }
}

Code Block 7:
void jacobi_parallel(float *u, float *unew, int n, int niter) {
    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL([=] HIP_KERNEL(args) {
            int i = args.get_global_id(0);
            int j = args.get_global_id(1);
            int k = args.get_global_id(2);
            if (i >= 1 && i < n-1 && j >= 1 && j < n-1 && k >= 1 && k < n-1) {
                unew[i*n*n + j*n + k] = 0.125f * (u[(i-1)*n*n + j*n + k] 
                                                + u[(i+1)*n*n + j*n + k]
                                                + u[i*n*n + (j-1)*n + k]
                                                + u[i*n*n + (j+1)*n + k]
                                                + u[i*n*n + j*n + (k-1)]
                                                + u[i*n*n + j*n + (k+1)]
                                                + u[i*n*n + j*n + k]);
            }
        }, dim3(n, n, n), dim3(1, 1, 1), 0, NULL);
            
        hipMemcpy(u, unew, n*n*n*sizeof(float), hipMemcpyDeviceToDevice);
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;

    hipMalloc(&d_u, n * n * n * sizeof(double));
    hipMemcpy(d_u, u, n * n * n * sizeof(double), hipMemcpyHostToDevice);

    hipMalloc(&d_unew, n * n * n * sizeof(double));

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n - 2 + blockSize.x - 1) / blockSize.x, (n - 2 + blockSize.y - 1) / blockSize.y, (n - 2 + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL(jacobi_kernel, gridSize, blockSize, 0, 0, d_u, d_unew, n);
        
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, n * n * n * sizeof(double), hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n] + 
                                                u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + 
                                                u[i + j * n + (k-1) * n * n] + u[i + j * n + (k+1) * n * n] + 
                                                u[i + j * n + k * n * n]);
    }
}

Code Block 9:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;
    for (iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) private(i, j, k)
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j * n + k * n * n] = 0.125 * (u[(i-1) + j * n + k * n * n] + u[(i+1) + j * n + k * n * n]
                                     + u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n]
                                     + u[i + j * n + (k-1) * n * n] + u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
                }
            }
        }
        #pragma acc update self(u[:n*n*n], unew[:n*n*n])
    }
}

Code Block 10:
void jacobi_operation(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    hipMalloc(&d_u, n * n * n * sizeof(double));
    hipMalloc(&d_unew, n * n * n * sizeof(double));

    hipMemcpy(d_u, u, n * n * n * sizeof(double), hipMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x,
                  (n + blockSize.y - 1) / blockSize.y,
                  (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        hipDeviceSynchronize();

        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, n * n * n * sizeof(double), hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n-1 && j > 0 && j < n-1 && k > 0 && k < n-1) {
        int index = k * n * n + j * n + i;
        unew[index] = 0.125 * (u[index - n] + u[index + n] +
                               u[index - 1] + u[index + 1] +
                               u[index - n * n] + u[index + n * n] +
                               u[index]);
    }
}

