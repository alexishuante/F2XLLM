Output 1:
```c
__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

void spmv(int n, int nnz, float *h_val, int *h_row, int *h_col, float *h_x, float *h_y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    
    cudaMalloc(&d_val, nnz * sizeof(float));
    cudaMalloc(&d_row, (n+1) * sizeof(int));
    cudaMalloc(&d_col, nnz * sizeof(int));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));
    
    cudaMemcpy(d_val, h_val, nnz * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_row, h_row, (n+1) * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_col, h_col, nnz * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, h_x, n * sizeof(float), cudaMemcpyHostToDevice);
    
    int block_size = 256;
    int num_blocks = (n + block_size - 1) / block_size;
    
    spmv_parallel<<<num_blocks, block_size>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    cudaMemcpy(h_y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);
    
    cudaFree(d_val);
    cudaFree(d_row);
    cudaFree(d_col);
    cudaFree(d_x);
    cudaFree(d_y);
}
```

Output 2:
```c
#include <stdio.h>
#include <cuda_runtime.h>

__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

void spmv(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    
    cudaMalloc(&d_val, nnz * sizeof(float));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));
    cudaMalloc(&d_row, (n+1) * sizeof(int));
    cudaMalloc(&d_col, nnz * sizeof(int));
    
    cudaMemcpy(d_val, val, nnz * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_row, row, (n+1) * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_col, col, nnz * sizeof(int), cudaMemcpyHostToDevice);
    
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    spmv_parallel<<<numBlocks, blockSize>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);
    
    cudaFree(d_val);
    cudaFree(d_x);
    cudaFree(d_y);
    cudaFree(d_row);
    cudaFree(d_col);
}
```

Output 3:
```c
__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        y[i] = 0.0;
        for(int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

void sparse_matrix_vector_multiplication(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    cudaMalloc(&d_val, nnz * sizeof(float));
    cudaMalloc(&d_row, (n+1) * sizeof(int));
    cudaMalloc(&d_col, nnz * sizeof(int));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));

    cudaMemcpy(d_val, val, nnz * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_row, row, (n+1) * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_col, col, nnz * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    int block_size = 256;
    int grid_size = (n + block_size - 1) / block_size;

    spmv_parallel<<<grid_size, block_size>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);

    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(d_val);
    cudaFree(d_row);
    cudaFree(d_col);
    cudaFree(d_x);
    cudaFree(d_y);
}
```

Output 4:
```c
__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < n) {
        y[tid] = 0.0;
        for (int j = row[tid]; j < row[tid+1]; j++) {
            y[tid] += val[j] * x[col[j]];
        }
    }
}

void spmv(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    
    cudaMalloc(&d_val, nnz * sizeof(float));
    cudaMalloc(&d_row, (n+1) * sizeof(int));
    cudaMalloc(&d_col, nnz * sizeof(int));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));
    
    cudaMemcpy(d_val, val, nnz * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_row, row, (n+1) * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_col, col, nnz * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);
    
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    
    spmv_parallel<<<numBlocks, blockSize>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);
    
    cudaFree(d_val);
    cudaFree(d_row);
    cudaFree(d_col);
    cudaFree(d_x);
    cudaFree(d_y);
}
```

Output 5:
```c
#include <stdio.h>
#include <stdlib.h>

__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

void spmv_wrapper(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    cudaMalloc(&d_val, nnz * sizeof(float));
    cudaMalloc(&d_row, (n+1) * sizeof(int));
    cudaMalloc(&d_col, nnz * sizeof(int));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));

    cudaMemcpy(d_val, val, nnz * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_row, row, (n+1) * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_col, col, nnz * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    int block_size = 256;
    int num_blocks = (n + block_size - 1) / block_size;

    spmv_parallel<<<num_blocks, block_size>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);

    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(d_val);
    cudaFree(d_row);
    cudaFree(d_col);
    cudaFree(d_x);
    cudaFree(d_y);
}

int main() {
    int n = 5;
    int nnz = 8;

    float val[8] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0};
    int row[6] = {0, 2, 4, 6, 8, 8};
    int col[8] = {0, 1, 1, 2, 2, 3, 3, 4};
    float x[5] = {1.0, 2.0, 3.0, 4.0, 5.0};
    float y[5] = {0};

    spmv_wrapper(n, nnz, val, row, col, x, y);

    for (int i = 0; i < n; i++) {
        printf("%f ", y[i]);
    }
    printf("\n");

    return 0;
}
```

Output 6:
```c
__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        float result = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            result += val[j] * x[col[j]];
        }
        y[i] = result;
    }
}

void spmv(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    
    cudaMalloc(&d_val, nnz * sizeof(float));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));
    cudaMalloc(&d_row, (n+1) * sizeof(int));
    cudaMalloc(&d_col, nnz * sizeof(int));
    
    cudaMemcpy(d_val, val, nnz * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_row, row, (n+1) * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_col, col, nnz * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);
    
    int block_size = 256;
    int num_blocks = (n + block_size - 1) / block_size;
    
    spmv_parallel<<<num_blocks, block_size>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);
    
    cudaFree(d_val);
    cudaFree(d_x);
    cudaFree(d_y);
    cudaFree(d_row);
    cudaFree(d_col);
}
```

Output 7:
```c
__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (i < n) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

void spmv_wrapper(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    
    cudaMalloc(&d_val, nnz * sizeof(float));
    cudaMalloc(&d_row, (n+1) * sizeof(int));
    cudaMalloc(&d_col, nnz * sizeof(int));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));
    
    cudaMemcpy(d_val, val, nnz * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_row, row, (n+1) * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_col, col, nnz * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);
    
    int block_size = 256;
    int grid_size = (n + block_size - 1) / block_size;
    
    spmv_parallel<<<grid_size, block_size>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);
    
    cudaFree(d_val);
    cudaFree(d_row);
    cudaFree(d_col);
    cudaFree(d_x);
    cudaFree(d_y);
}
```

Output 8:
```c
#include <stdio.h>

__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;

    if (idx < n) {
        y[idx] = 0.0;

        for (int j = row[idx]; j < row[idx + 1]; j++) {
            y[idx] += val[j] * x[col[j]];
        }
    }
}

void spmv(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    cudaMalloc(&d_val, nnz * sizeof(float));
    cudaMalloc(&d_row, (n + 1) * sizeof(int));
    cudaMalloc(&d_col, nnz * sizeof(int));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));

    cudaMemcpy(d_val, val, nnz * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_row, row, (n + 1) * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_col, col, nnz * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    int block_size = 256;
    int num_blocks = (n + block_size - 1) / block_size;

    spmv_parallel<<<num_blocks, block_size>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);

    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(d_val);
    cudaFree(d_row);
    cudaFree(d_col);
    cudaFree(d_x);
    cudaFree(d_y);
}

int main() {
    int n = 4;
    int nnz = 6;
    float val[6] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0};
    int row[5] = {0, 2, 3, 5, 6};
    int col[6] = {0, 2, 1, 2, 0, 3};
    float x[4] = {1.0, 2.0, 3.0, 4.0};
    float y[4];

    spmv(n, nnz, val, row, col, x, y);

    for (int i = 0; i < n; i++) {
        printf("y[%d] = %f\n", i, y[i]);
    }

    return 0;
}
```

Output 9:
```c
#include <stdio.h>

__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

int main() {
    int n = 5;
    int nnz = 10;

    float val[nnz] = {1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0};
    int row[n+1] = {0, 2, 4, 5, 7, 10};
    int col[nnz] = {0, 1, 1, 2, 0, 1, 3, 0, 2, 4};
    float x[n] = {1.0, 2.0, 3.0, 4.0, 5.0};
    float y[n];

    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;

    cudaMalloc(&d_val, nnz * sizeof(float));
    cudaMalloc(&d_row, (n+1) * sizeof(int));
    cudaMalloc(&d_col, nnz * sizeof(int));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));

    cudaMemcpy(d_val, val, nnz * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_row, row, (n+1) * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_col, col, nnz * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    int block_size = 256;
    int num_blocks = (n + block_size - 1) / block_size;

    spmv_parallel<<<num_blocks, block_size>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);

    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    for (int i = 0; i < n; i++) {
        printf("%f ", y[i]);
    }
    printf("\n");

    cudaFree(d_val);
    cudaFree(d_row);
    cudaFree(d_col);
    cudaFree(d_x);
    cudaFree(d_y);

    return 0;
}
```

Output 10:
```c
#include <stdio.h>

__global__ void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

void spmv(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    float *d_val, *d_x, *d_y;
    int *d_row, *d_col;
    
    cudaMalloc(&d_val, nnz * sizeof(float));
    cudaMalloc(&d_row, (n+1) * sizeof(int));
    cudaMalloc(&d_col, nnz * sizeof(int));
    cudaMalloc(&d_x, n * sizeof(float));
    cudaMalloc(&d_y, n * sizeof(float));
    
    cudaMemcpy(d_val, val, nnz * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_row, row, (n+1) * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_col, col, nnz * sizeof(int), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);
    
    int block_size = 256;
    int grid_size = (n + block_size - 1) / block_size;
    
    spmv_parallel<<<grid_size, block_size>>>(n, nnz, d_val, d_row, d_col, d_x, d_y);
    
    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);
    
    cudaFree(d_val);
    cudaFree(d_row);
    cudaFree(d_col);
    cudaFree(d_x);
    cudaFree(d_y);
}

```

