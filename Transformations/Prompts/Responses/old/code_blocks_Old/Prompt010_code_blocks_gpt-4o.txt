Code Block 1:
void spmv_parallel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y) {
    #pragma omp parallel for
    for (int i = 0; i < n; ++i) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i + 1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 2:
void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
    // Parallelize the outer loop using OpenMP
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 3:
void spmv_parallel(int n, int nnz, const std::vector<float>& val, const std::vector<int>& row, const std::vector<int>& col, const std::vector<float>& x, std::vector<float>& y) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 4:
void spmv_parallel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y)
{
    // Parallelize the outer loop
    #pragma omp parallel for
    for (int i = 0; i < n; ++i)
    {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i + 1]; ++j)
        {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 5:
void spmv_parallel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y) {
    // Parallelize the outer loop using OpenMP
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 6:
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    // Parallel region for the outer loop
    #pragma omp parallel for
    for (int i = 0; i < n; ++i) {
        y[i] = 0.0f;
        for (int j = row[i]; j < row[i + 1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 7:
void spmv_parallel(int n, int nnz, const float* val, const int* row, const int* col, const float* x, float* y) {
    #pragma omp parallel for
    for (int i = 0; i < n; ++i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 8:
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    int i, j;

    #pragma omp parallel for private(i, j) schedule(static)
    for (i = 0; i < n; ++i) {
        y[i] = 0.0;
        for (j = row[i]; j < row[i+1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 9:
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    #pragma omp parallel for default(none) shared(val, row, col, x, y, n) 
    for (int i = 0; i < n; ++i) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i + 1]; ++j) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 10:
void spmv_parallel(int n, int nnz, const float *val, const int *row, const int *col, const float *x, float *y) {
    // Parallel section using OpenMP
    #pragma omp parallel for default(none) shared(n, val, row, col, x, y)
    for (int i = 0; i < n; ++i) {
        y[i] = 0.0f; // Initialize the result vector
        for (int j = row[i]; j < row[i + 1]; ++j) {
            // Perform SpMV computation
            y[i] += val[j] * x[col[j]];
        }
    }
}

