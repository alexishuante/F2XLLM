Code Block 1:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int blockSize = BLOCK_SIZE;
  int numBlocks = (n + blockSize - 1) / blockSize;

  dim3 threads(blockSize, blockSize, blockSize);
  dim3 blocks(numBlocks, numBlocks, numBlocks);

  jacobi_kernel<<<blocks, threads>>>(u, unew, n, niter);

  cudaDeviceSynchronize();
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 0; iter < niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125f * (
        u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
        u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] +
        u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] +
        u[i + j * n + k * n * n]
      );
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 2:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int blockSize = BLOCK_SIZE;
  int numBlocks = (n + blockSize - 1) / blockSize;

  double *d_u, *d_unew;

  cudaMalloc((void **)&d_u, n * n * n * sizeof(double));
  cudaMalloc((void **)&d_unew, n * n * n * sizeof(double));

  cudaMemcpy(d_u, u, n * n * n * sizeof(double), cudaMemcpyHostToDevice);

  for (int iter = 0; iter < niter; iter++) {
    dim3 block(blockSize, blockSize, blockSize);
    dim3 grid(numBlocks, numBlocks, numBlocks);

    jacobi_kernel<<<grid, block>>>(d_u, d_unew, n);

    cudaDeviceSynchronize();

    double *tmp = d_u;
    d_u = d_unew;
    d_unew = tmp;
  }

  cudaMemcpy(u, d_u, n * n * n * sizeof(double), cudaMemcpyDeviceToHost);

  cudaFree(d_u);
  cudaFree(d_unew);
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
  int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
  int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

  if (i < n - 1 && j < n - 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
                                            u[(i + 1) * n * n + j * n + k] +
                                            u[i * n * n + (j - 1) * n + k] +
                                            u[i * n * n + (j + 1) * n + k] +
                                            u[i * n * n + j * n + (k - 1)] +
                                            u[i * n * n + j * n + (k + 1)] +
                                            u[i * n * n + j * n + k]);
  }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int blockSize = BLOCK_SIZE;
  int numBlocks = (n-2) / blockSize + 1;

  dim3 threadsPerBlock(blockSize, blockSize, blockSize);
  dim3 numBlocksPerGrid(numBlocks, numBlocks, numBlocks);

  for (int iter = 0; iter < niter; iter++) {
    jacobi_kernel<<<numBlocksPerGrid, threadsPerBlock>>>(u, unew, n);
    cudaDeviceSynchronize();
    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * BLOCK_SIZE + threadIdx.x + 1;
  int j = blockIdx.y * BLOCK_SIZE + threadIdx.y + 1;
  int k = blockIdx.z * BLOCK_SIZE + threadIdx.z + 1;

  if (i < n-1 && j < n-1 && k < n-1) {
    unew[i*n*n + j*n + k] = 0.125 * (u[(i-1)*n*n + j*n + k] + u[(i+1)*n*n + j*n + k] +
                                     u[i*n*n + (j-1)*n + k] + u[i*n*n + (j+1)*n + k] +
                                     u[i*n*n + j*n + (k-1)] + u[i*n*n + j*n + (k+1)] + u[i*n*n + j*n + k]);
  }
}

Code Block 4:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  int blockSize = 256;
  int numBlocks = (n * n * n + blockSize - 1) / blockSize;

  jacobi_kernel<<<numBlocks, blockSize>>>(u, unew, n, niter);

  cudaDeviceSynchronize();
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  int i = idx / (n * n);
  int j = (idx / n) % n;
  int k = idx % n;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[idx] = 0.125f * (u[idx - n * n - n - 1] + u[idx - n * n + n - 1] +
                             u[idx - n - 1] + u[idx + n - 1] +
                             u[idx - n * n] + u[idx + n * n]);
    }
  }
}

Code Block 5:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  int blockSize = 256;
  int numBlocks = (n * n * n + blockSize - 1) / blockSize;

  jacobi_kernel<<<numBlocks, blockSize>>>(u, unew, n, niter);

  cudaDeviceSynchronize();
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  int i = idx / (n * n);
  int j = (idx / n) % n;
  int k = idx % n;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[idx] = 0.125f * (u[idx - n * n - n - 1] + u[idx - n * n - n + 1] +
        u[idx - n * n - 1] + u[idx - n * n + 1] + u[idx - n - n - 1] +
        u[idx - n - n + 1] + u[idx - n - 1] + u[idx - n + 1] + u[idx]);
    }
  }
}

Code Block 6:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int blockSize = 256;
  int numBlocks = (n * n * n + blockSize - 1) / blockSize;
  
  jacobi_kernel<<<numBlocks, blockSize>>>(u, unew, n, niter);
  
  cudaDeviceSynchronize();
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125f * (u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
        u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] + u[i + j * n + (k - 1) * n * n] +
        u[i + j * n + (k + 1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

Code Block 7:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  int blockSize = 256;
  int numBlocks = (n * n * n + blockSize - 1) / blockSize;
  
  jacobi_kernel<<<numBlocks, blockSize>>>(u, unew, n, niter);
  
  cudaDeviceSynchronize();
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int idx = i + j * n + k * n * n;
  
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[idx] = 0.125f * (u[idx - 1] + u[idx + 1] + u[idx - n] + u[idx + n] +
                             u[idx - n * n] + u[idx + n * n] + u[idx]);
      __syncthreads();
      u[idx] = unew[idx];
    }
  }
}

Code Block 8:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int numBlocks = (n + BLOCK_SIZE - 1) / BLOCK_SIZE;
  dim3 blockSize(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
  dim3 gridSize(numBlocks, numBlocks, numBlocks);

  for (int iter = 0; iter < niter; iter++) {
    cudaJacobiKernel<<<gridSize, blockSize>>>(u, unew, n);
    cudaDeviceSynchronize();
    float *tmp = u;
    u = unew;
    unew = tmp;
  }
}

__global__ void cudaJacobiKernel(float *u, float *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
  int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
  int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

  if (i < n - 1 && j < n - 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125f * (
      u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
      u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
      u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
      u[i * n * n + j * n + k]);
  }
}

Code Block 9:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int blockSize = BLOCK_SIZE;
  int numBlocks = (n - 2 + blockSize - 1) / blockSize;

  float *d_u, *d_unew;
  cudaMalloc((void **)&d_u, n * n * n * sizeof(float));
  cudaMalloc((void **)&d_unew, n * n * n * sizeof(float));

  cudaMemcpy(d_u, u, n * n * n * sizeof(float), cudaMemcpyHostToDevice);
  cudaMemcpy(d_unew, unew, n * n * n * sizeof(float), cudaMemcpyHostToDevice);

  for (int iter = 0; iter < niter; iter++) {
    dim3 numBlocks(numBlocks, numBlocks, numBlocks);
    dim3 threadsPerBlock(blockSize, blockSize, blockSize);
    jacobi_kernel<<<numBlocks, threadsPerBlock>>>(d_u, d_unew, n);
    cudaDeviceSynchronize();
    float *temp = d_u;
    d_u = d_unew;
    d_unew = temp;
  }

  cudaMemcpy(u, d_u, n * n * n * sizeof(float), cudaMemcpyDeviceToHost);
  cudaFree(d_u);
  cudaFree(d_unew);
}

__global__ void jacobi_kernel(float *u, float *unew, int n) {
  int i = blockIdx.x * BLOCK_SIZE + threadIdx.x + 1;
  int j = blockIdx.y * BLOCK_SIZE + threadIdx.y + 1;
  int k = blockIdx.z * BLOCK_SIZE + threadIdx.z + 1;

  if (i < n - 1 && j < n - 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125f * (
      u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
      u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
      u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
      u[i * n * n + j * n + k]);
  }
}

Code Block 10:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int numBlocks = (n + BLOCK_SIZE - 1) / BLOCK_SIZE;
  dim3 blockSize(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
  dim3 gridSize(numBlocks, numBlocks, numBlocks);

  cudaStream_t stream[nthreads];
  for (int i = 0; i < nthreads; i++) {
    cudaStreamCreate(&stream[i]);
  }

  for (int iter = 0; iter < niter; iter++) {
    for (int i = 0; i < nthreads; i++) {
      jacobi_kernel<<<gridSize, blockSize, 0, stream[i]>>>(u, unew, n);
    }
    cudaDeviceSynchronize();

    float *tmp = u;
    u = unew;
    unew = tmp;
  }

  for (int i = 0; i < nthreads; i++) {
    cudaStreamDestroy(stream[i]);
  }
}

__global__ void jacobi_kernel(float *u, float *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125f * (
      u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
      u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
      u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
      u[i * n * n + j * n + k]
    );
  }
}

