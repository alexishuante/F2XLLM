Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copy(u[0:n*n*n]), create(unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + 
                                                         u[(i+1) + j*n + k*n*n] + 
                                                         u[i + (j-1)*n + k*n*n] + 
                                                         u[i + (j+1)*n + k*n*n] + 
                                                         u[i + j*n + (k-1)*n*n] + 
                                                         u[i + j*n + (k+1)*n*n] + 
                                                         u[i + j*n + k*n*n]);
                    }
                }
            }

            // Swap pointers: make 'u' point to 'unew' data 
            // and 'unew' now points to what 'u' was previously pointing.
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + j*n + k*n*n] = unew[i + j*n + k*n*n];
                    }
                }
            }
        }
    }
}

Code Block 2:
arrays
  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < n; ++j) {
      for (int k = 0; k < n; ++k) {
        u[i][j][k] = 1.0;
        unew[i][j][k] = 1.0;
      }
    }
  }

Code Block 3:
void jacobi_parallel(int n, int niter, double*** u, double*** unew) {
    int i, j, k, iter;

    // Parallelize the outer loop with OpenACC
    #pragma acc data copyin(u[0:n][0:n][0:n]), copyout(unew[0:n][0:n][0:n])
    {
        for (iter = 1; iter <= niter; iter++) {
            // Use the kernels directive to introduce parallelism
            #pragma acc kernels
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] +
                                                 u[i][j-1][k] + u[i][j+1][k] +
                                                 u[i][j][k-1] + u[i][j][k+1] +
                                                 u[i][j][k]);
                    }
                }
            }

            // Synchronize to ensure previous kernel completion
            #pragma acc update self(unew[0:n][0:n][0:n])
            
            // Swap pointers
            double*** temp = u;
            u = unew;
            unew = temp;
        }
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    #pragma acc data copy(u[0:n*n*n]), create(unew[0:n*n*n])
    {
        for (int iter = 0; iter < niter; iter++) {
            #pragma acc parallel loop collapse(3) num_workers(nthreads)
            for (int k = 1; k < n - 1; k++) {
                for (int j = 1; j < n - 1; j++) {
                    for (int i = 1; i < n - 1; i++) {
                        unew[i + n * (j + n * k)] = 0.125 * (
                            u[(i-1) + n * (j + n * k)] + 
                            u[(i+1) + n * (j + n * k)] + 
                            u[i + n * ((j-1) + n * k)] + 
                            u[i + n * ((j+1) + n * k)] + 
                            u[i + n * (j + n * (k-1))] + 
                            u[i + n * (j + n * (k+1))] + 
                            u[i + n * (j + n * k)]
                        );
                    }
                }
            }
            #pragma acc parallel loop collapse(3) num_workers(nthreads)
            for (int k = 0; k < n; k++) {
                for (int j = 0; j < n; j++) {
                    for (int i = 0; i < n; i++) {
                        u[i + n * (j + n * k)] = unew[i + n * (j + n * k)];
                    }
                }
            }
        }
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; ++iter) {
            #pragma acc parallel loop collapse(3) gang num_gangs(nthreads) vector_length(32) private(i, j, k)
            for (k = 1; k < n-1; ++k) {
                for (j = 1; j < n-1; ++j) {
                    for (i = 1; i < n-1; ++i) {
                        int idx = i + n * (j + n * k);
                        int idx_im1 = (i-1) + n * (j + n * k);
                        int idx_ip1 = (i+1) + n * (j + n * k);
                        int idx_jm1 = i + n * ((j-1) + n * k);
                        int idx_jp1 = i + n * ((j+1) + n * k);
                        int idx_km1 = i + n * (j + n * (k-1));
                        int idx_kp1 = i + n * (j + n * (k+1));
                        
                        unew[idx] = 0.125 * (u[idx_im1] + u[idx_ip1] + u[idx_jm1] + u[idx_jp1] + u[idx_km1] + u[idx_kp1] + u[idx]);
                    }
                }
            }
            
            #pragma acc parallel loop collapse(3) gang num_gangs(nthreads) vector_length(32)
            for (k = 0; k < n; ++k) {
                for (j = 0; j < n; ++j) {
                    for (i = 0; i < n; ++i) {
                        int idx = i + n * (j + n * k);
                        u[idx] = unew[idx];
                    }
                }
            }
            
            #pragma acc barrier
        }
    }
}

Code Block 6:
void jacobi_parallel(double*** u, double*** unew, int n, int niter, int nthreads) {
    // Parallel region, similar to the OpenMP parallel construct
    #pragma acc data copy(u[0:n][0:n][0:n]), create(unew[0:n][0:n][0:n])
    {
        for (int iter = 0; iter < niter; iter++) {
            // Parallel loop with OpenACC
            #pragma acc parallel loop collapse(3) present(u, unew)
            for (int k = 1; k < n - 1; k++) {
                for (int j = 1; j < n - 1; j++) {
                    for (int i = 1; i < n - 1; i++) {
                        unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                                 u[i][j-1][k] + u[i][j+1][k] + 
                                                 u[i][j][k-1] + u[i][j][k+1] + 
                                                 u[i][j][k]);
                    }
                }
            }

            // Synchronization barrier similar to OpenMP barrier
            #pragma acc update self(unew[0:n][0:n][0:n])

            // Copy data back
            #pragma acc parallel loop collapse(3) present(u, unew)
            for (int k = 0; k < n; k++) {
                for (int j = 0; j < n; j++) {
                    for (int i = 0; i < n; i++) {
                        u[i][j][k] = unew[i][j][k];
                    }
                }
            }
        }
    } // end of data region
}

Code Block 7:
void jacobi_parallel(int n, int niter, float *u, float *unew) {
  int i, j, k, iter;
  
  #pragma acc data copy(u[0:n*n*n]), copyin(unew[0:n*n*n])
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma acc parallel loop collapse(3)
      for (k = 1; k < n - 1; k++) {
        for (j = 1; j < n - 1; j++) {
          for (i = 1; i < n - 1; i++) {
            unew[i + n * (j + n * k)] = 0.125 * (u[(i-1) + n * (j + n * k)] + u[(i+1) + n * (j + n * k)] + 
                                                 u[i + n * ((j-1) + n * k)] + u[i + n * ((j+1) + n * k)] + 
                                                 u[i + n * (j + n * (k-1))] + u[i + n * (j + n * (k+1))] + 
                                                 u[i + n * (j + n * k)]);
          }
        }
      }
      #pragma acc parallel loop collapse(3)
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            u[i + n * (j + n * k)] = unew[i + n * (j + n * k)];
          }
        }
      }
    }
  }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    #pragma acc data copy(u[0:n*n*n], unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i + n*(j + n*k)] = 0.125 * (
                            u[(i-1) + n*(j + n*k)] + u[(i+1) + n*(j + n*k)] +
                            u[i + n*(j-1 + n*k)] + u[i + n*(j+1 + n*k)] +
                            u[i + n*(j + n*(k-1))] + u[i + n*(j + n*(k+1))] +
                            u[i + n*(j + n*k)]
                        );
                    }
                }
            }

            #pragma acc parallel loop collapse(3)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + n*(j + n*k)] = unew[i + n*(j + n*k)];
                    }
                }
            }
        }
    }
}

Code Block 9:
void jacobi_parallel(double* u, double* unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    #pragma acc data copy(u[0:n*n*n]), create(unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) num_gangs(nthreads) vector_length(128)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i + n * (j + n * k)] = 0.125 * (u[(i-1) + n * (j + n * k)] +
                                                              u[(i+1) + n * (j + n * k)] +
                                                              u[i + n * ((j-1) + n * k)] +
                                                              u[i + n * ((j+1) + n * k)] +
                                                              u[i + n * (j + n * (k-1))] +
                                                              u[i + n * (j + n * (k+1))] +
                                                              u[i + n * (j + n * k)]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3) num_gangs(nthreads) vector_length(128)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        u[i + n * (j + n * k)] = unew[i + n * (j + n * k)];
                    }
                }
            }
        }
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
    int i, j, k, iter;
    
    acc_set_num_threads(nthreads);

    #pragma acc data copyin(u[0:n*n*n]) copyout(unew[0:n*n*n])
    {
        for (iter = 1; iter <= niter; iter++) {
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 1; k < n-1; k++) {
                for (j = 1; j < n-1; j++) {
                    for (i = 1; i < n-1; i++) {
                        unew[i + n * (j + n * k)] = 0.125 * (u[(i-1) + n * (j + n * k)] + 
                                                              u[(i+1) + n * (j + n * k)] + 
                                                              u[i + n * ((j-1) + n * k)] + 
                                                              u[i + n * ((j+1) + n * k)] + 
                                                              u[i + n * (j + n * (k-1))] + 
                                                              u[i + n * (j + n * (k+1))] + 
                                                              u[i + n * (j + n * k)]);
                    }
                }
            }
            #pragma acc parallel loop collapse(3) private(i, j, k)
            for (k = 0; k < n; k++) {
                for (j = 0; j < n; j++) {
                    for (i = 0; i < n; i++) {
                        u[i + n * (j + n * k)] = unew[i + n * (j + n * k)];
                    }
                }
            }
        }
    }
}

