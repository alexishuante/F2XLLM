Code Block 1:
Code Block 2:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    #pragma acc parallel loop copyin(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 3:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i, j;

    #pragma acc parallel loop present(val, row, col, x, y)
    for (i = 0; i < n; i++) {
        y[i] = 0.0;
        for (j = row[i]; j < row[i + 1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 4:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    #pragma acc parallel loop copyin(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
    for (int i = 0; i < n; i++) {
        y[i] = 0.0;
        for (int j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 5:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  #pragma acc parallel loop collapse(2)
  for (int i = 0; i < n; i++) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

Code Block 6:
void spmv_parallel(int n, int nnz, float val[], int row[], int col[], float x[], float y[]) {
    int i, j;
    
    #pragma acc parallel loop present(val, row, col, x, y)
    for(i = 0; i < n; i++) {
        y[i] = 0.0;
        for(j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 7:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  
  #pragma acc parallel loop copyin(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
  for (i = 0; i < n; i++) {
    y[i] = 0.0;
    for (j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

Code Block 8:
Code Block 9:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
    int i, j;
    
    #pragma acc parallel loop present(row[0:n+1], col[0:nnz], val[0:nnz], x[0:n], y[0:n]) copyin(n, nnz)
    for (i = 0; i < n; i++) {
        y[i] = 0.0;
        for (j = row[i]; j < row[i+1]; j++) {
            y[i] += val[j] * x[col[j]];
        }
    }
}

Code Block 10:
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  #pragma acc parallel loop copyin(val[0:nnz], row[0:n+1], col[0:nnz], x[0:n]) copyout(y[0:n])
  for (int i = 0; i < n; i++) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

