Code Block 1:
void saxpy(int n, float a, float *x, float *y) {
  int i;
  #pragma acc kernels
  #pragma acc loop independent
  for (i = 0; i < n; i++) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 2:
void saxpy(int n, float a, float *x, float *y) {
  #pragma acc kernels
  for (int i = 0; i < n; i++) {
    y[i] = a * x[i] + y[i];
  }
  #pragma acc end kernels
}

Code Block 3:
void saxpy(int n, float a, float *x, float *y) {
  #pragma acc kernels
  for (int i = 0; i < n; i++) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 4:
void saxpy(int n, float a, float *x, float *y) {
    int i;
    #pragma acc kernels
    #pragma acc loop independent
    for (i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
    #pragma acc end kernels
}

Code Block 5:
void saxpy(int n, float a, float *x, float *y) {
  #pragma acc kernels
  for (int i = 0; i < n; i++) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 6:
void saxpy(int n, float a, float *x, float *y) {
    #pragma acc kernels
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
    #pragma acc end kernels
}

Code Block 7:
void saxpy(const int n, const float a, const float * restrict x, float * restrict y) {
    #pragma acc kernels
    for (int i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
    #pragma acc end kernels
}

Code Block 8:
void saxpy(int n, float a, float *x, float *y) {
  int i;
  #pragma acc kernels
  #pragma acc loop independent
  for (i = 0; i < n; i++) {
    y[i] = a * x[i] + y[i];
  }
}

Code Block 9:
void saxpy(int n, float a, float *x, float *y) {
    int i;
    #pragma acc kernels
    #pragma acc loop independent
    for (i = 0; i < n; i++) {
        y[i] = a * x[i] + y[i];
    }
    #pragma acc end kernels
}

Code Block 10:
void saxpy(int n, float a, float *x, float *y) {
  #pragma acc kernels
  for (int i = 0; i < n; i++) {
    y[i] = a * x[i] + y[i];
  }
}

