Code Block 1:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  int idx;
  float temp;

  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter, idx, temp)
  {
    for (iter = 0; iter < niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 1; k < n - 1; k++) {
        for (j = 1; j < n - 1; j++) {
          for (i = 1; i < n - 1; i++) {
            idx = i + j * n + k * n * n;
            temp = 0.125 * (u[idx - 1] + u[idx + 1] + u[idx - n] + u[idx + n] +
                             u[idx - n * n] + u[idx + n * n] + u[idx]);
            unew[idx] = temp;
          }
        }
      }
      #pragma omp barrier
      #pragma omp for schedule(static)
      for (idx = 0; idx < n * n * n; idx++) {
        u[idx] = unew[idx];
      }
    }
  }
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int idx = i + j * n + k * n * n;

  if (i >= n || j >= n || k >= n) return;

  float temp = 0.125 * (u[idx - 1] + u[idx + 1] + u[idx - n] + u[idx + n] +
                         u[idx - n * n] + u[idx + n * n] + u[idx]);
  unew[idx] = temp;
}

Code Block 2:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + (*u)[i][j-1][k] +
              (*u)[i][j+1][k] + (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            (*u)[i][j][k] = (*unew)[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
      u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
      u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
  }
}

Code Block 3:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                       u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            u[i][j][k] = unew[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
                                               u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] +
                                               u[i * n * n + j * n + (k-1)] + u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 4:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            (*unew)[i][j][k] = 0.125 * ((*u)[i-1][j][k] + (*u)[i+1][j][k] + (*u)[i][j-1][k] +
              (*u)[i][j+1][k] + (*u)[i][j][k-1] + (*u)[i][j][k+1] + (*u)[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      double ***tmp = *u;
      *u = *unew;
      *unew = tmp;
    }
  }
}

__global__ void jacobi_parallel_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  int iter;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[i-1 + j * n + k * n * n] + u[i+1 + j * n + k * n * n] +
        u[i + (j-1) * n + k * n * n] + u[i + (j+1) * n + k * n * n] + u[i + j * n + (k-1) * n * n] +
        u[i + j * n + (k+1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      double *tmp = u;
      u = unew;
      unew = tmp;
    }
  }
}

Code Block 5:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  int idx, idy, idz;
  hipLaunchKernel(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 0; iter < niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125f * (u[(i - 1) + j * n + k * n * n] +
        u[(i + 1) + j * n + k * n * n] + u[i + (j - 1) * n + k * n * n] +
        u[i + (j + 1) * n + k * n * n] + u[i + j * n + (k - 1) * n * n] +
        u[i + j * n + (k + 1) * n * n] + u[i + j * n + k * n * n]);
    }
  }
}

Code Block 6:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
                                       u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            u[i][j][k] = unew[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
                                              u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] +
                                              u[i * n * n + j * n + (k-1)] + u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
    }
  }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + 
                                                    u[(i+1) * n * n + j * n + k] + 
                                                    u[i * n * n + (j-1) * n + k] + 
                                                    u[i * n * n + (j+1) * n + k] + 
                                                    u[i * n * n + j * n + (k-1)] + 
                                                    u[i * n * n + j * n + (k+1)] + 
                                                    u[i * n * n + j * n + k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n * n * n; k++) {
        u[k] = unew[k];
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + 
                                            u[(i+1) * n * n + j * n + k] + 
                                            u[i * n * n + (j-1) * n + k] + 
                                            u[i * n * n + (j+1) * n + k] + 
                                            u[i * n * n + j * n + (k-1)] + 
                                            u[i * n * n + j * n + (k+1)] + 
                                            u[i * n * n + j * n + k]);
  }
}

Code Block 8:
void jacobi_parallel(double ***u, double ***unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
              u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]);
          }
        }
      }
      #pragma omp barrier
      for (k = 0; k < n; k++) {
        for (j = 0; j < n; j++) {
          for (i = 0; i < n; i++) {
            u[i][j][k] = unew[i][j][k];
          }
        }
      }
    }
  }
}

__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] +
      u[(i+1) * n * n + j * n + k] + u[i * n * n + (j-1) * n + k] +
      u[i * n * n + (j+1) * n + k] + u[i * n * n + j * n + (k-1)] +
      u[i * n * n + j * n + (k+1)] + u[i * n * n + j * n + k]);
  }
}

Code Block 9:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  int idx, idy, idz;
  hipLaunchKernel(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  int idy = blockIdx.y * blockDim.y + threadIdx.y;
  int idz = blockIdx.z * blockDim.z + threadIdx.z;
  if (idx >= 2 && idx < n - 1 && idy >= 2 && idy < n - 1 && idz >= 2 && idz < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[idx + idy * n + idz * n * n] = 0.125f * (
        u[(idx - 1) + idy * n + idz * n * n] +
        u[(idx + 1) + idy * n + idz * n * n] +
        u[idx + (idy - 1) * n + idz * n * n] +
        u[idx + (idy + 1) * n + idz * n * n] +
        u[idx + idy * n + (idz - 1) * n * n] +
        u[idx + idy * n + (idz + 1) * n * n] +
        u[idx + idy * n + idz * n * n]
      );
    }
  }
}

Code Block 10:
void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  #pragma omp parallel num_threads(nthreads) private(i, j, k, iter)
  {
    for (iter = 1; iter <= niter; iter++) {
      #pragma omp for schedule(static)
      for (k = 2; k < n - 1; k++) {
        for (j = 2; j < n - 1; j++) {
          for (i = 2; i < n - 1; i++) {
            unew[i + j * n + k * n * n] = 0.125f * (
              u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] +
              u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] +
              u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] +
              u[i + j * n + k * n * n]
            );
          }
        }
      }
      #pragma omp barrier
      float *tmp = u;
      u = unew;
      unew = tmp;
    }
  }
}

