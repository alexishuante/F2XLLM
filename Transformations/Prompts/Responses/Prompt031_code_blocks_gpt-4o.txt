Code Block 1:
void gemv_parallel(int n, float* A, float* x, float* y) {
    int i, j;
    float sum;

#pragma omp parallel for private(j, sum)
    for (i = 0; i < n; i++) {
        sum = 0.0f;
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 2:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    #pragma omp parallel for private(j)
    for (i = 0; i < n; i++) {
        float sum = 0.0;
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    __shared__ float sdata[1024];
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 3:
void gemv_parallel(int n, float *A, float *x, float *y) {
    float *d_A, *d_x, *d_y;
    size_t size_mat = n * n * sizeof(float);
    size_t size_vec = n * sizeof(float);

    // Allocate memory on the device
    cudaMalloc((void**)&d_A, size_mat);
    cudaMalloc((void**)&d_x, size_vec);
    cudaMalloc((void**)&d_y, size_vec);

    // Copy data from host to device
    cudaMemcpy(d_A, A, size_mat, cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, size_vec, cudaMemcpyHostToDevice);

    // Specify block and grid dimensions
    int blockSize = 256;
    int gridSize = (n + blockSize - 1) / blockSize;

    // Launch the kernel
    gemv_kernel<<<gridSize, blockSize>>>(n, d_A, d_x, d_y);

    // Copy result from device to host
    cudaMemcpy(y, d_y, size_vec, cudaMemcpyDeviceToHost);

    // Free device memory
    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 4:
void gemv_parallel(int n, float* A, float* x, float* y) {
    int i, j;
    #pragma omp parallel for private(j)
    for (i = 0; i < n; i++) {
        float sum = 0.0;
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 5:
void gemv_parallel(int n, float A[n][n], float x[n], float y[n]) {
    int i, j;
    float sum;

    // Parallel region
    #pragma omp parallel for private(j, sum)
    for (i = 0; i < n; i++) {
        sum = 0.0f;
        for (j = 0; j < n; j++) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 6:
void gemv_parallel(int n, float A[n][n], float x[n], float y[n]) {
    int i, j;
    float sum;

    #pragma omp parallel for private(j, sum)
    for (i = 0; i < n; ++i) {
        sum = 0.0;
        for (j = 0; j < n; ++j) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; ++j) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 7:
void gemv_parallel(int n, float **A, float *x, float *y) {
    int i, j;
    
    #pragma omp parallel for private(j)
    for (i = 0; i < n; i++) {
        float sum = 0.0;
        for (j = 0; j < n; j++) {
            sum += A[i][j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 8:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;
    #pragma omp parallel for private(j)
    for (i = 0; i < n; i++) {
        float sum = 0.0;
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 9:
void gemv_parallel(int n, float* A, float* x, float* y) {
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_kernel(int n, float* A, float* x, float* y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

Code Block 10:
void gemv_parallel(int n, float *A, float *x, float *y) {
    int i, j;

    #pragma omp parallel for private(j)
    for (i = 0; i < n; i++) {
        float sum = 0.0;
        for (j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

__global__ void gemv_kernel(int n, const float *A, const float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

