Code Block 1:
void jacobi_parallel(double *u, double *unew, int n, int niter)
{
    double *d_u, *d_unew;
    int size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);

    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 blockSize(16, 16, 2);
    dim3 gridSize((n - 2 + blockSize.x - 1) / blockSize.x, (n - 2 + blockSize.y - 1) / blockSize.y, (n - 2 + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        hipMemcpy(d_u, d_unew, size, hipMemcpyDeviceToDevice);
    }

    hipMemcpy(unew, d_unew, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_parallel_kernel(double *u, double *unew, int n)
{
    int i = blockIdx.x * blockDim.x + threadIdx.x + 1;
    int j = blockIdx.y * blockDim.y + threadIdx.y + 1;
    int k = blockIdx.z * blockDim.z + threadIdx.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        int index = i + j * n + k * n * n;
        unew[index] = 0.125 * (u[index - n] + u[index + n] + u[index - n * n] +
                              u[index + n * n] + u[index - 1] + u[index + 1] + u[index]);
    }
}

Code Block 2:
void jacobi_parallel(double* u, double* unew, int n, int niter) {
    int i, j, k, iter;

    for(iter = 0; iter < niter; iter++) {
        for(k = 1; k < n - 1; k++) {
            for(j = 1; j < n - 1; j++) {
                for(i = 1; i < n - 1; i++) {
                    int idx = i + j*n + k*n*n;
                    unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - n*n] +
                                         u[idx + n*n] + u[idx - n*n*n] + u[idx + n*n*n] + u[idx]);
                }
            }
        }
        
        hipLaunchKernelGGL([=] __global__ (double* u, double* unew, int n){
            int i = hipThreadIdx_x + 1;
            int j = hipThreadIdx_y + 1;
            int k = hipThreadIdx_z + 1;
            int idx = i + j*n + k*n*n;
            unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - n*n] +
                                 u[idx + n*n] + u[idx - n*n*n] + u[idx + n*n*n] + u[idx]);
        }, dim3(n-2, n-2, n-2), 0, 0, u, unew, n);
        
        hipDeviceSynchronize();
        
        for(int idx = 0; idx < n*n*n; idx++) {
            u[idx] = unew[idx];
        }
    }
}

Code Block 3:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;
    size_t size = n * n * n * sizeof(double);

    hipMalloc(&d_u, size);
    hipMalloc(&d_unew, size);
    
    hipMemcpy(d_u, u, size, hipMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y, (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        
        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, size, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_parallel_kernel(double *u, double *unew, int n) {
    int i = threadIdx.x + blockIdx.x * blockDim.x + 1;
    int j = threadIdx.y + blockIdx.y * blockDim.y + 1;
    int k = threadIdx.z + blockIdx.z * blockDim.z + 1;

    if (i < n - 1 && j < n - 1 && k < n - 1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                         u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                         u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
    }
}

Code Block 4:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    for(iter = 0; iter < niter; iter++) {
        for(k = 1; k < n - 1; k++) {
            for(j = 1; j < n - 1; j++) {
                for(i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                      u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                      u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        for(int index = 0; index < n*n*n; index++) {
            u[index] = unew[index];
        }
    }
}

Code Block 5:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    for (int iter = 0; iter < niter; iter++) {
        for (int k = 1; k < n - 1; k++) {
            for (int j = 1; j < n - 1; j++) {
                for (int i = 1; i < n - 1; i++) {
                    int index = i + j * n + k * n * n;
                    unew[index] = 0.125 * (u[index - n] + u[index + n] + u[index - n * n] +
                                           u[index + n * n] + u[index - 1] + u[index + 1] +
                                           u[index]);
                }
            }
        }
        for (int i = 0; i < n * n * n; i++) {
            u[i] = unew[i];
        }
    }
}

Code Block 6:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    for (int iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL([=] HIP_KERNEL(i, j, k) {
            if (i >= 1 && i < n-1 && j >= 1 && j < n-1 && k >= 1 && k < n-1) {
                int index = i + j*n + k*n*n;
                unew[index] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                                      u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[index]);
            }
        }, dim3(n, n, n), dim3(1, 1, 1), 0, 0, u, unew, n, niter);
        
        hipMemcpy(u, unew, n*n*n*sizeof(double), hipMemcpyDeviceToDevice);
    }
}

Code Block 7:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    for (iter = 0; iter < niter; iter++) {
        hipLaunchKernelGGL([=] HIP_KERNEL() {
            int i = hipBlockIdx_x * hipBlockDim_x + hipThreadIdx_x;
            int j = hipBlockIdx_y * hipBlockDim_y + hipThreadIdx_y;
            int k = hipBlockIdx_z * hipBlockDim_z + hipThreadIdx_z;

            if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
                unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                  u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                  u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
            }
        }, dim3(n / 8, n / 8, n / 8), dim3(8, 8, 8), 0, 0, NULL);
        
        hipDeviceSynchronize();

        // Copy unew back to u
        hipMemcpy(u, unew, n * n * n * sizeof(double), hipMemcpyDeviceToDevice);
    }
}

Code Block 8:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;

    for(iter = 0; iter < niter; iter++) {
        #pragma acc parallel loop collapse(3) present(u[:n*n*n], unew[:n*n*n])
        for(k = 1; k < n - 1; k++) {
            for(j = 1; j < n - 1; j++) {
                for(i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] + u[i + (j-1)*n + k*n*n] +
                                                      u[i + (j+1)*n + k*n*n] + u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }

        for(i = 0; i < n*n*n; i++) {
            u[i] = unew[i];
        }
    }
}

Code Block 9:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    double *d_u, *d_unew;

    hipMalloc((void **)&d_u, sizeof(double) * n * n * n);
    hipMalloc((void **)&d_unew, sizeof(double) * n * n * n);

    hipMemcpy(d_u, u, sizeof(double) * n * n * n, hipMemcpyHostToDevice);

    dim3 blockSize(8, 8, 8);
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (n + blockSize.y - 1) / blockSize.y,
                  (n + blockSize.z - 1) / blockSize.z);

    for (int iter = 0; iter < niter; iter++) {
        jacobi_parallel_kernel<<<gridSize, blockSize>>>(d_u, d_unew, n);
        hipDeviceSynchronize();

        double *temp = d_u;
        d_u = d_unew;
        d_unew = temp;
    }

    hipMemcpy(u, d_u, sizeof(double) * n * n * n, hipMemcpyDeviceToHost);

    hipFree(d_u);
    hipFree(d_unew);
}

__global__ void jacobi_parallel_kernel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        int idx = i + j * n + k * n * n;
        unew[idx] = 0.125 * (u[idx - n] + u[idx + n] + u[idx - 1] +
                             u[idx + 1] + u[idx - n * n] + u[idx + n * n] + u[idx]);
    }
}

Code Block 10:
void jacobi_parallel(double *u, double *unew, int n, int niter) {
    int i, j, k, iter;
    for (iter = 0; iter < niter; iter++) {
        for (k = 1; k < n - 1; k++) {
            for (j = 1; j < n - 1; j++) {
                for (i = 1; i < n - 1; i++) {
                    unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                                     u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                                     u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
                }
            }
        }
        for (int idx = 0; idx < n*n*n; idx++) {
            u[idx] = unew[idx];
        }
    }
}

__global__ void jacobi_parallel(double *u, double *unew, int n) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int k = blockIdx.z * blockDim.z + threadIdx.z;

    if (i >= 1 && i < n - 1 && j >= 1 && j < n - 1 && k >= 1 && k < n - 1) {
        unew[i + j*n + k*n*n] = 0.125 * (u[(i-1) + j*n + k*n*n] + u[(i+1) + j*n + k*n*n] +
                                         u[i + (j-1)*n + k*n*n] + u[i + (j+1)*n + k*n*n] +
                                         u[i + j*n + (k-1)*n*n] + u[i + j*n + (k+1)*n*n] + u[i + j*n + k*n*n]);
    }
}

