--------------- Output 1 ---------------
Here is a possible implementation of the GEMM operation in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* A, const int lda, 
                   const double* B, const int ldb, 
                   const double beta, double* C, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
                                             Kokkos::Iterate::Thread(), 
                                             Kokkos::ArgIndex<2>(), 
                                             [=](const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += A[i * lda + l] * B[l * ldb + j];
    }
    C[i * ldc + j] = alpha * temp + beta * C[i * ldc + j];
  });
}
Note that this implementation assumes a default execution space and memory space for the Kokkos arrays. You may need to customize this depending on your specific use case. Additionally, error checking and other features may be necessary for a production-ready implementation.
Also, please note that Kokkos provides a lot of flexibility in terms of execution spaces, memory spaces, and memory layouts, so you may want to explore those options to optimize your implementation for your specific use case.

--------------- Output 2 ---------------
Here is a possible implementation of the GEMM operation in C++ with Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* A, const int lda, 
                   const double* B, const int ldb, 
                   const double beta, double* C, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}),
                       KOKKOS_LAMBDA(const int i, const int j) {
                         double temp = 0.0;
                         for (int l = 0; l < k; l++) {
                           temp += A[i + l * lda] * B[l + j * ldb];
                         }
                         C[i + j * ldc] = alpha * temp + beta * C[i + j * ldc];
                       });
}
Note that this implementation assumes that the input matrices A, B, and C are stored in row-major order, which is the default for Kokkos. If your matrices are stored in column-major order, you will need to adjust the indexing accordingly.
Also, this implementation uses the Kokkos::parallel_for construct to parallelize the loop over i and j, and the Kokkos::MDRangePolicy class to specify the range of the loop. The KOKKOS_LAMBDA macro is used to define a lambda function that performs the computation for each iteration of the loop.
You can adjust the parallelization strategy and other options to suit your specific needs.

--------------- Output 3 ---------------
Here is the equivalent function in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}}, {{m, n}}),
    KOKKOS_LAMBDA(const int i, const int j) {
      double temp = 0.0;
      for (int l = 0; l < k; ++l) {
        temp += a[i + l * lda] * b[l + j * ldb];
      }
      c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
    });
}
Note that in Kokkos, we use Kokkos::parallel_for to create a parallel loop, and Kokkos::MDRangePolicy to specify the range of the loop. The lambda function is executed for each iteration of the loop. Also, we use KOKKOS_LAMBDA to define the lambda function.
Also, note that in C++ we use const to specify that the variables are not modified, and we use const int to specify that the integers are constant.
Please note that you need to have a Kokkos configuration that matches your hardware, and also that you need to link against the Kokkos library.

--------------- Output 4 ---------------
Here is the equivalent function implemented in C++ with Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}), 
  [=](const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}
Note that Kokkos uses a more modern C++ style, with lambda functions and templates, to achieve parallelism. The Kokkos::parallel_for construct replaces the !$ACC PARALLEL LOOP directive, and the lambda function replaces the loop body. The Kokkos::MDRangePolicy class specifies the iteration range and the rank of the loop (in this case, a 2D loop).

--------------- Output 5 ---------------
Here is a possible implementation of the GEMM operation using C++ with Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}), KOKKOS_LAMBDA(int i, int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += a[i * lda + l] * b[l * ldb + j];
    }
    c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
  });
}
Note that this implementation uses the Kokkos parallel_for construct with an MDRangePolicy to parallelize the loop over the matrix indices i and j. The KOKKOS_LAMBDA macro is used to define the lambda function that performs the computation for each iteration of the loop.
Also, the a, b, and c arrays are assumed to be stored in row-major order, as is typical in C++. If your Fortran code uses column-major order, you may need to adjust the indexing accordingly.
You can compile this code with a Kokkos-enabled C++ compiler, such as nvcc or clang++, and link it with the Kokkos library. For example:
nvcc -std=c++11 -o gemm_parallel gemm_parallel.cpp -lkokkos
This will generate an executable file gemm_parallel that you can run on your system.

--------------- Output 6 ---------------
Here is a possible implementation of the GEMM operation using C++ with Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* A, const int lda, 
                   const double* B, const int ldb, 
                   const double beta, double* C, const int ldc) {
  Kokkos::parallel_nd(Kokkos::RangePolicy<>(0, m), Kokkos::RangePolicy<>(0, n), 
                      KOKKOS_LAMBDA(const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; l++) {
      temp += A[i * lda + l] * B[l * ldb + j];
    }
    C[i * ldc + j] = alpha * temp + beta * C[i * ldc + j];
  });
}
Note that this implementation assumes that the input matrices A, B, and C are stored in row-major order, and that the lda, ldb, and ldc parameters specify the leading dimensions of the matrices. Also, the Kokkos::parallel_nd construct is used to parallelize the loop over i and j, and the KOKKOS_LAMBDA macro is used to define a lambda function that performs the GEMM operation for a given pair of indices i and j.
Please note that you need to have a Kokkos compiler wrapper to compile this code, and also you need to link against the Kokkos library.

--------------- Output 7 ---------------
Here is the equivalent function in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_nd(Kokkos::RangePolicy<>(0, m), Kokkos::RangePolicy<>(0, n), 
                      KOKKOS_LAMBDA(const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}
Note that in Kokkos, we use Kokkos::parallel_nd to create a 2D parallel loop, and KOKKOS_LAMBDA to define the loop body. The loop variables i and j are declared as const int to match the Fortran intent. The array indexing is adjusted to match C++ conventions.

--------------- Output 8 ---------------
Here is a possible implementation of the GEMM operation in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
                                             Kokkos::IndexType(),
                                             Kokkos::SizeType()),
                       KOKKOS_LAMBDA(const int i, const int j) {
                         double temp = 0.0;
                         for (int l = 0; l < k; l++) {
                           temp += a[i + l * lda] * b[l + j * ldb];
                         }
                         c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
                       });
}
Note that this implementation assumes a row-major storage layout, similar to the Fortran implementation. Also, the Kokkos::MDRangePolicy is used to parallelize the loop over the elements of the matrix c, and the Kokkos::IndexType and Kokkos::SizeType are used to specify the type of the loop indices and the range of the loop, respectively.
You can adjust the layout and the data types according to your specific needs.

--------------- Output 9 ---------------
Here is the equivalent function in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}),
                       KOKKOS_LAMBDA(const int i, const int j) {
                         double temp = 0.0;
                         for (int l = 0; l < k; ++l) {
                           temp += a[i + l * lda] * b[l + j * ldb];
                         }
                         c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
                       });
}
Note that in Kokkos, we use Kokkos::parallel_for to create a parallel loop, and Kokkos::MDRangePolicy to specify the range of the loop. The lambda function is executed in parallel for each iteration of the loop. Also, note that array indexing is done manually, as Kokkos does not provide a built-in matrix class.

--------------- Output 10 ---------------
Here is the equivalent function in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
                                             Kokkos::IndexType()(0), 
                                             Kokkos::IndexType()(0)), 
                       KOKKOS_LAMBDA(const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; l++) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}
Note that Kokkos uses a more expressive syntax than OpenACC, and the parallelization is defined using the Kokkos::parallel_for construct. The lambda function passed to parallel_for defines the computation to be performed for each element of the output matrix. The Kokkos::MDRangePolicy defines the iteration space and the parallelization strategy.

