--------------- Output 1 ---------------
Here is the equivalent C++ function using Kokkos:
#include <Kokkos_Core.hpp>

void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::parallel_for(
    Kokkos::MDRangePolicy<Kokkos::Rank<3>>({0, 0, 0}, {niter, n, n}),
    KOKKOS_LAMBDA(const int iter, const int k, const int j, const int i) {
      if (iter > 0 && k > 1 && k < n - 1 && j > 1 && j < n - 1 && i > 1 && i < n - 1) {
        unew(i, j, k) = 0.125 * (
          u(i - 1, j, k) + u(i + 1, j, k) + u(i, j - 1, k) +
          u(i, j + 1, k) + u(i, j, k - 1) + u(i, j, k + 1) + u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}
Note that Kokkos uses a more expressive syntax for parallelization, and the loop bounds are handled by the Kokkos::MDRangePolicy class. Additionally, Kokkos uses View objects to represent multidimensional arrays, and the LayoutRight trait specifies the memory layout.

--------------- Output 2 ---------------
Here is the equivalent function in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::parallel_for(
    Kokkos::MDRangePolicy<Kokkos::Rank<3>>({0, 0, 0}, {niter, n, n}),
    KOKKOS_LAMBDA(const int iter, const int k, const int j, const int i) {
      if (iter > 0 && k > 1 && k < n - 1 && j > 1 && j < n - 1 && i > 1 && i < n - 1) {
        unew(i, j, k) = 0.125 * (
          u(i - 1, j, k) + u(i + 1, j, k) + u(i, j - 1, k) +
          u(i, j + 1, k) + u(i, j, k - 1) + u(i, j, k + 1) + u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}
Note that Kokkos uses a more expressive syntax than OpenACC, and the loop bounds are handled differently. Additionally, Kokkos requires explicit memory layout specification, which is done using Kokkos::LayoutRight in this case.

--------------- Output 3 ---------------
Here is the equivalent function implemented in C++ with Kokkos:
#include <Kokkos_Core.hpp>

void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::ParallelFor(
    Kokkos::MDRangePolicy(Kokkos::Rank(3), Kokkos::Index(0), Kokkos::Index(2), Kokkos::Index(2), Kokkos::Index(n-1), Kokkos::Index(n-1), Kokkos::Index(n-1)),
    KOKKOS_LAMBDA(const int i, const int j, const int k) {
      unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) + u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
    }
  );

  for (int iter = 1; iter <= niter; ++iter) {
    Kokkos::deep_copy(u, unew);
  }
}
Note that in Kokkos, we use Kokkos::View to represent a multidimensional array, and Kokkos::ParallelFor to parallelize the loop. The KOKKOS_LAMBDA macro is used to define a lambda function that performs the computation. Also, we use Kokkos::MDRangePolicy to specify the iteration space and the parallelization strategy.
You can call this function by creating Kokkos::View objects for u and unew, and passing them to the function, along with the values of n and niter.

--------------- Output 4 ---------------
Here is the equivalent function in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void jacobi_parallel(
  const int& n,
  const int& niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::parallel_for(
    Kokkos::MDRangePolicy<Kokkos::Rank<3>>({0, 0, 0}, {niter, n, n}),
    KOKKOS_LAMBDA(const int& iter, const int& i, const int& j, const int& k) {
      if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        unew(i, j, k) = 0.125 * (
          u(i - 1, j, k) + u(i + 1, j, k) + u(i, j - 1, k) +
          u(i, j + 1, k) + u(i, j, k - 1) + u(i, j, k + 1) + u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}
Note that in Kokkos, we use Kokkos::View to represent a multidimensional array, and Kokkos::parallel_for to parallelize the loop. The KOKKOS_LAMBDA macro is used to define a lambda function that will be executed in parallel. The Kokkos::MDRangePolicy is used to specify the range of the parallel loop.
Also, note that in C++ we need to explicitly specify the layout of the multidimensional array as Kokkos::LayoutRight, which corresponds to the Fortran column-major layout.
You can call this function by creating Kokkos views for u and unew and passing them to the function, like this:
int n = 100;
int niter = 100;
Kokkos::View<double***, Kokkos::LayoutRight> u("u", n, n, n);
Kokkos::View<double***, Kokkos::LayoutRight> unew("unew", n, n, n);
jacobi_parallel(n, niter, u, unew);

--------------- Output 5 ---------------
Here is a possible implementation of the Jacobi operation in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::ParallelFor(
    Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
    KOKKOS_LAMBDA(const int i, const int j, const int k) {
      for (int iter = 0; iter < niter; ++iter) {
        unew(i, j, k) = 0.125 * (
          u(i-1, j, k) + u(i+1, j, k) +
          u(i, j-1, k) + u(i, j+1, k) +
          u(i, j, k-1) + u(i, j, k+1) +
          u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}
Note that this implementation assumes that the u and unew arrays are already allocated and initialized. Also, the Kokkos::LayoutRight layout is used to match the Fortran column-major ordering.
You can call this function using the following code:
int main() {
  const int n = 100;
  const int niter = 100;
  Kokkos::View<double***, Kokkos::LayoutRight> u("u", n, n, n);
  Kokkos::View<double***, Kokkos::LayoutRight> unew("unew", n, n, n);

  // Initialize u and unew here

  jacobi_parallel(n, niter, u, unew);

  return 0;
}
This code will perform the Jacobi operation using Kokkos, and the result will be stored in the u array.

--------------- Output 6 ---------------
Here is the equivalent function in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void jacobi_parallel(
  const int& n,
  const int& niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::ParallelFor(
    Kokkos::RangePolicy<>(0, niter),
    KOKKOS_LAMBDA(const int& iter) {
      Kokkos::parallel_for(
        Kokkos::MDRangePolicy<>({0, 0, 0}, {n, n, n}, {2, 2, 2}),
        KOKKOS_LAMBDA(const int& i, const int& j, const int& k) {
          unew(i, j, k) = 0.125 * (
            u(i-1, j, k) + u(i+1, j, k) +
            u(i, j-1, k) + u(i, j+1, k) +
            u(i, j, k-1) + u(i, j, k+1) + u(i, j, k)
          );
        }
      );
      Kokkos::deep_copy(u, unew);
    }
  );
}
Note that in Kokkos, we use Kokkos::View to represent a multidimensional array, and Kokkos::ParallelFor and Kokkos::parallel_for to represent parallel loops. The KOKKOS_LAMBDA macro is used to define a lambda function that will be executed in parallel. The Kokkos::MDRangePolicy is used to define a multidimensional range policy for the parallel loop.
Also, note that the deep_copy function is used to copy the data from unew to u after each iteration, similar to the u(:, :, :) = unew(:, :, :) statement in the Fortran code.

--------------- Output 7 ---------------
Here is a possible implementation of the Jacobi operation in C++ using Kokkos:
#include <Kokkos_Core.hpp>

void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::parallel_for(
    Kokkos::MDRangePolicy(Kokkos::MDRangeTypes{n, n, n}, {2, 2, 2}, {n-1, n-1, n-1}),
    KOKKOS_LAMBDA(const int i, const int j, const int k, const int iter) {
      if (iter < niter) {
        unew(i, j, k) = 0.125 * (
          u(i-1, j, k) + u(i+1, j, k) +
          u(i, j-1, k) + u(i, j+1, k) +
          u(i, j, k-1) + u(i, j, k+1) +
          u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}
Note that this implementation assumes that the u and unew views are already allocated and initialized. Also, the Kokkos::MDRangePolicy is used to define a 3D iteration space, and the KOKKOS_LAMBDA macro is used to define a lambda function that performs the Jacobi operation. The Kokkos::parallel_for call is used to execute the lambda function in parallel.
You can call this function by creating Kokkos views for u and unew and passing them to the function, like this:
int main() {
  const int n = 100;
  const int niter = 100;
  Kokkos::View<double***, Kokkos::LayoutRight> u("u", n, n, n);
  Kokkos::View<double***, Kokkos::LayoutRight> unew("unew", n, n, n);
  // Initialize u and unew
  jacobi_parallel(n, niter, u, unew);
  return 0;
}
This code assumes that you have already initialized the u and unew views with the appropriate values.

--------------- Output 8 ---------------
Here is a possible implementation of the Jacobi operation in C++ with Kokkos:
#include <Kokkos_Core.hpp>

void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::parallel_for(
    Kokkos::MDRangePolicy(Kokkos::Rank(3), {0, 0, 0}, {niter, n, n}),
    KOKKOS_LAMBDA(const int iter, const int k, const int j, const int i) {
      if (k > 1 && k < n - 1 && j > 1 && j < n - 1 && i > 1 && i < n - 1) {
        unew(i, j, k) = 0.125 * (
          u(i - 1, j, k) + u(i + 1, j, k) + u(i, j - 1, k) +
          u(i, j + 1, k) + u(i, j, k - 1) + u(i, j, k + 1) + u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}
Note that this implementation uses the Kokkos::View class to represent the 3D arrays u and unew, and the Kokkos::parallel_for function to parallelize the loop. The Kokkos::MDRangePolicy class is used to specify the range of the loop, and the KOKKOS_LAMBDA macro is used to define the lambda function that will be executed in parallel.
Also, the boundary conditions are handled by the if statement inside the lambda function, which checks if the current index is within the valid range.
You can call this function by creating Kokkos views for u and unew and passing them to the function, like this:
int n = 100;
int niter = 100;
Kokkos::View<double***, Kokkos::LayoutRight> u("u", n, n, n);
Kokkos::View<double***, Kokkos::LayoutRight> unew("unew", n, n, n);

// Initialize u and unew here

jacobi_parallel(n, niter, u, unew);
This will compute the Jacobi operation in parallel using Kokkos.

--------------- Output 9 ---------------
Here is the equivalent function implemented in C++ with Kokkos:
#include <Kokkos_Core.hpp>

void jacobi_parallel(
  const int n, 
  const int niter, 
  Kokkos::View<double***, Kokkos::LayoutRight> u, 
  Kokkos::View<double***, Kokkos::LayoutRight> unew) {
  Kokkos::ParallelFor(
    Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n - 1, n - 1, n - 1}),
    KOKKOS_LAMBDA(const int i, const int j, const int k) {
      unew(i, j, k) = 0.125 * (
        u(i - 1, j, k) + u(i + 1, j, k) + 
        u(i, j - 1, k) + u(i, j + 1, k) + 
        u(i, j, k - 1) + u(i, j, k + 1) + 
        u(i, j, k));
    });
  Kokkos::deep_copy(u, unew);
}
Note that in C++ with Kokkos, we use Kokkos::View to represent a multidimensional array, and Kokkos::ParallelFor to parallelize the loop. The Kokkos::MDRangePolicy is used to specify the range of the loop, and the KOKKOS_LAMBDA macro is used to define the lambda function that will be executed in parallel.
Also, note that the deep_copy function is used to copy the data from unew back to u after the parallel loop, similar to the u(:, :, :) = unew(:, :, :) statement in the Fortran code.

--------------- Output 10 ---------------
Here is the equivalent C++ function using Kokkos:
#include <Kokkos_Core.hpp>

void jacobi_parallel(
  const int n, 
  const int niter, 
  Kokkos::View<double***, Kokkos::LayoutRight> u, 
  Kokkos::View<double***, Kokkos::LayoutRight> unew) {
  Kokkos::ParallelFor(
    Kokkos::RangePolicy(Kokkos::Rank<3>({{0, n}, {0, n}, {0, niter}}),
    KOKKOS_LAMBDA(const int i, const int j, const int k) {
      if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        unew(i, j, k) = 0.125 * (u(i - 1, j, k) + u(i + 1, j, k) + 
                                 u(i, j - 1, k) + u(i, j + 1, k) + 
                                 u(i, j, k - 1) + u(i, j, k + 1) + 
                                 u(i, j, k));
      }
    });
  Kokkos::deep_copy(u, unew);
}
Note that the Kokkos::View is used to represent a multidimensional array, and the Kokkos::ParallelFor is used to parallelize the loop. The KOKKOS_LAMBDA is used to define the kernel function that will be executed in parallel. The Kokkos::RangePolicy is used to specify the range of the loop.
Also, note that the boundary conditions are handled in the kernel function by checking if the indices are within the valid range.
You can call this function by creating Kokkos views for u and unew and passing them to the function, like this:
int n = 100;
int niter = 10;
Kokkos::View<double***, Kokkos::LayoutRight> u("u", n, n, n);
Kokkos::View<double***, Kokkos::LayoutRight> unew("unew", n, n, n);

// Initialize u and unew

jacobi_parallel(n, niter, u, unew);
This will compute the Jacobi operation in parallel using Kokkos.

