--------------- Code Block 1 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;

    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));

    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);

    gemv_kernel<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);

    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

--------------- Code Block 2 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_dev, *x_dev, *y_dev;
    cudaMalloc((void **)&A_dev, n * n * sizeof(float));
    cudaMalloc((void **)&x_dev, n * sizeof(float));
    cudaMalloc((void **)&y_dev, n * sizeof(float));
    cudaMemcpy(A_dev, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_dev, x, n * sizeof(float), cudaMemcpyHostToDevice);
    gemv_kernel<<<numBlocks, blockSize>>>(n, A_dev, x_dev, y_dev);
    cudaMemcpy(y, y_dev, n * sizeof(float), cudaMemcpyDeviceToHost);
    cudaFree(A_dev);
    cudaFree(x_dev);
    cudaFree(y_dev);
}

--------------- Code Block 3 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    gemv_kernel<<<numBlocks, blockSize>>>(n, A, x, y);
    cudaDeviceSynchronize();
}

--------------- Code Block 4 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;
    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));
    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);
    gemv_kernel<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);
    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);
    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

--------------- Code Block 5 ---------------
void gemv_parallel(int n, float *A, float *x, float *y) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  if (idx < n) {
    float sum = 0.0;
    for (int j = 0; j < n; j++) {
      sum += A[idx * n + j] * x[j];
    }
    y[idx] = sum;
  }
}

--------------- Code Block 6 ---------------
__global__ void gemv_cuda(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;

    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));

    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);

    gemv_cuda<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);

    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

--------------- Code Block 7 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;
    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));
    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);
    gemv_kernel<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);
    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);
    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

--------------- Code Block 8 ---------------
__global__ void gemv_cuda(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_cuda, *x_cuda, *y_cuda;

    cudaMalloc((void **)&A_cuda, n * n * sizeof(float));
    cudaMalloc((void **)&x_cuda, n * sizeof(float));
    cudaMalloc((void **)&y_cuda, n * sizeof(float));

    cudaMemcpy(A_cuda, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_cuda, x, n * sizeof(float), cudaMemcpyHostToDevice);

    gemv_cuda<<<numBlocks, blockSize>>>(n, A_cuda, x_cuda, y_cuda);

    cudaMemcpy(y, y_cuda, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(A_cuda);
    cudaFree(x_cuda);
    cudaFree(y_cuda);
}

--------------- Code Block 9 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;

    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));

    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);

    gemv_kernel<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);

    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

--------------- Code Block 10 ---------------
__global__ void gemv_cuda(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_cuda, *x_cuda, *y_cuda;

    cudaMalloc((void **)&A_cuda, n * n * sizeof(float));
    cudaMalloc((void **)&x_cuda, n * sizeof(float));
    cudaMalloc((void **)&y_cuda, n * sizeof(float));

    cudaMemcpy(A_cuda, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_cuda, x, n * sizeof(float), cudaMemcpyHostToDevice);

    gemv_cuda<<<numBlocks, blockSize>>>(n, A_cuda, x_cuda, y_cuda);

    cudaMemcpy(y, y_cuda, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(A_cuda);
    cudaFree(x_cuda);
    cudaFree(y_cuda);
}

