--------------- Code Block 1 ---------------
__global__ void saxpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy_host(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    saxpy<<<numBlocks, blockSize>>>(n, a, x, y);
    cudaDeviceSynchronize();
}

--------------- Code Block 2 ---------------
__global__ void saxpyKernel(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    saxpyKernel<<<numBlocks, blockSize>>>(n, a, x, y);
    cudaDeviceSynchronize();
}

--------------- Code Block 3 ---------------
__global__ void saxpy(int n, float a, float *x, float *y) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
        y[idx] = a * x[idx] + y[idx];
    }
}

void saxpy_host(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    saxpy<<<numBlocks, blockSize>>>(n, a, x, y);
}

--------------- Code Block 4 ---------------
__global__ void saxpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy_host(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    saxpy<<<numBlocks, blockSize>>>(n, a, x, y);
    cudaDeviceSynchronize();
}

--------------- Code Block 5 ---------------
__global__ void saxpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy_cuda(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    saxpy<<<numBlocks, blockSize>>>(n, a, x, y);
    cudaDeviceSynchronize();
}

--------------- Code Block 6 ---------------
__global__ void saxpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy_host(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    saxpy<<<numBlocks, blockSize>>>(n, a, x, y);
    cudaDeviceSynchronize();
}

--------------- Code Block 7 ---------------
__global__ void saxpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy_host(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    saxpy<<<numBlocks, blockSize>>>(n, a, x, y);
    cudaDeviceSynchronize();
}

--------------- Code Block 8 ---------------
__global__ void saxpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy_wrapper(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    saxpy<<<numBlocks, blockSize>>>(n, a, x, y);
    cudaDeviceSynchronize();
}

--------------- Code Block 9 ---------------
__global__ void saxpy(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy_wrapper(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    saxpy<<<numBlocks, blockSize>>>(n, a, x, y);
    cudaDeviceSynchronize();
}

--------------- Code Block 10 ---------------
__global__ void saxpy(int n, float a, float *x, float *y) {
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx < n) {
        y[idx] = a * x[idx] + y[idx];
    }
}

void saxpy_wrapper(int n, float a, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    saxpy<<<numBlocks, blockSize>>>(n, a, x, y);
    cudaDeviceSynchronize();
}

