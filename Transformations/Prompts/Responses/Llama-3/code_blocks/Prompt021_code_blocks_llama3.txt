--------------- Code Block 1 ---------------
__global__ void GLOBAL_KERNEL(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

void saxpy_parallel(int n, float a, float *x, float *y) {
  int i;
  hipLaunchKernel(GLOBAL_KERNEL, dim3(n), dim3(1), 0, 0, n, a, x, y);
}

--------------- Code Block 2 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

void saxpy_parallel(int n, float a, float *x, float *y) {
  int i;
  hipLaunchKernel(GLOBAL_SIZE, BLOCK_SIZE, 0, 0, saxpy_kernel, n, a, x, y);
}

--------------- Code Block 3 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

void saxpy_parallel(int n, float a, float *x, float *y) {
  int i;
  hipLaunchKernel(GLOBAL_SIZE, BLOCK_SIZE, 0, 0, nullptr, saxpy_kernel, n, a, x, y);
}

--------------- Code Block 4 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

void saxpy_parallel(int n, float a, float *x, float *y) {
  int i;
  hipLaunchKernel(GLOBAL_SIZE, BLOCK_SIZE, 0, 0, saxpy_kernel, n, a, x, y);
}

--------------- Code Block 5 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

void saxpy_parallel(int n, float a, float *x, float *y) {
  int i;
  hipLaunchKernel(GLOBAL_SIZE, BLOCK_SIZE, 0, 0, saxpy_kernel, n, a, x, y);
}

--------------- Code Block 6 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        y[i] = a * x[i] + y[i];
    }
}

void saxpy_parallel(int n, float a, float *x, float *y) {
    int i;
    hipLaunchKernel(GLOBAL_SIZE, BLOCK_SIZE, 0, 0, saxpy_kernel, n, a, x, y);
}

--------------- Code Block 7 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

void saxpy_parallel(int n, float a, float *x, float *y) {
  int i;
  hipLaunchKernel(GLOBAL_SIZE, BLOCK_SIZE, 0, 0, saxpy_kernel, n, a, x, y);
}

--------------- Code Block 8 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

void saxpy_parallel(int n, float a, float *x, float *y) {
  int i;
  hipLaunchKernelGGL(HIP_KERNEL_NAME(saxpy_kernel), dim3(n), dim3(1), 0, 0, n, a, x, y);
}

--------------- Code Block 9 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

void saxpy_parallel(int n, float a, float *x, float *y) {
  int i;
  hipLaunchKernel(HIP_KERNEL_NAME(saxpy_kernel), dim3(n), dim3(1), 0, 0, n, a, x, y);
}

--------------- Code Block 10 ---------------
__global__ void saxpy_kernel(int n, float a, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = a * x[i] + y[i];
  }
}

void saxpy_parallel(int n, float a, float *x, float *y) {
  int i;
  hipLaunchKernel(GLOBAL_SIZE, BLOCK_SIZE, 0, 0, saxpy_kernel, n, a, x, y);
}

