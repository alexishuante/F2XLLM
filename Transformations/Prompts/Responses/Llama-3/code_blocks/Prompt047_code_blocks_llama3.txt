--------------- Code Block 1 ---------------
void jacobi_parallel(
  const int& n,
  const int& niter,
  const int& num_threads,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::parallel_for(
    Kokkos::Policy(num_threads, Kokkos::AUTO_CHUNK),
    KOKKOS_LAMBDA(const int& iter) {
      for (int k = 2; k < n - 1; k++) {
        for (int j = 2; j < n - 1; j++) {
          for (int i = 2; i < n - 1; i++) {
            unew(i, j, k) = 0.125 * (
              u(i - 1, j, k) + u(i + 1, j, k) + u(i, j - 1, k) +
              u(i, j + 1, k) + u(i, j, k - 1) + u(i, j, k + 1) + u(i, j, k)
            );
          }
        }
      }
      Kokkos::deep_copy(u, unew);
    },
    niter
  );
}

--------------- Code Block 2 ---------------
void jacobi_parallel(
  const int n, 
  const int niter, 
  const int nthreads, 
  double*** u, 
  double*** unew
) {
  Kokkos::parallel_for(
    Kokkos::RangePolicy<>(0, niter), 
    KOKKOS_LAMBDA(const int& iter) {
      Kokkos::parallel_for(
        Kokkos::MDRangePolicy<>({2, 2, 2}, {n-1, n-1, n-1}), 
        KOKKOS_LAMBDA(const int& k, const int& j, const int& i) {
          unew[i][j][k] = 0.125 * (
            u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] + 
            u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]
          );
        }
      );
      Kokkos::deep_copy(u, unew);
    }, 
    "Jacobi Parallel"
  );
}

--------------- Code Block 3 ---------------
void jacobi_parallel(Kokkos::View<double***, Kokkos::LayoutRight> u, 
                     Kokkos::View<double***, Kokkos::LayoutRight> unew, 
                     int n, int niter, int nthreads) {
  Kokkos::parallel_for(niter, Kokkos::RangePolicy<>(0, niter), 
    [&](int iter) {
      Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}), 
        Kokkos::Lambda<int, int, int, int> 
        ([&, u, unew](int i, int j, int k) {
          unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i,j-1, k) +
                                     u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
        }));
      Kokkos::fence();
      Kokkos::deep_copy(u, unew);
    });
}

--------------- Code Block 4 ---------------
void jacobi_parallel(
  const int n, 
  const int niter, 
  const int nthreads, 
  double*** u, 
  double*** unew) {

  Kokkos::parallel_for(
    Kokkos::RangePolicy<>(0, niter), 
    KOKKOS_LAMBDA(const int& iter) {
      Kokkos::parallel_for(
        Kokkos::MDRangePolicy<>({2, 2, 2}, {n-1, n-1, n-1}), 
        KOKKOS_LAMBDA(const int& k, const int& j, const int& i) {
          unew[i][j][k] = 0.125 * (u[i-1][j][k] + u[i+1][j][k] + 
                                  u[i][j-1][k] + u[i][j+1][k] + 
                                  u[i][j][k-1] + u[i][j][k+1] + 
                                  u[i][j][k]);
        });
      Kokkos::fence();
      std::swap(u, unew);
    }, "Jacobi Parallel");
}

--------------- Code Block 5 ---------------
void jacobi_parallel(
  const int n, 
  const int niter, 
  const int nthreads, 
  double*** u, 
  double*** unew) {

  Kokkos::parallel_for(
    Kokkos::Policy(nthreads, Kokkos::AUTO_CHUNK),
    KOKKOS_LAMBDA(const int iter) {
      for (int k = 1; k < n - 1; ++k) {
        for (int j = 1; j < n - 1; ++j) {
          for (int i = 1; i < n - 1; ++i) {
            unew[i][j][k] = 0.125 * (u[i - 1][j][k] + u[i + 1][j][k] +
                                     u[i][j - 1][k] + u[i][j + 1][k] +
                                     u[i][j][k - 1] + u[i][j][k + 1] +
                                     u[i][j][k]);
          }
        }
      }
      for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
          for (int k = 0; k < n; ++k) {
            u[i][j][k] = unew[i][j][k];
          }
        }
      }
    }, "jacobi_parallel");
}

--------------- Code Block 6 ---------------
void jacobi_parallel(
  const int n,
  const int niter,
  const int nthreads,
  double*** u,
  double*** unew
) {
  Kokkos::parallel_for(
    Kokkos::RangePolicy<>(0, niter),
    KOKKOS_LAMBDA(const int iter) {
      Kokkos::parallel_for(
        Kokkos::MDRangePolicy<>({2, 2, 2}, {n-1, n-1, n-1}),
        KOKKOS_LAMBDA(const int i, const int j, const int k) {
          unew[i][j][k] = 0.125 * (
            u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
            u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]
          );
        }
      );
      Kokkos::deep_copy(u, unew);
    },
    nthreads
  );
}

--------------- Code Block 7 ---------------
void jacobi_parallel(Kokkos::View<double***, Kokkos::LayoutRight> u,
                     Kokkos::View<double***, Kokkos::LayoutRight> unew,
                     int n, int niter) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, niter), [=](int iter) {
    Kokkos::parallel_for(Kokkos::MDRangePolicy<>({2, 2, 2}, {n-1, n-1, n-1}),
                         [=](int k, int j, int i) {
      unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) +
                               u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
    });
    Kokkos::deep_copy(u, unew);
  });
}

--------------- Code Block 8 ---------------
void jacobi_parallel(
  const int n, 
  const int niter, 
  const int nthreads, 
  Kokkos::View<double***, Kokkos::LayoutRight> u, 
  Kokkos::View<double***, Kokkos::LayoutRight> unew) {
  Kokkos::parallel_for(
    Kokkos::RangePolicy<>(0, niter), 
    KOKKOS_LAMBDA(const int iter) {
      Kokkos::parallel_for(
        Kokkos::MDRangePolicy<>({0, 0, 0}, {n, n, n}, {2, 2, 2}), 
        KOKKOS_LAMBDA(const int i, const int j, const int k) {
          unew(i, j, k) = 0.125 * (
            u(i-1, j, k) + u(i+1, j, k) + 
            u(i, j-1, k) + u(i, j+1, k) + 
            u(i, j, k-1) + u(i, j, k+1) + 
            u(i, j, k));
        });
      Kokkos::deep_copy(u, unew);
    }, 
    "jacobi_parallel");
}

--------------- Code Block 9 ---------------
void jacobi_parallel(
  const int n, 
  const int niter, 
  const int nthreads, 
  double*** u, 
  double*** unew
) {
  Kokkos::parallel_for(
    Kokkos::RangePolicy<>(0, niter), 
    KOKKOS_LAMBDA(const int iter) {
      Kokkos::parallel_for(
        Kokkos::MDRangePolicy<>({2, 2, 2}, {n-1, n-1, n-1}), 
        KOKKOS_LAMBDA(const int i, const int j, const int k) {
          unew[i][j][k] = 0.125 * (
            u[i-1][j][k] + u[i+1][j][k] + 
            u[i][j-1][k] + u[i][j+1][k] + 
            u[i][j][k-1] + u[i][j][k+1] + 
            u[i][j][k]
          );
        }
      );
      Kokkos::deep_copy(u, unew);
    }, 
    "jacobi_parallel"
  );
}

--------------- Code Block 10 ---------------
void jacobi_parallel(
  const int n,
  const int niter,
  const int nthreads,
  double*** u,
  double*** unew
) {
  Kokkos::parallel_for(
    Kokkos::RangePolicy<>(0, niter),
    KOKKOS_LAMBDA(const int iter) {
      Kokkos::parallel_for(
        Kokkos::MDRangePolicy<>({2, 2, 2}, {n-1, n-1, n-1}),
        KOKKOS_LAMBDA(const int i, const int j, const int k) {
          unew[i][j][k] = 0.125 * (
            u[i-1][j][k] + u[i+1][j][k] + u[i][j-1][k] +
            u[i][j+1][k] + u[i][j][k-1] + u[i][j][k+1] + u[i][j][k]
          );
        }
      );
      Kokkos::deep_copy(u, unew);
    },
    "Jacobi Parallel"
  );
}

