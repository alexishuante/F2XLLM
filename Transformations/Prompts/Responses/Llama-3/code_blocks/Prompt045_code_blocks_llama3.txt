--------------- Code Block 1 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), 
    KOKKOS_LAMBDA(const int j) {
      for (int i = 0; i < m; ++i) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
          temp += a[i + l * lda] * b[l + j * ldb];
        }
        c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
      }
    });
}

--------------- Code Block 2 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}),
                       KOKKOS_LAMBDA(const int i, const int j) {
                         double temp = 0.0;
                         for (int l = 0; l < k; l++) {
                           temp += a[i + l * lda] * b[l + j * ldb];
                         }
                         c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
                       });
}

--------------- Code Block 3 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}), 
  [=](const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; l++) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}

--------------- Code Block 4 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
  [=](const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; l++) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}

--------------- Code Block 5 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const A, const int lda, 
                   const double* const B, const int ldb, 
                   const double beta, double* const C, const int ldc) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), 
                       [=](const int j) {
                         for (int i = 0; i < m; ++i) {
                           double temp = 0.0;
                           for (int l = 0; l < k; ++l) {
                             temp += A[i + l * lda] * B[l + j * ldb];
                           }
                           C[i + j * ldc] = alpha * temp + beta * C[i + j * ldc];
                         }
                       });
}

--------------- Code Block 6 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
                                             Kokkos::IndexType()(0), 
                                             Kokkos::IndexType()(0)), 
                      KOKKOS_LAMBDA(const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}

--------------- Code Block 7 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}), 
  [&](const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}

--------------- Code Block 8 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
                                         Kokkos::IndexType()(0), 
                                         Kokkos::IndexType()(0)), 
                   KOKKOS_LAMBDA(const int i, const int j) {
                     double temp = 0.0;
                     for (int l = 0; l < k; ++l) {
                       temp += a[i + l * lda] * b[l + j * ldb];
                     }
                     c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
                   });
}

--------------- Code Block 9 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}),
                       KOKKOS_LAMBDA(const int i, const int j) {
                         double temp = 0.0;
                         for (int l = 0; l < k; l++) {
                           temp += a[i + l * lda] * b[l + j * ldb];
                         }
                         c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
                       });
}

--------------- Code Block 10 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::ParallelFor("GEMM", Kokkos::RangePolicy<>(0, n), 
                      KOKKOS_LAMBDA(const int& j) {
    for (int i = 0; i < m; ++i) {
      double temp = 0.0;
      for (int l = 0; l < k; ++l) {
        temp += a[i + l * lda] * b[l + j * ldb];
      }
      c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
    }
  });
}

