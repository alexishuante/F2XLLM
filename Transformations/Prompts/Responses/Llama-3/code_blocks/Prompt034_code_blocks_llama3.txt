--------------- Code Block 1 ---------------
__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel_host(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;
    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));
    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);
    gemv_parallel<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);
    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);
    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

--------------- Code Block 2 ---------------
void gemv_parallel(int n, float *A, float *x, float *y) {
  int i, j;
  float sum;
  int idx = blockIdx.x * blockDim.x + threadIdx.x;

  if (idx < n) {
    sum = 0.0;
    for (j = 0; j < n; j++) {
      sum += A[idx * n + j] * x[j];
    }
    y[idx] = sum;
  }
}

--------------- Code Block 3 ---------------
__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel_wrapper(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;

    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));

    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);

    gemv_parallel<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);

    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

--------------- Code Block 4 ---------------
__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel_wrapper(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    gemv_parallel<<<numBlocks, blockSize>>>(n, A, x, y);
    cudaDeviceSynchronize();
}

--------------- Code Block 5 ---------------
__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel_host(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;
    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));
    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);
    gemv_parallel<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);
    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);
    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

--------------- Code Block 6 ---------------
__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel_host(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;
    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));
    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);
    gemv_parallel<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);
    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);
    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

--------------- Code Block 7 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;

    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));

    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);

    gemv_kernel<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);

    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

--------------- Code Block 8 ---------------
__global__ void gemv_kernel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0f;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *d_A, *d_x, *d_y;

    cudaMalloc((void **)&d_A, n * n * sizeof(float));
    cudaMalloc((void **)&d_x, n * sizeof(float));
    cudaMalloc((void **)&d_y, n * sizeof(float));

    cudaMemcpy(d_A, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(d_x, x, n * sizeof(float), cudaMemcpyHostToDevice);

    gemv_kernel<<<numBlocks, blockSize>>>(n, d_A, d_x, d_y);

    cudaMemcpy(y, d_y, n * sizeof(float), cudaMemcpyDeviceToHost);

    cudaFree(d_A);
    cudaFree(d_x);
    cudaFree(d_y);
}

--------------- Code Block 9 ---------------
__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel_host(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;
    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));
    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);
    gemv_parallel<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);
    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);
    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

--------------- Code Block 10 ---------------
__global__ void gemv_parallel(int n, float *A, float *x, float *y) {
    int i = blockIdx.x * blockDim.x + threadIdx.x;
    if (i < n) {
        float sum = 0.0;
        for (int j = 0; j < n; j++) {
            sum += A[i * n + j] * x[j];
        }
        y[i] = sum;
    }
}

void gemv_parallel_host(int n, float *A, float *x, float *y) {
    int blockSize = 256;
    int numBlocks = (n + blockSize - 1) / blockSize;
    float *A_d, *x_d, *y_d;
    cudaMalloc((void **)&A_d, n * n * sizeof(float));
    cudaMalloc((void **)&x_d, n * sizeof(float));
    cudaMalloc((void **)&y_d, n * sizeof(float));
    cudaMemcpy(A_d, A, n * n * sizeof(float), cudaMemcpyHostToDevice);
    cudaMemcpy(x_d, x, n * sizeof(float), cudaMemcpyHostToDevice);
    gemv_parallel<<<numBlocks, blockSize>>>(n, A_d, x_d, y_d);
    cudaMemcpy(y, y_d, n * sizeof(float), cudaMemcpyDeviceToHost);
    cudaFree(A_d);
    cudaFree(x_d);
    cudaFree(y_d);
}

