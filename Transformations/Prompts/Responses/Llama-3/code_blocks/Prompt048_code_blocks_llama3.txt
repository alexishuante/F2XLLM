--------------- Code Block 1 ---------------
void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::parallel_for(
    Kokkos::MDRangePolicy<Kokkos::Rank<3>>({0, 0, 0}, {niter, n, n}),
    KOKKOS_LAMBDA(const int iter, const int k, const int j, const int i) {
      if (iter > 0 && k > 1 && k < n - 1 && j > 1 && j < n - 1 && i > 1 && i < n - 1) {
        unew(i, j, k) = 0.125 * (
          u(i - 1, j, k) + u(i + 1, j, k) + u(i, j - 1, k) +
          u(i, j + 1, k) + u(i, j, k - 1) + u(i, j, k + 1) + u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}

--------------- Code Block 2 ---------------
void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::parallel_for(
    Kokkos::MDRangePolicy<Kokkos::Rank<3>>({0, 0, 0}, {niter, n, n}),
    KOKKOS_LAMBDA(const int iter, const int k, const int j, const int i) {
      if (iter > 0 && k > 1 && k < n - 1 && j > 1 && j < n - 1 && i > 1 && i < n - 1) {
        unew(i, j, k) = 0.125 * (
          u(i - 1, j, k) + u(i + 1, j, k) + u(i, j - 1, k) +
          u(i, j + 1, k) + u(i, j, k - 1) + u(i, j, k + 1) + u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}

--------------- Code Block 3 ---------------
void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::ParallelFor(
    Kokkos::MDRangePolicy(Kokkos::Rank(3), Kokkos::Index(0), Kokkos::Index(2), Kokkos::Index(2), Kokkos::Index(n-1), Kokkos::Index(n-1), Kokkos::Index(n-1)),
    KOKKOS_LAMBDA(const int i, const int j, const int k) {
      unew(i, j, k) = 0.125 * (u(i-1, j, k) + u(i+1, j, k) + u(i, j-1, k) + u(i, j+1, k) + u(i, j, k-1) + u(i, j, k+1) + u(i, j, k));
    }
  );

  for (int iter = 1; iter <= niter; ++iter) {
    Kokkos::deep_copy(u, unew);
  }
}

--------------- Code Block 4 ---------------
void jacobi_parallel(
  const int& n,
  const int& niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::parallel_for(
    Kokkos::MDRangePolicy<Kokkos::Rank<3>>({0, 0, 0}, {niter, n, n}),
    KOKKOS_LAMBDA(const int& iter, const int& i, const int& j, const int& k) {
      if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        unew(i, j, k) = 0.125 * (
          u(i - 1, j, k) + u(i + 1, j, k) + u(i, j - 1, k) +
          u(i, j + 1, k) + u(i, j, k - 1) + u(i, j, k + 1) + u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}

--------------- Code Block 5 ---------------
void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::ParallelFor(
    Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n-1, n-1, n-1}),
    KOKKOS_LAMBDA(const int i, const int j, const int k) {
      for (int iter = 0; iter < niter; ++iter) {
        unew(i, j, k) = 0.125 * (
          u(i-1, j, k) + u(i+1, j, k) +
          u(i, j-1, k) + u(i, j+1, k) +
          u(i, j, k-1) + u(i, j, k+1) +
          u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}

--------------- Code Block 6 ---------------
void jacobi_parallel(
  const int& n,
  const int& niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::ParallelFor(
    Kokkos::RangePolicy<>(0, niter),
    KOKKOS_LAMBDA(const int& iter) {
      Kokkos::parallel_for(
        Kokkos::MDRangePolicy<>({0, 0, 0}, {n, n, n}, {2, 2, 2}),
        KOKKOS_LAMBDA(const int& i, const int& j, const int& k) {
          unew(i, j, k) = 0.125 * (
            u(i-1, j, k) + u(i+1, j, k) +
            u(i, j-1, k) + u(i, j+1, k) +
            u(i, j, k-1) + u(i, j, k+1) + u(i, j, k)
          );
        }
      );
      Kokkos::deep_copy(u, unew);
    }
  );
}

--------------- Code Block 7 ---------------
void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::parallel_for(
    Kokkos::MDRangePolicy(Kokkos::MDRangeTypes{n, n, n}, {2, 2, 2}, {n-1, n-1, n-1}),
    KOKKOS_LAMBDA(const int i, const int j, const int k, const int iter) {
      if (iter < niter) {
        unew(i, j, k) = 0.125 * (
          u(i-1, j, k) + u(i+1, j, k) +
          u(i, j-1, k) + u(i, j+1, k) +
          u(i, j, k-1) + u(i, j, k+1) +
          u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}

--------------- Code Block 8 ---------------
void jacobi_parallel(
  const int n,
  const int niter,
  Kokkos::View<double***, Kokkos::LayoutRight> u,
  Kokkos::View<double***, Kokkos::LayoutRight> unew
) {
  Kokkos::parallel_for(
    Kokkos::MDRangePolicy(Kokkos::Rank(3), {0, 0, 0}, {niter, n, n}),
    KOKKOS_LAMBDA(const int iter, const int k, const int j, const int i) {
      if (k > 1 && k < n - 1 && j > 1 && j < n - 1 && i > 1 && i < n - 1) {
        unew(i, j, k) = 0.125 * (
          u(i - 1, j, k) + u(i + 1, j, k) + u(i, j - 1, k) +
          u(i, j + 1, k) + u(i, j, k - 1) + u(i, j, k + 1) + u(i, j, k)
        );
      }
    }
  );
  Kokkos::deep_copy(u, unew);
}

--------------- Code Block 9 ---------------
void jacobi_parallel(
  const int n, 
  const int niter, 
  Kokkos::View<double***, Kokkos::LayoutRight> u, 
  Kokkos::View<double***, Kokkos::LayoutRight> unew) {
  Kokkos::ParallelFor(
    Kokkos::MDRangePolicy<Kokkos::Rank<3>>({2, 2, 2}, {n - 1, n - 1, n - 1}),
    KOKKOS_LAMBDA(const int i, const int j, const int k) {
      unew(i, j, k) = 0.125 * (
        u(i - 1, j, k) + u(i + 1, j, k) + 
        u(i, j - 1, k) + u(i, j + 1, k) + 
        u(i, j, k - 1) + u(i, j, k + 1) + 
        u(i, j, k));
    });
  Kokkos::deep_copy(u, unew);
}

--------------- Code Block 10 ---------------
void jacobi_parallel(
  const int n, 
  const int niter, 
  Kokkos::View<double***, Kokkos::LayoutRight> u, 
  Kokkos::View<double***, Kokkos::LayoutRight> unew) {
  Kokkos::ParallelFor(
    Kokkos::RangePolicy(Kokkos::Rank<3>({{0, n}, {0, n}, {0, niter}}),
    KOKKOS_LAMBDA(const int i, const int j, const int k) {
      if (i > 0 && i < n - 1 && j > 0 && j < n - 1 && k > 0 && k < n - 1) {
        unew(i, j, k) = 0.125 * (u(i - 1, j, k) + u(i + 1, j, k) + 
                                 u(i, j - 1, k) + u(i, j + 1, k) + 
                                 u(i, j, k - 1) + u(i, j, k + 1) + 
                                 u(i, j, k));
      }
    });
  Kokkos::deep_copy(u, unew);
}

