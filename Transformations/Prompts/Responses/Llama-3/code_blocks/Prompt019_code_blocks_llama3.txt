--------------- Code Block 1 ---------------
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  #pragma acc kernels loop independent
  for (i = 0; i < n; i++) {
    y[i] = 0.0;
    #pragma acc loop reduction(+:y[i])
    for (j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

--------------- Code Block 2 ---------------
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  #pragma acc kernels present(val, row, col, x, y)
  #pragma acc loop independent
  for (int i = 0; i < n; i++) {
    float sum = 0.0;
    #pragma acc loop reduction(+:sum)
    for (int j = row[i]; j < row[i+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  }
}

--------------- Code Block 3 ---------------
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  #pragma acc kernels loop independent
  for (i = 0; i < n; i++) {
    y[i] = 0.0;
    #pragma acc loop reduction(+:y[i])
    for (j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

--------------- Code Block 4 ---------------
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  #pragma acc kernels loop independent
  for (i = 0; i < n; i++) {
    y[i] = 0.0;
    #pragma acc loop reduction(+:y[i])
    for (j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

--------------- Code Block 5 ---------------
void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  int i, j;
  #pragma acc parallel loop copyin(val, row, col, x) copy(y)
  for (i = 0; i < n; i++) {
    y[i] = 0.0;
    #pragma acc loop reduction(+:y[i])
    for (j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

--------------- Code Block 6 ---------------
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  #pragma acc kernels loop independent
  for (i = 0; i < n; i++) {
    y[i] = 0.0;
    #pragma acc loop reduction(+:y[i])
    for (j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

--------------- Code Block 7 ---------------
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  #pragma acc kernels loop independent
  for (i = 0; i < n; i++) {
    y[i] = 0.0;
    #pragma acc loop reduction(+:y[i])
    for (j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

--------------- Code Block 8 ---------------
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  #pragma acc kernels loop independent
  for (i = 0; i < n; i++) {
    y[i] = 0.0;
    #pragma acc loop reduction(+:y[i])
    for (j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

--------------- Code Block 9 ---------------
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  #pragma acc parallel loop copyin(val, row, col, x) copy(y)
  for (i = 0; i < n; i++) {
    y[i] = 0.0;
    #pragma acc loop reduction(+:y[i])
    for (j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

--------------- Code Block 10 ---------------
void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  #pragma acc kernels present(val, row, col, x, y)
  #pragma acc loop independent
  for (i = 0; i < n; i++) {
    y[i] = 0.0;
    #pragma acc loop reduction(+:y[i])
    for (j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

