--------------- Code Block 1 ---------------
void gemv_parallel(int n, const float* A, const float* x, float* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), 
    [&](const int& i) {
      float sum = 0.0;
      for (int j = 0; j < n; j++) {
        sum += A[i * n + j] * x[j];
      }
      y[i] = sum;
    });
}

--------------- Code Block 2 ---------------
void gemv_parallel(const int n, const double* A, const double* x, double* y) {
  Kokkos::parallel_for(
    Kokkos::RangePolicy<>(0, n), 
    KOKKOS_LAMBDA(const int i) {
      double sum = 0.0;
      for (int j = 0; j < n; ++j) {
        sum += A[i * n + j] * x[j];
      }
      y[i] = sum;
    }
  );
}

--------------- Code Block 3 ---------------
void gemv_parallel(const int n, const double* A, const double* x, double* y) {
  Kokkos::parallel_for(
    Kokkos::RangePolicy<>(0, n), 
    KOKKOS_LAMBDA(const int i) {
      double sum = 0.0;
      for (int j = 0; j < n; j++) {
        sum += A[i * n + j] * x[j];
      }
      y[i] = sum;
    }
  );
}

--------------- Code Block 4 ---------------
void gemv_parallel(const int n, const Kokkos::View<double**> A, 
                   const Kokkos::View<double*> x, 
                   Kokkos::View<double*> y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), 
                       KOKKOS_LAMBDA(const int i) {
                         double sum = 0.0;
                         for (int j = 0; j < n; ++j) {
                           sum += A(i, j) * x(j);
                         }
                         y(i) = sum;
                       });
}

--------------- Code Block 5 ---------------
void gemv_parallel(const int n, const double* A, const double* x, double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(const int i) {
    double sum = 0.0;
    for (int j = 0; j < n; j++) {
      sum += A[i * n + j] * x[j];
    }
    y[i] = sum;
  });
}

--------------- Code Block 6 ---------------
void gemv_parallel(const int n, const double* A, const double* x, double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), 
    KOKKOS_LAMBDA(const int i) {
      double sum = 0.0;
      for (int j = 0; j < n; j++) {
        sum += A[i * n + j] * x[j];
      }
      y[i] = sum;
    });
}

--------------- Code Block 7 ---------------
void gemv_parallel(const int n, const double* A, const double* x, double* y) {
  Kokkos::parallel_for(
    Kokkos::RangePolicy<>(0, n), 
    KOKKOS_LAMBDA(const int i) {
      double sum = 0.0;
      for (int j = 0; j < n; ++j) {
        sum += A[i * n + j] * x[j];
      }
      y[i] = sum;
    }
  );
}

--------------- Code Block 8 ---------------
void gemv_parallel(const int n, const double* A, const double* x, double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), 
    [&](const int i) {
      double sum = 0.0;
      for (int j = 0; j < n; ++j) {
        sum += A[i * n + j] * x[j];
      }
      y[i] = sum;
    });
}

--------------- Code Block 9 ---------------
void gemv_parallel(const int n, const Kokkos::View<double**> A, 
                   const Kokkos::View<double*> x, Kokkos::View<double*> y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), 
                       KOKKOS_LAMBDA(const int i) {
                         double sum = 0.0;
                         for (int j = 0; j < n; j++) {
                           sum += A(i, j) * x(j);
                         }
                         y(i) = sum;
                       });
}

--------------- Code Block 10 ---------------
void gemv_parallel(const int n, const double* A, const double* x, double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), [=](const int i) {
    double sum = 0.0;
    for (int j = 0; j < n; j++) {
      sum += A[i * n + j] * x[j];
    }
    y[i] = sum;
  });
}

