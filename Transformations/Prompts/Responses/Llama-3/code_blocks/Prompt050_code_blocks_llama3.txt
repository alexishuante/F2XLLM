--------------- Code Block 1 ---------------
void spmv_parallel(const int n, const int nnz, const double* val, const int* row, const int* col, const double* x, double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(const int i) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i + 1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  });
}

--------------- Code Block 2 ---------------
void spmv_parallel(const int n, const int nnz, const double *val, 
                   const int *row, const int *col, const double *x, 
                   double *y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), 
    [&](const int i) {
      y[i] = 0.0;
      for (int j = row[i]; j < row[i+1]; j++) {
        y[i] += val[j] * x[col[j]];
      }
    });
}

--------------- Code Block 3 ---------------
void spmv_parallel(const int n, const int nnz, const double* val, const int* row, const int* col, const double* x, double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(const int i) {
    double sum = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  });
}

--------------- Code Block 4 ---------------
void spmv_parallel(int n, int nnz, const double* val, const int* row, const int* col, const double* x, double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(const int i) {
    double sum = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  });
}

--------------- Code Block 5 ---------------
void spmv_parallel(const int n, const int nnz, const double* val, const int* row, const int* col, const double* x, double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(const int i) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i + 1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  });
}

--------------- Code Block 6 ---------------
void spmv_parallel(const int n, const int nnz, const double* val, 
                   const int* row, const int* col, const double* x, 
                   double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), 
    KOKKOS_LAMBDA(const int i) {
      double sum = 0.0;
      for (int j = row[i]; j < row[i+1]; j++) {
        sum += val[j] * x[col[j]];
      }
      y[i] = sum;
    });
}

--------------- Code Block 7 ---------------
void spmv_parallel(const int n, const int nnz, const double *val, const int *row, const int *col, const double *x, double *y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(const int i) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  });
}

--------------- Code Block 8 ---------------
void spmv_parallel(const int n, const int nnz, const double* val, const int* row, const int* col, const double* x, double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(const int i) {
    double sum = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  });
}

--------------- Code Block 9 ---------------
void spmv_parallel(const int n, const int nnz, const double* val, const int* row, const int* col, const double* x, double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(const int i) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  });
}

--------------- Code Block 10 ---------------
void spmv_parallel(const int n, const int nnz, const double* val, const int* row, const int* col, const double* x, double* y) {
  Kokkos::parallel_for(Kokkos::RangePolicy<>(0, n), KOKKOS_LAMBDA(const int i) {
    double sum = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  });
}

