--------------- Code Block 1 ---------------
__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  hipLaunchKernel(
    spmv_kernel, 
    dim3(n, 1, 1), 
    dim3(1, 1, 1), 
    0, 
    0, 
    n, nnz, val, row, col, x, y
  );
}

--------------- Code Block 2 ---------------
__global__ void spmv_kernel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    double sum = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  }
}

void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  int i, j;
  hipLaunchKernelGGL(HIP_KERNEL_NAME(spmv_kernel), dim3(n), dim3(1), 0, 0, n, nnz, val, row, col, x, y);
}

--------------- Code Block 3 ---------------
__global__ void spmv_kernel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    y[i] = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      y[i] += val[j] * x[col[j]];
    }
  }
}

void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  int i, j;
  hipLaunchKernelGGL(HIP_KERNEL_NAME(spmv_kernel), dim3(n), dim3(1), 0, 0, n, nnz, val, row, col, x, y);
}

--------------- Code Block 4 ---------------
__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  }
}

void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  hipLaunchKernelGGL(
    HIP_KERNEL_NAME(spmv_kernel), dim3(n), dim3(256), 0, 0,
    n, nnz, val, row, col, x, y
  );
}

--------------- Code Block 5 ---------------
__global__ void spmv_kernel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    double sum = 0.0;
    for (int j = row[i]; j < row[i + 1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  }
}

void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  int i, j;
  double *d_val, *d_x, *d_y;
  int *d_row, *d_col;

  // Allocate memory on the device
  hipMalloc((void **)&d_val, nnz * sizeof(double));
  hipMalloc((void **)&d_x, n * sizeof(double));
  hipMalloc((void **)&d_y, n * sizeof(double));
  hipMalloc((void **)&d_row, (n + 1) * sizeof(int));
  hipMalloc((void **)&d_col, nnz * sizeof(int));

  // Copy data from host to device
  hipMemcpy(d_val, val, nnz * sizeof(double), hipMemcpyHostToDevice);
  hipMemcpy(d_x, x, n * sizeof(double), hipMemcpyHostToDevice);
  hipMemcpy(d_row, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
  hipMemcpy(d_col, col, nnz * sizeof(int), hipMemcpyHostToDevice);

  // Launch kernel
  hipLaunchKernel(spmv_kernel, dim3(n), dim3(256), 0, 0, n, nnz, d_val, d_row, d_col, d_x, d_y);

  // Copy result from device to host
  hipMemcpy(y, d_y, n * sizeof(double), hipMemcpyDeviceToHost);

  // Free device memory
  hipFree(d_val);
  hipFree(d_x);
  hipFree(d_y);
  hipFree(d_row);
  hipFree(d_col);
}

--------------- Code Block 6 ---------------
void spmv_parallel_hip(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  float *val_d, *x_d, *y_d;
  int *row_d, *col_d;

  hipMalloc((void **)&val_d, nnz * sizeof(float));
  hipMalloc((void **)&x_d, n * sizeof(float));
  hipMalloc((void **)&y_d, n * sizeof(float));
  hipMalloc((void **)&row_d, (n + 1) * sizeof(int));
  hipMalloc((void **)&col_d, nnz * sizeof(int));

  hipMemcpy(val_d, val, nnz * sizeof(float), hipMemcpyHostToDevice);
  hipMemcpy(x_d, x, n * sizeof(float), hipMemcpyHostToDevice);
  hipMemcpy(row_d, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
  hipMemcpy(col_d, col, nnz * sizeof(int), hipMemcpyHostToDevice);

  spmv_parallel_(&n, &nnz, val_d, row_d, col_d, x_d, y_d);

  hipMemcpy(y, y_d, n * sizeof(float), hipMemcpyDeviceToHost);

  hipFree(val_d);
  hipFree(x_d);
  hipFree(y_d);
  hipFree(row_d);
  hipFree(col_d);
}

--------------- Code Block 7 ---------------
void spmv_parallel_hip(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  double *val_d, *x_d, *y_d;
  int *row_d, *col_d;

  // Allocate device memory
  hipMalloc((void **)&val_d, nnz * sizeof(double));
  hipMalloc((void **)&x_d, n * sizeof(double));
  hipMalloc((void **)&y_d, n * sizeof(double));
  hipMalloc((void **)&row_d, (n + 1) * sizeof(int));
  hipMalloc((void **)&col_d, nnz * sizeof(int));

  // Copy data to device
  hipMemcpy(val_d, val, nnz * sizeof(double), hipMemcpyHostToDevice);
  hipMemcpy(x_d, x, n * sizeof(double), hipMemcpyHostToDevice);
  hipMemcpy(row_d, row, (n + 1) * sizeof(int), hipMemcpyHostToDevice);
  hipMemcpy(col_d, col, nnz * sizeof(int), hipMemcpyHostToDevice);

  // Call Fortran subroutine
  spmv_parallel_(&n, &nnz, val_d, row_d, col_d, x_d, y_d);

  // Copy result back to host
  hipMemcpy(y, y_d, n * sizeof(double), hipMemcpyDeviceToHost);

  // Free device memory
  hipFree(val_d);
  hipFree(x_d);
  hipFree(y_d);
  hipFree(row_d);
  hipFree(col_d);
}

--------------- Code Block 8 ---------------
__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  }
}

void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  hipLaunchKernelGGL((spmv_kernel), dim3(n), dim3(256), 0, 0, n, nnz, val, row, col, x, y);
}

--------------- Code Block 9 ---------------
__global__ void spmv_kernel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    double sum = 0.0;
    for (int j = row[i]; j < row[i + 1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  }
}

void spmv_parallel(int n, int nnz, double *val, int *row, int *col, double *x, double *y) {
  int i, j;
  double *y_d;
  hipMalloc((void **)&y_d, n * sizeof(double));

  hipMemcpy(y_d, y, n * sizeof(double), hipMemcpyHostToDevice);

  hipLaunchKernel(GLOBAL_SIZE(n), BLOCK_SIZE(256), 0, 0, spmv_kernel, n, nnz, val, row, col, x, y_d);

  hipMemcpy(y, y_d, n * sizeof(double), hipMemcpyDeviceToHost);

  hipFree(y_d);
}

--------------- Code Block 10 ---------------
__global__ void spmv_kernel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  if (i < n) {
    float sum = 0.0;
    for (int j = row[i]; j < row[i+1]; j++) {
      sum += val[j] * x[col[j]];
    }
    y[i] = sum;
  }
}

void spmv_parallel(int n, int nnz, float *val, int *row, int *col, float *x, float *y) {
  int i, j;
  hipLaunchKernelGGL((spmv_kernel), dim3(n), dim3(256), 0, 0, n, nnz, val, row, col, x, y);
}

