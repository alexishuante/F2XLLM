--------------- Code Block 1 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (
      u[(i-1) * n * n + j * n + k] + u[(i+1) * n * n + j * n + k] +
      u[i * n * n + (j-1) * n + k] + u[i * n * n + (j+1) * n + k] +
      u[i * n * n + j * n + (k-1)] + u[i * n * n + j * n + (k+1)] +
      u[i * n * n + j * n + k]
    );
  }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int blockSize = 16;
  int numBlocks = (n + blockSize - 1) / blockSize;

  hipLaunchKernelGGL(jacobi_kernel, dim3(numBlocks, numBlocks, numBlocks), dim3(blockSize, blockSize, blockSize), 0, 0, u, unew, n);

  for (int iter = 1; iter <= niter; iter++) {
    hipDeviceSynchronize();

    // Swap u and unew
    double *temp = u;
    u = unew;
    unew = temp;
  }
}

--------------- Code Block 2 ---------------
__global__ void jacobi_kernel(int n, int niter, double *u, double *unew) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] + u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] + u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(256), 0, 0, n, niter, u, unew);
}

--------------- Code Block 3 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] + u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] + u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
    }
  }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernel(GLOBAL_SIZE, nthreads, jacobi_kernel, (double *)u, (double *)unew, n, niter);
}

--------------- Code Block 4 ---------------
__global__ void jacobi_kernel(int n, int niter, double *u, double *unew) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
    }
    u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
  }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(256), 0, 0, n, niter, u, unew);
}

--------------- Code Block 5 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int idx = blockIdx.x * blockDim.x + threadIdx.x;
  int stride = blockDim.x * gridDim.x;
  for (int iter = 1; iter <= niter; iter++) {
    for (int k = 2; k < n - 1; k += stride) {
      for (int j = 2; j < n - 1; j++) {
        for (int i = 2; i < n - 1; i += stride) {
          int index = i + j * n + k * n * n;
          unew[index] = 0.125 * (u[index - 1] + u[index + 1] + u[index - n] +
                                 u[index + n] + u[index - n * n] + u[index + n * n] + u[index]);
        }
      }
    }
    __syncthreads();
    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernelGGL(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, 
                     u, unew, n, niter);
}

--------------- Code Block 6 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] + u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] + u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] + u[i * n * n + j * n + k]);
      __syncthreads();
      if (iter == niter) {
        u[i * n * n + j * n + k] = unew[i * n * n + j * n + k];
      }
    }
  }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int i, j, k, iter;
  hipLaunchKernel(GLOBAL_SIZE, nthreads, 0, 0, jacobi_kernel, u, unew, n, niter);
}

--------------- Code Block 7 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n, int niter, int nthreads) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;
  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 1; iter <= niter; iter++) {
      unew[i + j * n + k * n * n] = 0.125 * (u[(i - 1) + j * n + k * n * n] + u[(i + 1) + j * n + k * n * n] + u[i + (j - 1) * n + k * n * n] + u[i + (j + 1) * n + k * n * n] + u[i + j * n + (k - 1) * n * n] + u[i + j * n + (k + 1) * n * n] + u[i + j * n + k * n * n]);
      __syncthreads();
      if (iter == niter) {
        u[i + j * n + k * n * n] = unew[i + j * n + k * n * n];
      }
    }
  }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  dim3 blockSize(256);
  dim3 gridSize((n - 2) * (n - 2) * (n - 2) / blockSize.x + 1);
  hipLaunchKernel(jacobi_kernel, gridSize, blockSize, 0, 0, u, unew, n, niter, nthreads);
}

--------------- Code Block 8 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i > 1 && i < n - 1 && j > 1 && j < n - 1 && k > 1 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i - 1) * n * n + j * n + k] +
                                            u[(i + 1) * n * n + j * n + k] +
                                            u[i * n * n + (j - 1) * n + k] +
                                            u[i * n * n + (j + 1) * n + k] +
                                            u[i * n * n + j * n + (k - 1)] +
                                            u[i * n * n + j * n + (k + 1)] +
                                            u[i * n * n + j * n + k]);
  }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int blockSize = 256;
  int numBlocks = (n + blockSize - 1) / blockSize;

  dim3 dimBlock(blockSize, blockSize, blockSize);
  dim3 dimGrid(numBlocks, numBlocks, numBlocks);

  for (int iter = 0; iter < niter; iter++) {
    hipLaunchKernelGGL(jacobi_kernel, dimGrid, dimBlock, 0, 0, u, unew, n);
    hipDeviceSynchronize();

    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

--------------- Code Block 9 ---------------
__global__ void jacobi_kernel(float *u, float *unew, int n, int niter) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    for (int iter = 0; iter < niter; iter++) {
      unew[i * n * n + j * n + k] = 0.125f * (
        u[(i - 1) * n * n + j * n + k] + u[(i + 1) * n * n + j * n + k] +
        u[i * n * n + (j - 1) * n + k] + u[i * n * n + (j + 1) * n + k] +
        u[i * n * n + j * n + (k - 1)] + u[i * n * n + j * n + (k + 1)] +
        u[i * n * n + j * n + k]
      );
    }
  }
}

void jacobi_parallel(float *u, float *unew, int n, int niter, int nthreads) {
  hipLaunchKernel(jacobi_kernel, dim3(nthreads), dim3(1), 0, 0, u, unew, n, niter);
}

--------------- Code Block 10 ---------------
__global__ void jacobi_kernel(double *u, double *unew, int n) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;
  int j = blockIdx.y * blockDim.y + threadIdx.y;
  int k = blockIdx.z * blockDim.z + threadIdx.z;

  if (i >= 2 && i < n - 1 && j >= 2 && j < n - 1 && k >= 2 && k < n - 1) {
    unew[i * n * n + j * n + k] = 0.125 * (u[(i-1) * n * n + j * n + k] + 
                                            u[(i+1) * n * n + j * n + k] + 
                                            u[i * n * n + (j-1) * n + k] + 
                                            u[i * n * n + (j+1) * n + k] + 
                                            u[i * n * n + j * n + (k-1)] + 
                                            u[i * n * n + j * n + (k+1)] + 
                                            u[i * n * n + j * n + k]);
  }
}

void jacobi_parallel(double *u, double *unew, int n, int niter, int nthreads) {
  int blockSize = 16;
  int numBlocks = (n + blockSize - 1) / blockSize;

  dim3 blockDim(blockSize, blockSize, blockSize);
  dim3 gridDim(numBlocks, numBlocks, numBlocks);

  for (int iter = 0; iter < niter; iter++) {
    hipLaunchKernelGGL(jacobi_kernel, gridDim, blockDim, 0, 0, u, unew, n);
    hipDeviceSynchronize();

    double *tmp = u;
    u = unew;
    unew = tmp;
  }
}

