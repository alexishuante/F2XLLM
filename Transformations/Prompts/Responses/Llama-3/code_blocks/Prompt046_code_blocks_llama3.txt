--------------- Code Block 1 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* A, const int lda, 
                   const double* B, const int ldb, 
                   const double beta, double* C, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
                                             Kokkos::Iterate::Thread(), 
                                             Kokkos::ArgIndex<2>(), 
                                             [=](const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += A[i * lda + l] * B[l * ldb + j];
    }
    C[i * ldc + j] = alpha * temp + beta * C[i * ldc + j];
  });
}

--------------- Code Block 2 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* A, const int lda, 
                   const double* B, const int ldb, 
                   const double beta, double* C, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}),
                       KOKKOS_LAMBDA(const int i, const int j) {
                         double temp = 0.0;
                         for (int l = 0; l < k; l++) {
                           temp += A[i + l * lda] * B[l + j * ldb];
                         }
                         C[i + j * ldc] = alpha * temp + beta * C[i + j * ldc];
                       });
}

--------------- Code Block 3 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}}, {{m, n}}),
    KOKKOS_LAMBDA(const int i, const int j) {
      double temp = 0.0;
      for (int l = 0; l < k; ++l) {
        temp += a[i + l * lda] * b[l + j * ldb];
      }
      c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
    });
}

--------------- Code Block 4 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}), 
  [=](const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}

--------------- Code Block 5 ---------------
void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}), KOKKOS_LAMBDA(int i, int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += a[i * lda + l] * b[l * ldb + j];
    }
    c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
  });
}

--------------- Code Block 6 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* A, const int lda, 
                   const double* B, const int ldb, 
                   const double beta, double* C, const int ldc) {
  Kokkos::parallel_nd(Kokkos::RangePolicy<>(0, m), Kokkos::RangePolicy<>(0, n), 
                      KOKKOS_LAMBDA(const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; l++) {
      temp += A[i * lda + l] * B[l * ldb + j];
    }
    C[i * ldc + j] = alpha * temp + beta * C[i * ldc + j];
  });
}

--------------- Code Block 7 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_nd(Kokkos::RangePolicy<>(0, m), Kokkos::RangePolicy<>(0, n), 
                      KOKKOS_LAMBDA(const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; ++l) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}

--------------- Code Block 8 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
                                             Kokkos::IndexType(),
                                             Kokkos::SizeType()),
                       KOKKOS_LAMBDA(const int i, const int j) {
                         double temp = 0.0;
                         for (int l = 0; l < k; l++) {
                           temp += a[i + l * lda] * b[l + j * ldb];
                         }
                         c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
                       });
}

--------------- Code Block 9 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy<Kokkos::Rank<2>>({0, 0}, {m, n}),
                       KOKKOS_LAMBDA(const int i, const int j) {
                         double temp = 0.0;
                         for (int l = 0; l < k; ++l) {
                           temp += a[i + l * lda] * b[l + j * ldb];
                         }
                         c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
                       });
}

--------------- Code Block 10 ---------------
void gemm_parallel(const int m, const int n, const int k, 
                   const double alpha, const double* const a, const int lda, 
                   const double* const b, const int ldb, 
                   const double beta, double* const c, const int ldc) {
  Kokkos::parallel_for(Kokkos::MDRangePolicy(Kokkos::Rank<2>({{0, 0}, {m, n}}), 
                                             Kokkos::IndexType()(0), 
                                             Kokkos::IndexType()(0)), 
                       KOKKOS_LAMBDA(const int i, const int j) {
    double temp = 0.0;
    for (int l = 0; l < k; l++) {
      temp += a[i + l * lda] * b[l + j * ldb];
    }
    c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
  });
}

