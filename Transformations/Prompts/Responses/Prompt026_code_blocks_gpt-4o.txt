Code Block 1:
extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    // Define block size and grid size
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x, (m + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Allocate device memory
    double *d_a, *d_b, *d_c;
    hipMalloc((void**)&d_a, m * k * sizeof(double));
    hipMalloc((void**)&d_b, k * n * sizeof(double));
    hipMalloc((void**)&d_c, m * n * sizeof(double));

    // Copy data to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Launch kernel
    hipLaunchKernelGGL(gemm_kernel, numBlocks, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, double beta, double *c, int ldc) {
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

Code Block 2:
void gemm_parallel(int m, int n, int k, double alpha, const double* A, int lda, const double* B, int ldb, double beta, double* C, int ldc) {
    double *d_A, *d_B, *d_C;
    
    // Allocate device memory
    hipMalloc(&d_A, m * k * sizeof(double));
    hipMalloc(&d_B, k * n * sizeof(double));
    hipMalloc(&d_C, m * n * sizeof(double));

    // Copy data to the device
    hipMemcpy(d_A, A, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_B, B, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_C, C, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Define the block and grid size
    dim3 blockSize(16, 16);  // 16x16 threads per block
    dim3 gridSize((n + blockSize.x - 1) / blockSize.x, (m + blockSize.y - 1) / blockSize.y);

    // Launch the kernel
    hipLaunchKernelGGL(gemm_kernel, gridSize, blockSize, 0, 0, m, n, k, alpha, d_A, lda, d_B, ldb, beta, d_C, ldc);

    // Copy the result back to the host
    hipMemcpy(C, d_C, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_A);
    hipFree(d_B);
    hipFree(d_C);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* __restrict__ A, int lda, const double* __restrict__ B, int ldb, double beta, double* __restrict__ C, int ldc) {
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    int i = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += A[i * lda + l] * B[l * ldb + j];
        }
        C[i * ldc + j] = alpha * temp + beta * C[i * ldc + j];
    }
}

Code Block 3:
void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    // Set up device pointers
    double *d_a, *d_b, *d_c;

    // Allocate device memory
    hipMalloc((void**)&d_a, m * k * sizeof(double));
    hipMalloc((void**)&d_b, k * n * sizeof(double));
    hipMalloc((void**)&d_c, m * n * sizeof(double));

    // Copy data to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Set up execution configuration: 16x16 threads/block
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((n + 15) / 16, (m + 15) / 16);

    // Launch the GEMM kernel
    hipLaunchKernelGGL(gemm_kernel, numBlocks, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy results back to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    int j = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < m && j < n) {
        double temp = 0.0;

        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }

        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 4:
extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    double *d_a, *d_b, *d_c;
    size_t size_a = m * k * sizeof(double);
    size_t size_b = k * n * sizeof(double);
    size_t size_c = m * n * sizeof(double);

    hipMalloc(&d_a, size_a);
    hipMalloc(&d_b, size_b);
    hipMalloc(&d_c, size_c);

    hipMemcpy(d_a, a, size_a, hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, size_b, hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, size_c, hipMemcpyHostToDevice);

    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x,
                   (m + threadsPerBlock.y - 1) / threadsPerBlock.y);
                   
    hipLaunchKernelGGL(gemm_kernel, numBlocks, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);
    
    hipMemcpy(c, d_c, size_c, hipMemcpyDeviceToHost);

    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    int i = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[i + l * lda] * b[l + j * ldb];
        }
        c[i + j * ldc] = alpha * temp + beta * c[i + j * ldc];
    }
}

Code Block 5:
void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    double *d_a, *d_b, *d_c;

    size_t size_a = lda * k * sizeof(double);
    size_t size_b = ldb * n * sizeof(double);
    size_t size_c = ldc * n * sizeof(double);

    // Allocate device memory
    hipMalloc(&d_a, size_a);
    hipMalloc(&d_b, size_b);
    hipMalloc(&d_c, size_c);

    // Copy data to device
    hipMemcpy(d_a, a, size_a, hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, size_b, hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, size_c, hipMemcpyHostToDevice);

    // Launch kernel
    dim3 threadsPerBlock(16, 16);
    dim3 blocksPerGrid((n + 15) / 16, (m + 15) / 16);
    hipLaunchKernelGGL(gemm_parallel_kernel, blocksPerGrid, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back to host
    hipMemcpy(c, d_c, size_c, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_parallel_kernel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    int i = blockIdx.y * blockDim.y + threadIdx.y;
    
    if(i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[IDX2C(i, l, lda)] * b[IDX2C(l, j, ldb)];
        }
        c[IDX2C(i, j, ldc)] = alpha * temp + beta * c[IDX2C(i, j, ldc)];
    }
}

Code Block 6:
void gemm_parallel(int m, int n, int k, double alpha, 
                   const double* a, int lda, 
                   const double* b, int ldb, 
                   double beta, double* c, int ldc)
{
    double *d_a, *d_b, *d_c;
    
    // Allocate device memory
    hipMalloc((void**)&d_a, m * k * sizeof(double));
    hipMalloc((void**)&d_b, k * n * sizeof(double));
    hipMalloc((void**)&d_c, m * n * sizeof(double));

    // Copy data from host to device
    hipMemcpy(d_a, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Define the number of threads per block and the number of blocks per grid
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((n + threadsPerBlock.x - 1) / threadsPerBlock.x, 
                   (m + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Launch the GEMM kernel on the GPU
    hipLaunchKernelGGL(gemm_kernel, numBlocks, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy the result from device to host
    hipMemcpy(c, d_c, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, 
                            const double* __restrict__ a, int lda, 
                            const double* __restrict__ b, int ldb, 
                            double beta, double* __restrict__ c, int ldc) 
{
    int j = blockIdx.x * blockDim.x + threadIdx.x;
    int i = blockIdx.y * blockDim.y + threadIdx.y;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 7:
extern "C" void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    // Define the size of the thread blocks
    dim3 threadsPerBlock(16, 16);
    // Calculate the number of blocks required
    dim3 numBlocks((m + threadsPerBlock.x - 1) / threadsPerBlock.x, (n + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Launch the kernel
    hipLaunchKernelGGL(gemm_parallel_kernel, numBlocks, threadsPerBlock, 0, 0, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);
    // Synchronize the device
    hipDeviceSynchronize();
}

__global__ void gemm_parallel_kernel(int m, int n, int k, double alpha, const double* a, int lda, const double* b, int ldb, double beta, double* c, int ldc) {
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 8:
void gemm_parallel(int m, int n, int k, double alpha, const double* a, int lda, 
                   const double* b, int ldb, double beta, double* c, int ldc) {
    double *d_a, *d_b, *d_c;
    size_t size_a = lda * k * sizeof(double);
    size_t size_b = ldb * n * sizeof(double);
    size_t size_c = ldc * n * sizeof(double);

    // Allocate device memory
    hipMalloc((void**)&d_a, size_a);
    hipMalloc((void**)&d_b, size_b);
    hipMalloc((void**)&d_c, size_c);

    // Copy data to device
    hipMemcpy(d_a, a, size_a, hipMemcpyHostToDevice);
    hipMemcpy(d_b, b, size_b, hipMemcpyHostToDevice);
    hipMemcpy(d_c, c, size_c, hipMemcpyHostToDevice);

    // Define grid and block dimensions
    dim3 threadsPerBlock(16, 16);
    dim3 blocksPerGrid((m + 15) / 16, (n + 15) / 16);

    // Launch kernel
    hipLaunchKernelGGL(gemm_kernel, blocksPerGrid, threadsPerBlock, 0, 0, m, n, k, alpha, d_a, lda, d_b, ldb, beta, d_c, ldc);

    // Copy result back to host
    hipMemcpy(c, d_c, size_c, hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(d_a);
    hipFree(d_b);
    hipFree(d_c);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, const double* a, int lda, 
                            const double* b, int ldb, double beta, double* c, int ldc) {
    int j = blockIdx.y * blockDim.y + threadIdx.y;
    int i = blockIdx.x * blockDim.x + threadIdx.x;

    if (i < m && j < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[i * lda + l] * b[l * ldb + j];
        }
        c[i * ldc + j] = alpha * temp + beta * c[i * ldc + j];
    }
}

Code Block 9:
void gemm_parallel(int m, int n, int k, double alpha, double* a, int lda, double* b, int ldb, double beta, double* c, int ldc) {
    // Device memory pointers
    double *dA, *dB, *dC;

    // Allocate device memory
    hipMalloc(&dA, m * k * sizeof(double));
    hipMalloc(&dB, k * n * sizeof(double));
    hipMalloc(&dC, m * n * sizeof(double));

    // Copy data from host to device
    hipMemcpy(dA, a, m * k * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(dB, b, k * n * sizeof(double), hipMemcpyHostToDevice);
    hipMemcpy(dC, c, m * n * sizeof(double), hipMemcpyHostToDevice);

    // Define grid and block dimensions
    dim3 threadsPerBlock(16, 16);
    dim3 numBlocks((m + threadsPerBlock.x - 1) / threadsPerBlock.x, (n + threadsPerBlock.y - 1) / threadsPerBlock.y);

    // Launch the GEMM kernel
    hipLaunchKernelGGL(gemm_kernel, numBlocks, threadsPerBlock, 0, 0, m, n, k, alpha, dA, lda, dB, ldb, beta, dC, ldc);
    hipDeviceSynchronize();

    // Copy the result from device to host
    hipMemcpy(c, dC, m * n * sizeof(double), hipMemcpyDeviceToHost);

    // Free device memory
    hipFree(dA);
    hipFree(dB);
    hipFree(dC);
}

__global__ void gemm_kernel(int m, int n, int k, double alpha, double* A, int lda, double* B, int ldb, double beta, double* C, int ldc) {
    int row = blockIdx.x * blockDim.x + threadIdx.x;
    int col = blockIdx.y * blockDim.y + threadIdx.y;

    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; ++l) {
            temp += A[row * lda + l] * B[l * ldb + col];
        }
        C[row * ldc + col] = alpha * temp + beta * C[row * ldc + col];
    }
}

Code Block 10:
computation
    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }

__global__ void gemm_parallel_device(int m, int n, int k, double alpha, const double *a, int lda, const double *b, int ldb, 
                                     double beta, double *c, int ldc) {
    // Calculate the row index of the C element and M
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    // Calculate the column index of C and N
    int col = blockIdx.x * blockDim.x + threadIdx.x;

    // Perform the computation
    if (row < m && col < n) {
        double temp = 0.0;
        for (int l = 0; l < k; l++) {
            temp += a[row * lda + l] * b[l * ldb + col];
        }
        c[row * ldc + col] = alpha * temp + beta * c[row * ldc + col];
    }
}

